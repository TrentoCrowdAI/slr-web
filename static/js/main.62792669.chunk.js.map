{"version":3,"sources":["utils/conn.js","components/main.js","components/svg/editButton.js","components/navigation/navBar.js","components/modules/error.js","components/providers/appProvider.js","components/home.js","components/navigation/userInfo.js","config/index.js","components/svg/menuButton.js","components/modules/cover.js","components/navigation/sideMenu.js","dao/projects.dao.js","components/svg/loadIcon.js","components/svg/closeButton.js","components/forms/projectForm.js","components/modules/pagination.js","utils/index.js","components/svg/optionsButton.js","components/modules/sideOptions.js","components/projects/projectsList.js","dao/paper.dao.js","dao/projectPapers.dao.js","components/forms/checkbox.js","components/forms/radiobox.js","components/svg/searchButton.js","components/papers/printPapersList.js","components/svg/selectArrow.js","components/forms/select.js","components/svg/orderArrow.js","components/forms/searchform.js","components/papers/papersList.js","components/projects/projectDescription.js","components/projects/projectName.js","components/projects/projectPage.js","App.js","serviceWorker.js","index.js"],"names":["abortController","abortRequestType","Main","props","react_default","a","createElement","className","children","EditButton","_ref","confirm","Fragment","version","id","xmlns","xmlnsXlink","x","y","viewBox","points","d","NavBar","appConsumer","useContext","AppContext","title","Error","output","useEffect","setError","error","payload","statusCode","message","name","style","textAlign","React","createContext","AppProvider","user","image","alt","src","surname","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","contextObject","setTitle","Provider","value","modules_error","Home","fontSize","fontWeight","UserInfo","config","home","search","scopus_search","projects","papers","menu_list","content","link","MenuButton","x1","y1","x2","y2","Cover","cls","handler","onClick","e","PrintMenu","map","element","index","key","react_router_dom","to","onMouseUp","handleMenuBlur","SideMenu","shown","setShown","firstTime","setFirstTime","clsidemenu","clsbutton","cover","menuButton","tabIndex","userInfo","sideMenu_PrintMenu","timeOutTime","request","_callee","url","options","signal","requestOptions","timer","response","data","timeOutError","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","AbortController","assign","credentials","mode","setTimeout","abort","fetch","sent","clearTimeout","parseResponseData","checkResponseStatus","abrupt","t0","stop","_callee2","queryData","query","_args2","_context2","encodeURIComponent","slice","_callee3","_context3","method","_callee4","bodyData","jsonHeaders","body","_args4","_context4","Headers","append","JSON","stringify","headers","_callee5","_args5","_context5","status","statusText","_callee6","contentType","_context6","get","indexOf","text","formData","blob","json","http","post","delete","put","abortRequest","res","project_id","projectsDao","getProjectsList","getProject","postProject","putProject","deleteProject","LoadIcon","class","CloseButton","ProjectForm","setName","description","setDescription","_createProject","asyncToGenerator","mark","preventDefault","history","push","apply","this","_updateProject","project","alert","projectInputData","submitAction","_x","_x2","visibility","type","setVisibility","closeButton","defaultValue","onChange","target","placeholder","Pagination","start","count","totalResults","path","max_total_number_for_results","queryString","window","location","href","split","newQueryString","arryQuery","i","parameterName","setStartAndCountInUrl","firstPage","lastPage","listPage","paged","Math","floor","totalPage","round","paginationLength","display","margin","join","base","charAt","createQueryStringFromObject","keys","getIndexOfObjectArrayByKeyAndValue","array","DeleteButton","SideOptions","focused","setFocused","onBlur","onMouseDown","optionsButton","padding","border","PrintList","_ref2","maps","projectsList","handleDelete","sideOptions","modules_sideOptions","ProjectsList","setProjectsList","setTotalResults","_useState5","_useState6","setDisplay","_useState7","_useState8","toggleform","setToggleForm","params","parse","createQueryData","_handleDelete","newProjectsList","console","log","filter","even_projs","odd_projs","results","concat","fetchData","loadIcon","projectsList_PrintList","match","pagination","projectForm","paperDao","paper_id","projectPapersDao","getPapersList","getPaper","postPaperIntoProject","putPaper","deletePaper","CheckBox","val","label","isChecked","defaultChecked","RadioBox","SearchButton","PrintScoupusSearchList","papersList","handlePaperSelection","_React$createElement","forms_checkbox","eid","authors","date","lib_default","abstract","lines","ellipsis","moreText","lessText","defineProperty","PrintPapersList","_React$createElement2","SelectArrow","from","attributeType","attributeName","begin","dur","repeatCount","fill","Select","selected","handleFocus","document","getElementById","beginElement","onFocus","selectArrow","borderBottom","borderLeft","borderRight","borderTop","data-value","OrderArrow","up","transform","_","require","orderByOptions","searchByOptions","SearchForm","setPapersList","queryUrl","searchBy","orderBy","sort","scopus","googleScholar","arXiv","year","selectedPapers","handleSelection","parseInt","getAttribute","handelOrder","_handleAddPapers","event","arrayEid","reload","_handleSendSearch","_queryString","handleOnInputChange","formPart","onSubmit","position","searchButton","radiobox","range","resultPart","printList","printPapersList_PrintScoupusSearchList","includes","forms_select","orderArrow","pointerEvents","PapersList","printPapersList_PrintPapersList","ProjectDescription","update","editing","setEditing","width","height","focus","editButton","ProjectName","ProjectPageHead","slider","es","flipKey","flipId","ProjectPage","setProject","setSlider","substrUrl","pathname","substring","updateProject","new_name","new_desc","projectName","projectPage_ProjectPageHead","react_router","exact","render","projectDescription","papers_papersList","searchform","App","basename","appProvider_AppProvider","navBar","sideMenu","main","projects_projectsList","projectPage","Boolean","hostname","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62792669.chunk.js","sourcesContent":["/*this is the file to communicate with backend by fetch request*/\n\n//signal to abort the request\nvar abortController;\n//int to know abort error type\nvar abortRequestType;\n//10seconds for timeout\nvar timeOutTime = 10 * 1000;\n\n//object to export\nconst http = {\n    \"get\": get,\n    \"post\": post,\n    \"delete\": deletes,\n    \"put\": put,\n    \"abortRequest\": abortRequest,\n\n}\n\n\n/**\n * abort all request in progeress by user\n */\nfunction abortRequest() {\n    abortController.abort();\n    abortRequestType = 1;\n}\n\n/**\n * abort all request if timeout\n */\nfunction timeOut() {\n\n    abortController.abort();\n    abortRequestType = 2;\n}\n\n/**\n * create a basic fetch request\n * @param url\n * @param options request config\n * @return {object} response data\n */\nasync function request(url, options = {}) {\n    try {\n\n        //create a new abortController for this request\n        abortController = new AbortController();\n        let signal = abortController.signal;\n        //initialize as 0 for every request\n        abortRequestType = 0;\n\n        let requestOptions = Object.assign(\n            {\n                //enable the  sending of cookie\n                credentials: 'include',\n                \"mode\": 'cors',\n                \"signal\": signal\n            },\n            options\n        );\n\n        //set timeout clock\n        let timer = setTimeout(() => timeOut(), timeOutTime);\n\n        let response = await fetch(url, requestOptions);\n\n        //clear timeoyt clock\n        clearTimeout(timer);\n\n\n        //parse response data\n        let data = await parseResponseData(response);\n        //response error check\n        checkResponseStatus(response,data);\n        return  data;\n\n    }\n    catch (error) {\n\n        //if abort error is caused by timeout\n        if (abortRequestType === 2) {\n            //create a custom error for timeout\n            let timeOutError = new Error(\"Error: Time out to get response from backend\");\n            timeOutError.name = \"timeout\";\n            return  timeOutError;\n        }\n        //if is a abort error  caused by user\n        else if (abortRequestType === 1) {\n            return null;\n        }\n\n        return error;\n\n\n    }\n}\n\n/**\n * get method\n * @param url\n * @param queryData quey string\n * @return {object} response data\n */\nasync function get(url, queryData = \"\") {\n    let query = \"\";\n    if (queryData !== \"\") {\n        query = \"?\";\n        for (let key in queryData) {\n            query += key + \"=\" + encodeURIComponent(queryData[key]) + \"&\";\n        }\n        //delete the last &\n        query = query.slice(0, query.length - 1);\n    }\n    return await request(url + query);\n}\n\n/**\n * deletes method\n * @param url\n */\nasync function deletes(url) {\n    let options = {\n        \"method\": 'DELETE'\n    };\n\n    return await request(url, options);\n}\n\n/**\n * post method\n * @param url\n * @param bodyData\n * @return {object } response data\n */\nasync function post(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'POST',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options);\n}\n\n\n/**\n * put method\n * @param url\n * @param bodyData\n */\nasync function put(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'PUT',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options);\n}\n\n\n/**\n *  * check resposonse status\n * @param response to check\n * @param data data received\n * @throws {Error} if  status code < 200 or status code >= 300\n */\nfunction checkResponseStatus(response, data) {\n\n    if (response.status < 200 || response.status >= 300) {\n        const error = new Error(response.statusText);\n        error.data = response;\n        if(data.payload){\n            error.payload = data.payload;\n        }\n        throw error;\n    }\n\n}\n\n/**\n * parse the response of  http request\n * @param response response object\n * @return {object} data parsed\n */\nasync function parseResponseData(response) {\n    //get response data type\n    const contentType = response.headers.get('Content-Type');\n    let data = null;\n    //parse the data by its type\n    if (contentType != null) {\n        if (contentType.indexOf('text') > -1) {\n            data = await response.text()\n        }\n        if (contentType.indexOf('form') > -1) {\n            data = await response.formData();\n        }\n        if (contentType.indexOf('video') > -1) {\n            data = await response.blob();\n        }\n        if (contentType.indexOf('json') > -1) {\n            data = await response.json();\n        }\n    }\n    else if (response != null) {\n        data = await response.text();\n    }\n    return data;\n}\n\n\nexport default http;","import React from \"react\";\n\n/**\n * compotent main of page\n */\nconst Main = function(props){\n\n        return (\n            <div className=\"main-wrapper\">\n                {props.children}\n            </div>\n        );\n};\n\nexport default Main;","import React from \"react\";\n\n/**\n * component svg edit button\n * based on the 'confirm' flag the icon will change\n */\nconst EditButton = function ({confirm}) {\n    var output = <></>;\n    if(!confirm){//if the user is not editing\n        output = (<svg version=\"1.1\" id=\"edit-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t    viewBox=\"0 0 1000 1000\">\n            <path className=\"st-pencil\" d=\"M224,632.3l-81.6,225.3L367.7,776l0,0L833,310.7c39.4-39.4,39.9-103.3,0.7-142.9c-0.5-0.5-1-1-1.4-1.4\n            c-39.6-39.2-103.6-38.7-142.9,0.7L224,632.3L224,632.3z\"/>\n            <path className=\"st-pencil-border\" d=\"M367.7,776c-24-71.7-71.9-119.6-143.7-143.7\"/>\n            <path className=\"st-pencil\" d=\"M805.7,338c-24-71.7-71.9-119.6-143.7-143.7\"/>\n        </svg>);\n    }else{//if the user is editing\n        output = (\n            <svg version=\"1.1\" id=\"confirm-edit-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t            viewBox=\"0 0 1000 1000\">\n                <polyline className=\"st-confirm\" points=\"918,192.3 389.3,807.7 82,450 \"/>\n            </svg>\n        );\n    }\n    return output;\n};\n\nexport default EditButton;\n","import React, {useContext} from \"react\";\n\nimport {AppContext} from \"src/components/providers/appProvider\";\nimport EditButton from \"src/components/svg/editButton\";\n\n/**\n * this is the head component of page\n * @param props\n * @param \"menu_elements\" contains the list of menu-items\n */\n\n\nconst NavBar = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    \n    return (\n        <div className=\"navigation-wrapper\">\n\n            {/*background of the menu-bar*/}\n            <nav className=\"main-nav\">\n                {appConsumer.title}\n            </nav>\n            {props.children}\n\n        </div>\n    );\n}\n\nexport default NavBar;","import React, {useContext, useEffect} from 'react';\nimport {AppContext} from \"src/components/providers/appProvider\";\n\n\nconst Error = function () {\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    useEffect(() => {//not used yet\n\n        return () => {\n            //delete the error, so app can resume its work\n            appConsumer.setError(null);\n        }\n\n    });\n\n\n    //console.dir(appConsumer.error);\n    let output;\n    //is a error from backend\n    if (appConsumer.error.payload) {\n        output = (\n            <>\n                <p>Error code:</p>\n                <p>{appConsumer.error.payload.statusCode}</p>\n                <p>Error name:</p>\n                <p>{appConsumer.error.payload.error}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.payload.message}</p>\n            </>\n        );\n    }\n\n    //is a error of other type\n    else {\n        output = (\n            <>\n                <p>Error name:</p>\n                <p>{appConsumer.error.name}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.message}</p>\n            </>\n        );\n    }\n\n    output = (\n        <div className=\"error-wrapper\" style={{textAlign: \"center\"}}>\n            {output}\n        </div>\n    );\n\n    return output;\n\n}\n\n\nexport default Error;","import React, {useState, useRef} from 'react';\n\nimport NavBar from 'src/components/navigation/navBar';\nimport Main from 'src/components/main';\nimport Error from 'src/components/modules/error';\n\n//create a context object\nconst AppContext = React.createContext();\n\n/**\n * this is the component that include a context object that it can be access by all its children component\n */\nconst AppProvider = function (props) {\n\n    const user = {\n        image: <img className=\"face\" alt=\"profile\" src=\"https://placekitten.com/100/100\"/>,\n        name: \"Mario\",\n        surname: \"Rossi\"\n    };\n\n    //error\n    const [error, setError] = useState(null);\n\n    //title\n    const [title, setTitle] = useState(<div className=\"nav-elements\"> <h2 className=\"static-title\">HOME</h2> </div>);\n\n    //preparate an object to be insertd into context\n    const contextObject ={\n        user,\n        error,\n        setError,\n        title,\n        setTitle\n    };\n\n\n    //if there isn't error\n    if (!error) {\n\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                {/*mount all components children*/}\n                {props.children}\n\n            </AppContext.Provider>\n        );\n    }\n    //if there is a error\n    else {\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                    <Error/>\n\n            </AppContext.Provider>\n        )\n    }\n\n\n}\n\nexport {AppContext, AppProvider};","import React, {useContext, useEffect} from \"react\";\n\nimport {AppContext} from \"src/components/providers/appProvider\";\n\n/**\n * this is home component\n */\nconst Home = function (props) {\n\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set title when component mounts\n    useEffect(() => {\n        appConsumer.setTitle(<div className=\"nav-elements\"> <h2 className=\"static-title\">HOME</h2> </div>);\n    },[])//run on component mount\n\n\n    return (\n        <>\n            <h1>\n                Systematic Literature Review manager\n            </h1>\n            <h2 style={{fontSize: 22, fontWeight: \"normal\"}}>the system right now allows you to</h2>\n            <ul style={{fontSize: 18, fontWeight: \"lighter\"}}>\n                <li>browse a list of prjects</li>\n                <li>add a new project</li>\n                <li>browse the list of papers on a project</li>\n                <li>search(from scopus) and add papers to a project</li>\n            </ul>\n            <h2 style={{fontSize: 22, fontWeight: \"normal\"}}>notes</h2>\n            <ul style={{fontSize: 18, fontWeight: \"lighter\"}}>\n                <li><i>the scopus search works partially(can't retrieve the description)</i>\n                    <ul><li style={{fontSize: 16}}><i>from Elsevier developer portal : \"The data available depends on your institutional subscriptions, and only when you're making calls from within your institutional network are you considered a subscriber\"</i></li></ul>\n                </li>\n                <li><i>the options don't affect the search, for now</i></li>\n            </ul>\n        </>\n    );\n\n\n\n\n};\n\nexport default Home;","import React, {useContext} from \"react\";\nimport { AppContext } from 'src/components/providers/appProvider'\n\n/*\n* this is the component that visualize user information box\n* */\nconst UserInfo = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return(\n            <div className=\"user\" >\n                {appConsumer.user.image}\n                <div className=\"user-info\">\n                    {appConsumer.user.name}\n                    <br/>\n                    {appConsumer.user.surname}\n                </div>\n            </div>\n    );\n};\n\nexport  default  UserInfo;","/**\n * this is the config file\n */\n\n\nconst config = {\n    \"home\": \"https://crowdai-slr-api-dev.herokuapp.com/\",\n    \"search\": \"search\",\n    \"scopus_search\": \"search-scopus\",\n    \"projects\": \"projects\",\n    \"papers\": \"papers\",\n    \"menu_list\": [\n        {id: 4, content: \"home\", link: \"/\"},\n        {id: 5, content: \"my projects\", link: \"/projects\"},\n        {id: 6, content: \"account\", link: \"#\"}\n    ],\n\n\n\n\n};\n\nexport default config;","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst MenuButton = function (props) {\n\n    return (\n\n        <svg id=\"menu-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n             x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M214,482.1\"/>\n            <line className=\"st-t\" x1=\"172\" y1=\"482.1\" x2=\"172\" y2=\"482.1\"/>\n            <line className=\"st-m\" x1=\"500\" y1=\"482.1\" x2=\"500\" y2=\"482.1\"/>\n            <line className=\"st-b\" x1=\"828\" y1=\"482.1\" x2=\"828\" y2=\"482.1\"/>\n        </svg>\n    );\n};\n\nexport default MenuButton;\n","import React, {useContext} from \"react\";\n\n\n\n/**\n * component for covering the page\n */\nconst Cover = function ({cls, handler}) {\n    //get data from global context\n    return (\n        <div className={\"cover \" + cls} onClick={(e) => {handler(false)}}></div>\n    );\n};\n\nexport default Cover;","import React, {useState, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\n\nimport UserInfo from 'src/components/navigation/userInfo';\nimport config from 'src/config/index';\nimport MenuButton from 'src/components/svg/menuButton';\nimport Cover from 'src/components/modules/cover';\n\n/**\n *this is the side menu component\n */\nconst SideMenu = function (props) {\n\n    //bool to control the visualization of menu\n    const [shown, setShown] = useState(false);\n    const [firstTime, setFirstTime] = useState(true);\n\n\n    //function to open/close the menu\n    function handleToggleMenuButton() {\n        setShown(!shown);\n        setFirstTime(false);\n    }\n\n    //function to close the menu\n    function handleMenuBlur(e) {\n        setShown(false);\n    }\n\n    //change the class of element by menu state\n    var clsidemenu = \"modal side-menu up\";\n    var clsbutton = \"button-wrapper close\";\n\n    if (firstTime) {\n        clsidemenu = \"modal side-menu\"\n    }\n    if (shown) {\n        clsbutton = \"button-wrapper open\"\n        clsidemenu = \"modal side-menu down\"\n    }\n\n    return (\n        <div className=\"menu\">\n            <Cover cls={(shown) ? \"full-screen-transparent\" : \"\"} handler={handleMenuBlur}/>\n            <div className={clsbutton} onClick={handleToggleMenuButton}>\n                <MenuButton/>\n            </div>\n\n            <div className={clsidemenu} tabIndex={-1}>\n\n                {/*user info box*/}\n                <UserInfo/>\n                <PrintMenu handleMenuBlur={handleMenuBlur}/>\n\n            </div>\n        </div>\n    );\n\n};\n\n/**\n *internal component that is used only for print menu items\n */\nconst PrintMenu = function (props) {\n\n    let output = (\n        config.menu_list.map((element, index) => (\n                <div key={index}>\n                    <Link to={element.link} className=\"menu-option\"\n                          onMouseUp={props.handleMenuBlur}>{element.content}</Link>\n                </div>\n            )\n        )\n    );\n    return output;\n\n\n}\n\n\nexport default SideMenu;","import http from 'src/utils/conn'\nimport config from 'src/config/index'\n\n/**\n * dao to get a projects list\n * @param queryData\n * @return {array[objects]}\n */\nasync function getProjectsList(queryData = \"\") {\n    let url = config.home + config.projects\n    let res = await http.get(url, queryData);\n    return res;\n\n\n}\n\n/**\n * dao to get a project\n * @param project_id\n * @return {Object} project requested\n */\nasync function getProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.get(url);\n    return res;\n}\n\n/**\n * dao to post a new project\n * @param bodyData\n * @return {Object} project created\n */\nasync function postProject(bodyData) {\n    let url = config.home + config.projects;\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putProject(project_id, bodyData) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deleteProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.delete(url);\n    return res;\n}\n\n\nconst projectsDao = {\n    \"getProjectsList\": getProjectsList,\n    \"getProject\": getProject,\n    \"postProject\": postProject,\n    \"putProject\": putProject,\n    \"deleteProject\": deleteProject,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectsDao};","import React from \"react\";\n\n/**\n * component svg loading-icon\n */\nconst LoadIcon = function (props) {\n\n    return (\n\n        <svg id=\"loading-icon\" className={props.class} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\n             y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <g>\n                <path id=\"loading-circle1\" d=\"\n                  M 500, 500\n                  m -160, 0\n                  a 160,160 0 1,0 320,0\n                  a 160,160 0 1,0 -320,0\n          \"/>\n                <path id=\"loading-circle2\" d=\"\n                  M 500, 500\n                  m -305, 0\n                  a 305,305 0 1,0 610,0\n                  a 305,305 0 1,0 -610,0\n          \"/>\n            </g>\n        </svg>\n    );\n};\n\nexport default LoadIcon;\n","import React from \"react\";\n\n/**\n * component svg close-btn\n */\nconst CloseButton = function (props) {\n\n    return (\n        <svg id=\"close-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 1000 1000\">\n        <line className=\"ln\" x1=\"134\" y1=\"866\" x2=\"866\" y2=\"134\"/>\n        <line className=\"ln\" x1=\"134\" y1=\"134\" x2=\"866\" y2=\"866\"/>\n        </svg>\n    );\n};\n\nexport default CloseButton;\n","import React, {useEffect, useState, useContext} from \"react\";\nimport {projectsDao} from 'src/dao/projects.dao'\n\nimport CloseButton from 'src/components/svg/closeButton';\n\nimport { AppContext } from 'src/components/providers/appProvider'\n\n/**\n * this is the form for create or edit the project\n * @param props.project  project object if we want to update a old project\n * @param null if we want to create a new project\n */\nfunction ProjectForm(props) {\n\n    //fields values\n    const [name, setName] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    /**\n     * action to create a new project\n      */\n    async function createProject(e) {\n        //disable default action\n        e.preventDefault();\n        //prepare the data object to post\n        let bodyData = {name: name, description:description};\n        //call dao\n        let res = await projectsDao.postProject(bodyData);\n\n        //error checking\n        if(res.message){\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n        props.history.push(\"/projects/\" + res.id);\n    }\n\n    /**\n     * action to update a old project(not used yet)\n     */\n    async function updateProject(e) {\n        //disable default action\n        e.preventDefault();\n        //prepare the data object to post\n        let bodyData = {name: name, description: description};\n        //call dao  with project_id and data object\n        let res = await projectsDao.putProject(props.project.id, bodyData);\n\n        //error checking\n        if(res.message){\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n\n        alert(\"updated correctly\");\n    }\n\n\n    //defalut input values are empty\n    let projectInputData = {name: \"\", description: \"\"};\n    //default action is create a project\n    let submitAction = createProject;\n    //if we want update a old project\n    if (props.project !== undefined) {\n        //get old project data\n        projectInputData.name = props.project.data.name;\n        projectInputData.description = props.project.data.description;\n        //set action as update\n        submitAction = updateProject;\n    }\n\n    return (\n        <>\n        <form className=\"modal add-project\" style={{visibility: (!props.visibility) ? 'hidden' : '' }}>\n            <button type=\"button\" className=\"close-btn\" onClick={(e) => {\n                props.setVisibility(!props.visibility);\n            }}><CloseButton/></button>\n            <br/>\n            <input \n                defaultValue={name}\n                onChange={e => setName(e.target.value)}\n                type=\"text\" \n                placeholder=\"project name\"/>\n            <br/>\n            <br/>\n            <textarea \n                defaultValue={description}\n                onChange={e => setDescription(e.target.value)}\n                type=\"text\" \n                placeholder=\"project description\"/>\n            <br/>\n            <button type=\"submit\" onClick={submitAction} value=\"submit\">Add project</button>\n        </form>\n        </>\n    );\n\n\n}\n\n\nexport default ProjectForm;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport config from 'src/config/index';\n\n/**\n * this is the component for pagination\n * @param start offset of results\n * @param count number of element for page\n * @param totalResults the total number of results\n * @param path the path of current page\n * @return {*}\n * @constructor\n */\n\nconst Pagination = function({start, count, totalResults, path}) {\n\n    //set limit max of start\n    if(totalResults >config.max_total_number_for_results){\n        totalResults= config.max_total_number_for_results;\n    }\n    //prepare the correct link path for pagination\n    path = setStartAndCountInUrl(path);\n\n    let prev = \"\", next = \"\", firstPage = \"\", lastPage = \"\";\n    let listPage = [] ;\n    let separator = \"...\";\n    //number*2 of element in pagination\n    let paginationLength = 4;\n    //the page count start by 1.\n    let paged = Math.floor(start / count) + 1;\n    //get total page number\n    let totalPage = Math.round(totalResults / count);\n\n    //we need the pagination only the totalPage is major than 1\n    if (totalPage > 1) {\n\n        //if it isn't the first page, print the prev-page link\n        if (paged > 1) {\n            prev = (\n                <li>\n                    <Link className=\"prev-page\"\n                          to={path + \"start=\" + (((paged - 1) * count) > 0 ? ((paged - 2) * count) : 0) + \"&count=\" + count}>\n                        {\"<\"}\n                    </Link>\n                </li>\n            );\n        }\n        //if it isn't the last page, print the next-page link\n        if (paged < totalPage) {\n            next = (\n                <li>\n                    <Link className=\"next-page\" to={path + \"start=\" + (paged * count) + \"&count=\" + count}>\n                        {\">\"}\n                    </Link>\n                </li>\n            );\n        }\n\n        //if the first page  isn't include by regular listPage, print the first-page link\n        if (paged > paginationLength + 2) {\n            firstPage = (\n                <>\n                    <li>\n                        <Link className=\"first-page\" to={path + \"start=0&count=\" + count}>\n                            {\"1\"}\n                        </Link>\n                    </li>\n                    <li>\n                        <span>{separator}</span>\n                    </li>\n                </>\n            );\n        }\n\n        //if the last page  isn't include by regular listPage, print the last-page link\n        if (paged < totalPage - (paginationLength + 1)) {\n            lastPage = (\n                <>\n                    <li>\n                        <span>{separator}</span>\n                    </li>\n                    <li>\n                        <Link style={{display: \"inline-block\"}} className=\"last-page\"\n                              to={path + \"start=\" + ((totalPage - 1) * count) + \"&count=\" + count}>\n                            {totalPage}\n                        </Link>\n                    </li>\n                </>\n            );\n        }\n\n        //print the range of page link, the center is current paged\n        for (let i = paged - paginationLength; i <= paged + paginationLength; i++) {\n\n            //print only the i has a valid value\n            if (i > 0 && i <= totalPage) {\n\n                //if i isn't current page, print link\n                if (i !== paged) {\n\n                    listPage.push((\n                            <Link className=\"normal-page\" to={path + \"start=\" + ((i-1) * count) + \"&count=\" + count}>\n                                {i}\n                            </Link>\n                    ));\n                }\n                //if i is current page, print only text\n                else {\n                    listPage.push((\n                            <span className=\"current-page\">{paged}</span>\n                    ));\n                }\n\n            }\n        }\n\n\n    }\n\n    let output = (\n        <ul className=\"pagination\">\n            {prev}\n            {firstPage}\n            {listPage.map((element,index)=><li style={{display: \"inline-block\", margin: 10}} key={index}>{element}</li>)}\n            {lastPage}\n            {next}\n        </ul>\n    );\n    return output;\n};\n\n\n/**\n * internal function to prepare the path link for pagination\n * @param path\n * @return {*}\n */\n\nfunction setStartAndCountInUrl(path){\n\n    let url = window.location.href;\n    //get the queryString from url\n    let queryString = url.split(\"?\")[1];\n    //if it exists\n    if(queryString) {\n        //remove the part after # if it exists\n        queryString = queryString.split(\"#\")[0];\n\n        let newQueryString = \"\";\n        //split queryString in array of string\n        let arryQuery = queryString.split(\"&\");\n        for (let i = 0; i < arryQuery.length; i++) {\n            //check each queryElement\n            let parameterName = arryQuery[i].split(\"=\")[0];\n            //if it isn't start and count\n            if (parameterName !== \"start\" && parameterName !== \"count\") {\n                //add to the new queryString\n                newQueryString += arryQuery[i]+\"&\";\n            }\n        }\n        //create a new path whiteout start and count\n        path = path+\"?\"+newQueryString;\n    }\n    //if path doesn't contain any queryString\n    else {\n        path = path+\"?\";\n    }\n\n\n    return path;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Pagination;","//need to parse query string of url\nimport queryString from 'query-string';\n\n//here are the common support function\n\n\n/**\n * converts the checkboxes object of the search form into parameters for the url\n */\nfunction searchCheckboxesToParams(checkboxes){\n    var params = \"\";\n    Object.keys(checkboxes).forEach(key => {//I iterate over each field of the object\n        if(key !== \"years\"){//if it's not an year\n            if(checkboxes[key]){//if it's a true flag\n                console.log(key)\n                params += \"&\" + key + \"=\" + checkboxes[key];\n            }\n        }else{//if it's a year\n            if(checkboxes.years.length !== 0){//if there are some years selected\n                params += \"&\" + queryString.stringify({\"years\" : checkboxes.years} , {arrayFormat: 'comma'});\n            }\n        }\n      });\n      return params;\n}\n\n/**\n * this is  function to manipolate 2 url string\n * if first string ends with \"/\", removes \"/\".\n * then concate wite second string and return new string\n */\nfunction join(base, path){\n    let newPath;\n    //if the last element is \"/\"\n    if(base.charAt(base.length-1) === '/'){\n        newPath = base.slice(0,-1) + path;\n    }\n    else{\n        newPath =base + path;\n    }\n\n    return newPath;\n\n  }\n\n/**\n *\n *\n * function to create string of query by queryObject\n * @param queryData query object\n * @return {string} query string\n */\nfunction createQueryStringFromObject(queryData){\n\n    let queryString =\"?\";\n    //create a array of keys\n    let keys = Object.keys(queryData);\n    //concatenate the object.property\n    for(let i =0; i< keys.length; i++){\n        queryString += keys[i]+\"=\"+encodeURIComponent(queryData[keys[i]]);\n        //if it isn't the last element, add symbol \"&\"\n        if(i !== (keys.length-1)){\n            queryString += \"&\";\n        }\n    }\n    return queryString;\n\n}\n\n\n/**\n * get element index of a object array by [key, value]\n * @param array to find\n * @param key to find\n * @param value to find\n * @return {number} index of element, -1 if didn't find\n */\nfunction getIndexOfObjectArrayByKeyAndValue(array ,key, value){\n    let index=-1;\n    for(let i=0; i<array.length; i++){\n        if(array[i][key] === value){\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n\n\n\nexport  {\n    searchCheckboxesToParams,\n    join,\n    createQueryStringFromObject,\n    getIndexOfObjectArrayByKeyAndValue,\n\n};","import React from \"react\";\n\n/**\n * component svg options menu button\n */\nconst DeleteButton = function (props) {\n\n    return (\n\n        <svg version=\"1.1\" id=\"options-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t        viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M214,482.1\"/>\n            <line className=\"st-options\" x1=\"500\" y1=\"250\" x2=\"500\" y2=\"250\"/>\n            <line className=\"st-options\" x1=\"500\" y1=\"500\" x2=\"500\" y2=\"500\"/>\n            <line className=\"st-options\" x1=\"500\" y1=\"750\" x2=\"500\" y2=\"750\"/>\n        </svg>\n\n    );\n};\n\nexport default DeleteButton;","import React,{useState} from \"react\";\n\nimport OptionsButton from 'src/components/svg/optionsButton';\n\n/**\n * component side options\n * it needs a class for the styling,\n * an array of options,\n * the function that will handle the click on the option\n * and, if necessary, a target for the handler function\n */\nconst SideOptions = function ({cls, options, handler, target}) {\n\n    //this is used to display or hide the options of the menu\n    const [focused, setFocused] = useState(false)\n\n\n    return (\n        <div className={cls}>\n            <button type=\"button\" \n                    onBlur={(e) => \n                        //if the element is blurred then I hide it\n                        {if(focused){setFocused(false)}}} \n                    onMouseDown={(e) => //onMouseDown fires before onBlur\n                        //immediately after the button is clicked I toggle the menu\n                        {setFocused(!focused)}}>\n                <OptionsButton/>\n            </button>\n            <div style={{fontSize: (focused) ? \"12px\" : \"0px\", padding: (focused) ? \"2px\" : \"0px\", border: (focused) ? \"solid 1px #e8e8e8\" : \"solid 0px #e8e8e8\"}} className=\"options-list\">\n                \n                {options.map((element, index) => \n                    <div key={index} onMouseDown={(e) => handler(target)} className=\"option\">{element}</div>\n                )}\n                \n            </div>\n        </div>\n    );\n}\n\nexport default SideOptions;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\nimport queryString from 'query-string';\n\n\nimport {projectsDao} from 'src/dao/projects.dao';\nimport LoadIcon from 'src/components/svg/loadIcon';\nimport ProjectForm from 'src/components/forms/projectForm';\nimport Pagination from 'src/components/modules/pagination';\nimport {join} from 'src/utils/index';\nimport Cover from 'src/components/modules/cover';\nimport SideOptions from 'src/components/modules/sideOptions';\n\nimport {AppContext} from \"src/components/providers/appProvider\";\n\n/**\n *this component will show a projects list page\n */\n\nconst ProjectsList = function (props) {\n\n\n    //fetch data\n    const [projectsList, setProjectsList] = useState([]);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //bool to control the visualization of input form\n    const [toggleform, setToggleForm] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const queryData = createQueryData(props.location.search);\n\n\n    //set title when component mounts\n    useEffect(() => {\n        appConsumer.setTitle(<div className=\"nav-elements\"> <h2 className=\"static-title\">PROJECTS</h2> </div>);\n    },[]); //run on component mount\n\n    useEffect(() => {\n\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            const res = await projectsDao.getProjectsList(queryData);\n\n            //error checking\n            //if is 404 error\n            if (res.message === \"Not Found\") {\n                setProjectsList([]);\n                setTotalResults(0);\n                //show the page\n                setDisplay(true);\n            }\n            //if is other error\n            else if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                //update state\n\n                //I put even first and then odd ones so I can display 2 columns with left-right flow \n                var even_projs = [];\n                even_projs = res.results.filter(function(element){ if( element.id % 2 ) return element;});\n                var odd_projs = [];\n                odd_projs = res.results.filter(function(element){ if( !(element.id % 2) ) return element;});\n\n                setProjectsList(even_projs.concat(odd_projs));\n                setTotalResults(res.totalResults);\n                //show the page\n                setDisplay(true);\n            }\n        };\n\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectsDao.abortRequest();\n        };\n    }, [queryData.start, queryData.count]); //re-execute when these variables change\n\n\n    //handle to delete project\n    async function handleDelete(id){\n\n        console.log(\"deleting \" + id);\n        //call the dao\n        let res = await projectsDao.deleteProject(id);\n        //error checking\n        //if is other error\n        if (res.message) {\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n        //if res isn't null\n        else if (res !== null) {\n            //create a new array without the project deleted\n            let newProjectsList = projectsList.filter((project)=>project.id !== id);\n            //update project list state\n            setProjectsList(newProjectsList);\n\n            alert(\"DELETED SUCCESSFULLY!\");\n        }\n    }\n\n\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n\n    else {\n\n        output = (\n            <div>\n                <Cover cls={toggleform ? \"full-screen\" : \"\"} handler={setToggleForm}/>\n                {/*print list of projects*/}\n                <PrintList projectsList={projectsList} path={props.match.url} handleDelete={handleDelete}/>\n                {/*set listId and continues value*/}\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults} path={props.match.url}/>\n\n                {/*print the input form to create/update the projects*/}\n                <ProjectForm visibility={toggleform} setVisibility={setToggleForm} history={props.history}/>\n                {/*button to show input form*/}\n                <button className=\"bottom-left-btn\" type=\"button\" value=\"toggle-insert-form\" onClick={(e) => {\n                    setToggleForm(!toggleform);\n                }}>+\n                </button>\n            </div>\n        );\n\n    }\n\n    return output;\n\n\n};\n\n\n/**\n *  internal component only to print the list\n * @param projectsList projects list data\n * @param path current page url\n * @param handleDelete function to delete the project\n * */\nconst PrintList = function ({projectsList, path, handleDelete}) {\n\n    let sideOptions= [\"delete\"];\n\n    let maps;\n    //if list is empty, print a notice message\n    if (projectsList.length === 0) {\n        maps = (\n            <div>there aren't projects</div>\n        );\n    }\n    //if list isn't empty, print list of projects\n    else {\n        maps = (projectsList.map((element, index) =>\n                <div key={element.id} className=\"light-modal project-card\">\n                    <SideOptions options={sideOptions} handler={handleDelete} target={element.id} cls=\"project-card-options\"/>\n                    <Link to={join(path, \"/\" + element.id)}>\n                        <h3>{element.data.name}</h3>\n                        <p>{element.data.description}</p>\n                    </Link>\n                </div>\n        ));\n    }\n\n    let output =  (\n        <div className=\"project-cards-holder\">\n            {maps}\n        </div>\n    );\n\n    return output;\n\n};\n\n/**\n * internal function to prepare a object of queryData\n * @param query\n * @return object of queryData for the fetch\n */\nfunction createQueryData(query){\n\n    //set query params from queryString of url\n    let params = queryString.parse( query);\n    let count = params.count || 10;\n    let start = params.start || 0;\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    let queryData = {start, count};\n    return queryData;\n\n}\n\n\n\n\n\nexport default ProjectsList;","import http from 'src/utils/conn'\nimport config from 'src/config/index'\n\n/**\n * dao to search local papers\n * @param queryData\n * @return {array[objects]}\n */\nasync function search(queryData){\n    let url = config.home+config.search;\n\n        const res = await http.get(url, queryData);\n        return res;\n\n}\n\n\n\n\nconst paperDao = {\n    search,\n    \"abortRequest\" : http.abortRequest\n}\n\n\n\nexport {paperDao};","import http from 'src/utils/conn'\nimport config from 'src/config/index'\n\n/**\n * dao to get a list of paper associated with a project\n * @param queryData\n * @return {array[objects]}\n */\nasync function getPapersList(queryData) {\n    let url = config.home + config.papers\n\n    const res = await http.get(url, queryData);\n    return res;\n\n}\n\n/**\n * dao to get a paper\n * @param paper_id\n * @return {Object} paper requested\n */\nasync function getPaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.get(url);\n}\n\n/**\n * dao to post a new paper\n * @param bodyData\n * @return {Object} project created\n */\nasync function postPaperIntoProject(bodyData) {\n    let url = config.home + config.papers;\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putPaper(paper_id, bodyData) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deletePaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.delete(url);\n}\n\n\nconst projectPapersDao = {\n    \"getPapersList\": getPapersList,\n    \"getPaper\": getPaper,\n    \"postPaperIntoProject\": postPaperIntoProject,\n    \"putPaper\": putPaper,\n    \"deletePaper\": deletePaper,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectPapersDao};","import React from \"react\";\n\nconst CheckBox = ({ val, label, isChecked, handler }) => (\n    <label className=\"checkbox-container\">\n      <input type=\"checkbox\" value={val} name={label} defaultChecked={isChecked} onChange={handler} />\n      <span className=\"checkmark\"></span>\n      <span>{label}</span>\n    </label>\n);\n\nexport default CheckBox;","import React from \"react\";\n\nconst RadioBox = ({ label, name, val, isChecked }) => (\n    <label className=\"radiobox-container\">\n      <input type=\"radio\" value={val} name={name} defaultChecked={isChecked} />\n      <span className=\"radiomark\"></span>\n      <span>{label}</span>\n    </label>\n);\n\nexport default RadioBox;","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst SearchButton = function (props) {\n\n    return (\n        <svg id=\"search-icon\" xmlns=\"http://www.w3.org/2000/svg\"\n             xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M626.9,644.3c-73.5,0-142.6-28.6-194.6-80.6s-80.6-121.1-80.6-194.6s28.6-142.6,80.6-194.6\n                c52-52,121.1-80.6,194.6-80.6c73.5,0,142.6,28.6,194.6,80.6c52,52,80.6,121.1,80.6,194.6s-28.6,142.6-80.6,194.6\n                S700.4,644.3,626.9,644.3z\"/>\n            <line className=\"st1\" x1=\"145.2\" y1=\"850.8\" x2=\"431.7\" y2=\"564.3\"/>\n        </svg>\n    );\n};\n\nexport default SearchButton;\n","import React from \"react\";\nimport ClampLines from 'react-clamp-lines';\nimport {Link} from 'react-router-dom';\n\nimport CheckBox from \"src/components/forms/checkbox\";\n/**\n * prints the papers list of a local search on the fake database\n */\n/*\nconst PrintLocalSearchList = function ({papersList, handlePaperSelection}) {\n\n    let output = papersList.map((element, index) =>\n        <div key={element.id} className=\"paper-card\">\n            <CheckBox val={element.id} label={\"\"} handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.data && element.data.title}</h3></Link>\n            <ClampLines\n                text={element.data && element.data.abstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n};\n*/\n\n/**\n * prints the results of a search on scopus\n */\nconst PrintScoupusSearchList = function ({papersList, handlePaperSelection}) {\n\n\n\n    let output = papersList.map((element, index) =>\n        <div key={index} className=\"paper-card\">\n            <CheckBox val={element.eid} label={\"\"} handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.title}</h3></Link>\n            <div className=\"extra-info\">\n                <p className=\"authors\">{element.authors}</p>\n                <p className=\"eid\">{element.eid}</p>\n                <p className=\"date\">{element.date}</p>\n            </div>\n            <ClampLines\n                text={element.abstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n};\n\n/**\n * prints a list of papers\n */\n\nconst PrintPapersList = function ({papersList}) {\n\n    let output;\n    //if list is empty, print a notice message\n    if (papersList.length === 0) {\n        output = (\n            <div>there are no papers here, you can add new ones by searching</div>\n        );\n    }\n    //if list isn't empty, print list of papers\n    else {\n        output = (\n            papersList.map((element) =>\n                <div key={element.id} className=\"paper-card\">\n                    <Link to={\"#\"}>\n                        <h3>{element.data.title}</h3>\n                    </Link>\n                    <div className=\"extra-info\">\n                        <p className=\"authors\">{element.data.authors}</p>\n                        <p className=\"eid\">{element.data.eid}</p>\n                        <p className=\"date\">{element.data.date}</p>\n                    </div>\n                    <ClampLines\n                        text={element.data.abstract}\n                        lines={4}\n                        ellipsis=\"...\"\n                        moreText=\"Expand\"\n                        lessText=\"Collapse\"\n                        className=\"paragraph\"\n                        moreText=\"more\"\n                        lessText=\"less\"\n                    />\n                </div>\n            )\n        );\n    }\n    return output;\n\n\n};\n\nexport  {PrintPapersList, PrintScoupusSearchList};","import React from \"react\";\n\n/**\n * component svg select arrow\n * 'focused' is a flag used for displaying a different shape\n */\nconst SelectArrow= function ({focused}) {\n    var from=\"\";\n    var to=\"\";\n    //I check if the upper component is focused and then I animate\n    if(focused){\n        from=\"90,295.5 500,704.5 910,295.5 \";\n        to=\"90,704.5 500,295.5 910,704.5 \";;\n    }else{\n        from=\"90,704.5 500,295.5 910,704.5 \";;\n        to=\"90,295.5 500,704.5 910,295.5 \";\n    }\n    return (\n    <svg version=\"1.1\" id=\"arrow-select\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n        viewBox=\"0 0 1000 1000\">\n            <polyline className=\"st-arrow-select\" points={from}>\n            <animate attributeType=\"XML\" id=\"ani-select-arrow\" attributeName=\"points\" from={from} to={to} begin=\"0s\" dur=\"0.2s\" repeatCount=\"1\" fill=\"freeze\" />\n            </polyline>\n        </svg>\n    );\n};\n\nexport default SelectArrow;\n\n","import React, {useState} from \"react\";\nimport SelectArrow from 'src/components/svg/selectArrow';\n\n\n/**\n * this component acts as an html <select>\n * it needs an array of options, the index of the selected one and the hadler to change the status of the upper component calling this one\n */\nconst Select = ({ options, selected, handler }) => {\n    \n    //this is useful for the animation\n    const [focused, setFocused] = useState(false);\n\n\n\n    function handleFocus(e){\n        //handle arrow animation and focus of menu\n        document.getElementById(\"ani-select-arrow\").beginElement();//trigger svg animation\n        setFocused(!focused);\n    }\n\n    var output = (\n        <div className=\"custom-select\">\n            <div className=\"selected\" tabIndex={-2} onBlur={handleFocus} onFocus={handleFocus}>{options[selected].label} <div className=\"arrow\"><SelectArrow focused={focused}/></div></div>\n            <div className=\"options-holder\" style={{fontSize: (!focused) ? '0px' : '15px', borderBottom: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderLeft: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderRight: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderTop:\"none\"}}>\n                {options.map((element, index) => (\n                <div key={index} data-value={index} className=\"option\" style={{padding: (!focused) ? '0px' : '2px' }} onMouseDown={handler}>\n                    {element.label}\n                </div>))}\n            </div>\n        </div>\n    );\n    return output;\n}\n\nexport default Select;","import React, {useEffect} from \"react\";\n\n/**\n * component svg order arrow button\n@param {string} up [ASC or DESC]\n */\nconst OrderArrow= function ({up}) {\n    var from=\"\";\n    var to=\"\";\n\n    //I check where the arrow should point to(up or down) checking the 'up' flag passed by the parent component\n    if(up ===\"ASC\"){\n        from=\"371.7,293 500,165 628.3,293 \";\n        to=\"371.7,491.9 500,619.9 628.3,491.9 \";\n    }else{\n        from=\"371.7,491.9 500,619.9 628.3,491.9 \";\n        to=\"371.7,293 500,165 628.3,293 \";\n    }\n\n    return (\n        <svg version=\"1.1\" id=\"order-arrow\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n        viewBox=\"0 0 1000 1000\" >\n            <polyline className=\"st-order-arrow-head\" points=\"371.7,491.9 500,619.9 628.3,491.9 \" transform=\"matrix(1.5303008,0,0,1.5303008,-279.47582,-105.57059)\">\n                <animate attributeType=\"XML\" id=\"ani-order-arrow\" attributeName=\"points\" from={from} to={to} begin=\"0s\" dur=\"0.2s\" repeatCount=\"1\" fill=\"freeze\" />\n            </polyline>\n            <line className=\"st-order-arrow\" x1=\"485.67453\" y1=\"145.09268\" x2=\"485.67453\" y2=\"827.75989\"/>\n        </svg>\n    );\n};\n\nexport default OrderArrow;","import React, {useState, useEffect, useContext, useRef} from \"react\";\nimport {Link} from 'react-router-dom'\nimport ClampLines from 'react-clamp-lines';\nimport queryString from \"query-string\";\n\n\nimport {paperDao} from 'src/dao/paper.dao';\nimport {projectPapersDao} from 'src/dao/projectPapers.dao'\n\nimport CheckBox from \"src/components/forms/checkbox\";\nimport RadioBox from \"src/components/forms/radiobox\";\nimport LoadIcon from 'src/components/svg/loadIcon';\nimport SearchButton from 'src/components/svg/searchButton';\nimport {PrintScoupusSearchList} from 'src/components/papers/printPapersList';\nimport Select from 'src/components/forms/select';\nimport OrderArrow from 'src/components/svg/orderArrow';\nimport Pagination from \"src/components/modules/pagination\";\n\nimport {searchCheckboxesToParams, join, createQueryStringFromObject,getIndexOfObjectArrayByKeyAndValue} from 'src/utils/index';\n\nimport {AppContext} from 'src/components/providers/appProvider'\n\n// Load the lodash build\nvar _ = require('lodash');\n\n//order options\nconst orderByOptions = [\n    { value: 'title', label: 'Title' },\n    { value: 'date', label: 'Date' }\n  ];\n\n//search by  options\nconst searchByOptions = [\"all\", \"author\", \"content\"];\n\n//year options\nconst startYear = 2017;\nconst endYear = 2020;\n\n/**\n * this is component form to search for the paper in project page\n * */\n\nconst SearchForm = function ({project_id, location, match, history}) {\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(true);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n\n    //set query params from url\n    let queryData = createQueryData(location.search);\n    console.log(queryData);\n\n    //selected list of papers\n    let selectedPapers = [];\n\n\n    useEffect(() => {\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //hide the page\n\n            //if there is queryString from URL\n            if (queryData.query !== \"\") {\n\n                setDisplay(false);\n\n                //always call the dao to search on scopus\n                let res = await paperDao.search(queryData);\n\n                //error checking\n                //if is 404 error\n                if (res && res.message === \"Not Found\") {\n                    setPapersList([]);\n                    setTotalResults(0);\n                    //show the page\n                    setDisplay(true);\n                }\n                //if is other error\n                else if (res && res.message) {\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }\n                //if res isn't null\n                else if (res !== null) {\n                    //update state\n                    setPapersList(res.results);\n                    setTotalResults(res.totalResults);\n                    //show the page\n                    setDisplay(true);\n                }\n            }\n\n\n        };\n\n        fetchData();\n\n    }, [project_id, queryData.query, queryData.orderBy, queryData.searchBy, queryData.sort, queryData.year, queryData.start, queryData.count,  queryData.scopus, queryData.googleScholar, queryData.arXiv]);  //re-execute when these variables change\n\n\n    //handler for sort selection\n    function handleSelection(e){\n        //get index\n        let index = parseInt(e.target.getAttribute('data-value'));\n        //get value by index\n        queryData.orderBy=orderByOptions[index].value;\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n\n    }\n\n    //handler for order selection(ASC|DESC)\n    function handelOrder(e){\n        //trigger svg animation\n        document.getElementById(\"ani-order-arrow\").beginElement();\n\n        if(queryData.sort === \"ASC\"){\n            queryData.sort = \"DESC\";\n        }\n        else{\n            queryData.sort = \"ASC\";\n        }\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n\n    /*function to insert and remove the paper id from selected list*/\n    function handlePaperSelection(event) {\n        let id = event.target.value;\n        //if id is not included in the list yet\n        if (!selectedPapers.includes(id)) {\n            //insert into array\n            selectedPapers.push(id);\n\n        }\n        //if id already exists in the list\n        else {\n            //remove the  target paper id\n            selectedPapers = selectedPapers.filter(function (value) {\n                return value !== id;\n            });\n        }\n    }\n\n    /*function to add the post in the project*/\n    async function handleAddPapers(event) {\n\n        event.preventDefault();\n\n        //console.log(selectedPapers);\n        //for to insert papers into DB\n        \n        //call dao\n        let res = await projectPapersDao.postPaperIntoProject({\n            arrayEid: selectedPapers, project_id: project_id\n        });\n        //if there is the error\n        if (res.message) {\n            //pass error object to global context\n            appConsumer.setError(res);\n            return null;\n        }\n\n        alert(\"insert completed\");\n        window.location.reload();\n    }\n\n\n    /*function to send the query*/\n    async function handleSendSearch(event) {\n\n        event.preventDefault();\n        //if query input is empty\n        if (queryData.query === \"\") {\n            alert(\"search string is empty\")\n        }\n        else {\n\n            //update url\n            let queryString = createQueryStringFromObject(queryData);\n            //launch to search\n            history.push(queryString);\n\n        }\n\n    }\n\n    /**\n     *synchronizes the value between queryData and input form\n     */\n    function handleOnInputChange(event){\n\n        switch (event.target.name) {\n            case \"query\":\n                queryData.query=event.target.value;\n                break;\n            case \"Scopus\":\n                //switch between true and false\n                if(queryData.scopus ===\"false\"){\n                    queryData.scopus = \"true\";\n                }\n                else{\n                    queryData.scopus = \"false\";\n                }\n                break;\n            case \"Google Scholar\":\n                //switch between true and false\n                if(queryData.googleScholar ===\"false\"){\n                    queryData.googleScholar = \"true\";\n                }\n                else{\n                    queryData.googleScholar = \"false\";\n                }\n                break;\n            case \"arXiv\":\n                //switch between true and false\n                if(queryData.arXiv ===\"false\"){\n                    queryData.arXiv = \"true\";\n                }\n                else{\n                    queryData.arXiv = \"false\";\n                }\n                break;\n            case \"searchBy\":\n                queryData.searchBy=event.target.value;\n                break;\n            case \"year\":\n                //if value is \"all\", deletes the year property\n                if(event.target.value===\"all\"){\n                    delete queryData.year;\n                }\n                //else get year value\n                else{\n                    queryData.year=event.target.value;\n                }\n                break;\n        }\n\n\n    }\n\n    /*\n     #######################################\n     need to  create a new child component for the part of <form>, when we have more information on search options\n     ######################################\n     */\n    let formPart = (//creare un componente a part\n        <>{}\n            <form className={(queryData.query === \"\") ? 'search-form' : 'search-form small'}\n                  onSubmit={handleSendSearch}>\n                {/*search form*/}\n                <div style={{position: 'relative'}}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"search\"\n                        name=\"query\"\n                        defaultValue={queryData.query}\n                        onChange={handleOnInputChange}\n                    />\n                    <button type=\"submit\" value=\"Submit\">\n                        <SearchButton/>\n                    </button>\n                </div>\n\n                <div className=\"option-holder\">\n                    <label>Source:</label><br/>\n\n                    <div className=\"checkboxes-holder\">\n                        <CheckBox label=\"Scopus\" val=\"\" isChecked={queryData.scopus===\"true\" } handler={handleOnInputChange}/>\n                        <CheckBox label=\"Google Scholar\" val=\"\" isChecked={queryData.googleScholar ===\"true\"} handler={handleOnInputChange}/>\n                        <CheckBox label=\"arXiv\" val=\"\" isChecked={queryData.arXiv ===\"true\"} handler={handleOnInputChange}/>\n                    </div>\n\n                    <label>Search by:</label><br/>\n\n                    <div className=\"checkboxes-holder\" onChange={handleOnInputChange}>\n                        <RadioBox label={searchByOptions[0]} name =\"searchBy\" val={searchByOptions[0]} isChecked={queryData.searchBy===searchByOptions[0]} />\n                        <RadioBox label={searchByOptions[1]} name =\"searchBy\" val={searchByOptions[1]} isChecked={queryData.searchBy===searchByOptions[1]} />\n                        <RadioBox label={searchByOptions[2]} name =\"searchBy\"  val={searchByOptions[2]} isChecked={queryData.searchBy===searchByOptions[2]} />\n                    </div>\n\n                    <label>Year:</label><br/>\n                    <div className=\"checkboxes-holder\" onChange={handleOnInputChange}>\n                        <RadioBox label={\"all\"} name =\"year\" val={\"all\"} isChecked={queryData.year===\"all\"} />\n                        {\n                            _.range(startYear,endYear).map((year, index)=>\n                                <RadioBox key={index} label={year} name =\"year\" val={year} isChecked={parseInt(queryData.year)===year} />\n                            )\n                        }\n                    </div>\n                </div>\n\n            </form>\n        </>);\n\n\n    let resultPart=\"\";\n\n    //if the search results list is empty\n    if (display === true && papersList.length === 0 && queryData.query !== \"\") {\n        //the class is used only to workaround a small bug that display not found just as the search start before the loading icon\n        resultPart = (\n            <div className=\"not-found\"> not found :( </div> \n        );\n    }\n    else if(papersList.length > 0 && queryData.query !== \"\"){\n\n\n        let printList = (<PrintScoupusSearchList papersList={papersList} handlePaperSelection={handlePaperSelection}/>);\n\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                <div className=\"order\">\n                        <label>sort by:</label>\n                        <Select options={orderByOptions} selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\",queryData.orderBy)} handler={handleSelection}/>\n                        <button type=\"button\" onClick={handelOrder}><OrderArrow up={(queryData.sort)}/></button>\n                </div>\n                {printList}\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults} path={match.url}/>\n                <button className=\"bottom-left-btn\" type=\"submit\" value=\"Submit\">\n                    +\n                </button>\n            </div>\n        );\n    }\n\n    //if is loading\n    if (display === false) {\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                <div className=\"order\" style={{pointerEvents: \"none\"}}>{/* this way the user cannot sort while loading the results */}\n                        <label>sort by:</label>\n                        <Select options={orderByOptions} selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\",queryData.orderBy)} handler={handleSelection}/>\n                        <button type=\"button\" onClick={handelOrder}><OrderArrow up={(queryData.sort)}/></button>\n                </div>\n                <div className=\"search-loading-holder\">\n                    <LoadIcon class={\"small\"}/>\n                </div>\n            </div>);\n    }\n\n    let output = (\n        <>\n            {formPart}\n            <form className=\"search-results\" onSubmit={handleAddPapers}>\n                {resultPart}\n            </form>\n        </>\n    );\n\n    return output;\n};\n\n\n/**\n * internal function to prepare a object of queryData\n * @param queryUrl\n * @return object of queryData for the fetch\n */\nfunction createQueryData(queryUrl){\n\n\n\n    //set query params from queryString of url\n    let params = queryString.parse( queryUrl);\n    let query = params.query || \"\";\n\n    let searchBy = params.searchBy || \"all\";\n    let orderBy = params.orderBy || \"title\";\n    let sort = params.sort || \"ASC\";\n    let start = params.start || 0;\n    let count = params.count || 10;\n\n    let scopus = params.scopus || \"false\";\n    let googleScholar = params.googleScholar|| \"false\";\n    let arXiv = params.arXiv|| \"false\";\n\n    let year = params.year || \"all\";\n\n    let queryData = {query, searchBy,orderBy, sort, scopus ,googleScholar,arXiv, start, count };\n    //set year property only when year value is not \"all\"\n    if(year !== \"all\"){\n        queryData.year = year;\n    }\n\n\n    return queryData;\n\n}\n\n\nexport default SearchForm;","import React, {useState, useEffect, useContext} from \"react\";\nimport queryString from \"query-string\";\n\nimport {projectPapersDao} from 'src/dao/projectPapers.dao';\n\nimport LoadIcon from 'src/components/svg/loadIcon';\nimport {PrintPapersList} from 'src/components/papers/printPapersList';\nimport Select from 'src/components/forms/select';\nimport OrderArrow from 'src/components/svg/orderArrow';\nimport Pagination from \"src/components/modules/pagination\";\nimport {createQueryStringFromObject, getIndexOfObjectArrayByKeyAndValue} from 'src/utils/index';\n\nimport {AppContext} from 'src/components/providers/appProvider'\n\n\n\n\n//order options\nconst orderByOptions = [\n    { value: 'eid', label: 'EID' },\n    { value: 'title', label: 'Title' },\n    { value: 'authors', label: 'Authors' }\n  ];\n\n/**\n * the local component that shows the papers list of a project\n */\nconst PapersList = ({project_id, location, match, history}) => {\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const queryData = createQueryData(project_id, location.search);\n\n\n    useEffect(() => {\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            let res = await projectPapersDao.getPapersList(queryData);\n\n            //error checking\n            //if is 404 error\n            if (res && res.message === \"Not Found\") {\n                setPapersList([]);\n                setTotalResults(0);\n                //show the page\n                setDisplay(true);\n            }\n            //if is other error\n            else if (res && res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n\n                //update state\n                setPapersList(res.results);\n                setTotalResults(res.totalResults);\n                //show the page\n                setDisplay(true);\n            }\n\n        };\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectPapersDao.abortRequest();\n        };\n    }, [queryData.start, queryData.count, queryData.sort, queryData.orderBy]); //re-execute when these variables change\n\n\n    //handler for sort selection\n    function handleSelection(e){\n        let index = parseInt(e.target.getAttribute('data-value'));\n        queryData.orderBy=orderByOptions[index].value;\n\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n    //handler for order selection(ASC|DESC)\n    function handelOrder(e){\n        //trigger svg animation\n        document.getElementById(\"ani-order-arrow\").beginElement();\n        if(queryData.sort === \"ASC\"){\n            queryData.sort = \"DESC\";\n        }\n        else{\n            queryData.sort = \"ASC\";\n        }\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print loading image\n        output = (\n            <div className=\"paper-card-holder\">\n                <div className=\"order\" style={{pointerEvents: \"none\"}}>{/* this way the user cannot sort while loading the results */}\n                    <label>sort by:</label>\n                    <Select options={orderByOptions} selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\",queryData.orderBy)} handler={handleSelection}/>\n                    <button type=\"button\" onClick={handelOrder}><OrderArrow up={(queryData.sort)}/></button>\n                </div>\n                <LoadIcon class={\"small\"}/>\n            </div> );\n    }\n    else {\n\n        output = (\n            <div className=\"paper-card-holder\">\n                <div className=\"order\">\n                    <label>sort by:</label>\n                    <Select options={orderByOptions} selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\",queryData.orderBy)} handler={handleSelection}/>\n                    <button type=\"button\" onClick={handelOrder}><OrderArrow up={(queryData.sort)}/></button>\n                </div>\n                <PrintPapersList papersList={papersList}/>\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults} path={match.url}/>\n            </div>\n        );\n    }\n\n    output = (\n        <div className=\"papers-list\">\n            {output}\n        </div>\n    );\n\n    return output;\n\n};\n\n\n\n/**\n * internal function to prepare a object of queryData\n * @param project_id\n * @param query\n * @return object of queryData for the fetch\n */\nfunction createQueryData(project_id, query){\n\n    //set query params from queryString of url\n    let params = queryString.parse( query);\n    let count = params.count || 10;\n    let start = params.start || 0;\n    let orderBy = params.orderBy || \"eid\";\n    let sort = params.sort || \"ASC\";\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    let queryData = {project_id, orderBy, sort, start, count };\n    return queryData;\n\n}\n\n\n\nexport default PapersList;","import React, {useState} from \"react\";\n\nimport {AppContext} from \"src/components/providers/appProvider\";\nimport EditButton from \"src/components/svg/editButton\";\n\n/**\n * this is the description component for the project page\n */\n\n\nconst ProjectDescription = function({description, update}){\n\n\n    //this is used as a toggle for checking if the user is trying to edit the name of the project\n    const [editing, setEditing] = useState(false);\n\n    //handles the click on the edit/confirm button\n    function handleEditRequest(e){\n        console.log(\"CLICK\");\n        if(!editing){//if the user was not editing I allow him to edit\n            setTimeout(//I wait for the button event to fire before blurring out the textarea\n                function(){\n                    document.getElementById(\"edit-project-description-input\").focus();\n                },100);\n            \n            setEditing(true);\n            console.log(editing)\n        }else{//if the user was editing I submit its changes\n            update();\n        }\n    }\n\n\n    return (\n        <div className={(!editing) ? \"project-description hidden-form-description\" : \"project-description\"}>\n            <h2>description:</h2>\n            <p style={{fontSize: (editing) ? \"0px\" : \"15px\"}}> {description}</p>\n            <form className=\"edit-project-description\">\n                    <textarea id=\"edit-project-description-input\"  defaultValue={description} style={{width: (editing) ? \"100%\" : \"0%\", padding: (editing) ? \"\" : \"0px\", height:(editing) ? \"\" : \"0px\"}}\n                    onBlur={(e) => {\n                                    console.log(\"blurring\");\n                                    setEditing(false);\n                                }}\n                    />\n                    <button className=\"edit-button\" onMouseDown={handleEditRequest} type=\"button\">\n                        <EditButton confirm={editing}/>\n                    </button>\n            </form>\n        </div>\n    );\n}\n\nexport default ProjectDescription;","import React, {useContext,useState,useEffect} from \"react\";\n\nimport EditButton from \"src/components/svg/editButton\";\n\n/**\n * this is the head component of page\n * @param \"menu_elements\" contains the list of menu-items\n */\n\n\nconst ProjectName = function({name, update}){\n\n    //this is used as a toggle for checking if the user is trying to edit the name of the project\n    const [editing, setEditing] = useState(false);\n\n    //checks if there's an edit request\n    function handleEditRequest(e){\n        if(!editing){//if the user is not editing the name yet(the check is useful because handleEditRequest and handleConfirm fire at the same time)\n            document.getElementById(\"edit-project-name-input\").focus();\n            setEditing(!editing);\n        }\n    }\n\n    //checks if the user wants to confirm the change\n    function handleConfirm(e){\n        if(editing){//if the user was editing I confirm its request and call the api(the check is useful because handleEditRequest and handleConfirm fire at the same time)\n            update();\n            setEditing(!editing);\n        }\n    }\n\n    return(\n        <div className={(editing) ? \"nav-elements\" : \"nav-elements hidden-form\"}> <h2 style={{fontSize: (editing) ? \"0px\" : \"21px\"}}>{name}</h2> \n            {/*clicking on the div containing the title will allow the user to access the form for editing the project name*/}\n            <form className=\"edit-project-name\"  onClick={handleEditRequest} onSubmit={(e) => {e.preventDefault()}}>\n                <input type=\"text\" id=\"edit-project-name-input\" defaultValue={name} style={{width: (editing) ? \"\" : \"0px\", padding: (editing) ? \"\" : \"0px\"}}\n                    onBlur={(e) => {setEditing(false)}}\n                />\n                <button className=\"edit-button\" onMouseDown={handleConfirm} type=\"button\"><EditButton confirm={editing}/></button>\n                {/*clicking on the button will confirm the new name*/}\n            </form>\n        </div>\n    );\n}\n\nexport default ProjectName;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Route, Link} from 'react-router-dom';\nimport {Flipper, Flipped} from 'react-flip-toolkit';\n\nimport SearchForm from 'src/components/forms/searchform';\nimport PapersList from 'src/components/papers/papersList';\nimport {projectsDao} from 'src/dao/projects.dao';\nimport LoadIcon from 'src/components/svg/loadIcon';\nimport ProjectDescription from 'src/components/projects/projectDescription';\nimport ProjectName from 'src/components/projects/projectName';\nimport {join} from 'src/utils/index';\n\nimport {AppContext} from 'src/components/providers/appProvider'\n\n\n/**\n *this component will show a projects page\n */\nconst ProjectPage = (props) => {\n\n    //project object of page\n    const [project, setProject] = useState({data: {name: \"loading...\"}});\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n    //bool for animation\n    const [slider, setSlider] = useState(true);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    const project_id = props.match.params.id;\n\n    const substrUrl = window.location.pathname.substring(window.location.pathname.length - 7, window.location.pathname.length);\n\n    //set the project title\n    useEffect(() => {\n        if(project.data.name === \"loading...\"){\n            appConsumer.setTitle(<div className=\"nav-elements\"> <h2 className=\"static-title\">{project.data.name}</h2> </div>);//I set the page title\n        }else{\n            appConsumer.setTitle(<ProjectName name={project.data.name} update={updateProject}/>);\n        }\n    \n    }, [project]);\n\n    //set animation effects on menu by parsing the url\n    useEffect(() => {\n        if (substrUrl === '/search' || substrUrl === 'search/') {\n            setSlider(false);\n        }\n        else {\n            setSlider(true);\n        }\n    }, [substrUrl]);\n\n\n    useEffect(() => {\n\n        setDisplay(false);\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //call the dao\n            let res = await projectsDao.getProject(project_id);\n\n            //error checking\n            //if is other error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                //update state\n                setProject(res);\n                //show the page\n                setDisplay(true);\n            }\n        };\n        fetchData();\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectsDao.abortRequest();\n        };\n    }, [project_id]); //re-execute when these variables change\n    \n\n    //function for updating the description and name\n    async function updateProject(){\n\n        let new_name = document.getElementById(\"edit-project-name-input\").value;\n        let new_desc = document.getElementById(\"edit-project-description-input\").value;\n\n\n        //if the new name o description are difference from the old name o description\n        if(new_name !== project.data.name || new_desc !== project.data.description){\n\n            //call the dao\n            let res = await projectsDao.putProject(project_id, {name: new_name, description : new_desc});\n\n            //error checking\n            //if is other error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                console.log(\"UPDATED SUCCESSFULLY!\");\n                window.location.reload();\n            }\n\n\n        }\n    }\n\n\n    let output;\n\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n    else {\n        output = (\n            <div className=\"project-wrapper\">\n                <ProjectPageHead project={project} match={props.match} slider={slider}/>\n\n                {/*route the papers list*/}\n                <Route exact  path={props.match.url} render={() =>\n                    <>\n                        <ProjectDescription description={project.data.description} update={updateProject}/>\n                        <PapersList project_id={project_id} location={props.location} match={props.match} history={props.history}/>\n                    </>\n                }/>\n\n                {/*route the form of search*/}\n                <Route exact path={props.match.url + \"/search\"} render={(props) =>\n                    <SearchForm project_id={project_id} {...props} />\n                }/>\n\n            </div>\n        );\n    }\n\n    return output;\n};\n\n/**\n * this is the local component to print head of project page\n */\nconst ProjectPageHead = function ({project, match, slider}) {\n    let output = (\n        <>\n            <div className=\"project-nav-link-wrapper\">\n                <div className=\"nav-link\">\n                    <Link to={match.url}>papers</Link>\n                </div>\n                <div className=\"nav-link\">\n                    <Link to={join(match.url, \"/search\")}>search</Link>\n                </div>\n                <Flipper flipKey={slider}>\n                    <Flipped flipId=\"underline\">\n                        <div className={slider ? \"underline underline-to-left\" : \"underline underline-to-right\"}/>\n                    </Flipped>\n                </Flipper>\n            </div>\n        </>\n    );\n    return output;\n\n};\n\n\nexport default ProjectPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\n\n\nimport Main from 'src/components/main';\nimport Home from 'src/components/home';\n\nimport NavBar from 'src/components/navigation/navBar';\nimport SideMenu from 'src/components/navigation/sideMenu';\n\nimport ProjectsList from 'src/components/projects/projectsList';\nimport ProjectPage from 'src/components/projects/projectPage';\n\n\nimport  {AppProvider} from 'src/components/providers/appProvider';\n\n\n/**\n *this is the start point of application\n */\n\nconst App = function(props) {\n\n\n        return (\n            <Router basename={\"slr-web/\"}>\n                <div className=\"app\">\n\n                    {/*mount a root context object*/}\n                    <AppProvider>\n\n                        <NavBar>\n                            {/*component menu*/}\n                            <SideMenu/>\n                        </NavBar>\n                        <Main>\n                            <Switch>\n                                <Route exact path=\"/\" render={() => <Home/> }/>\n                                <Route exact path=\"/projects\" render={(props) => <ProjectsList {...props} />}/>\n                                <Route path=\"/projects/:id\" render={(props) => <ProjectPage {...props} />}/>\n                                <Route render={(props) => <div>404</div>}/>\n                            </Switch>\n\n                        </Main>\n\n                    </AppProvider>\n                </div>\n            </Router>\n        );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'src/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}