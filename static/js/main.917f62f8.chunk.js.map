{"version":3,"sources":["utils/conn.js","components/main.js","components/home.js","components/navigation/navBar.js","components/modules/error.js","components/providers/appProvider.js","components/navigation/userInfo.js","config/index.js","components/svg/menuButton.js","components/navigation/sideMenu.js","dao/projects.dao.js","components/svg/loadIcon.js","components/forms/projectForm.js","utils/index.js","components/modules/pagination.js","components/projects/projectsList.js","components/forms/checkbox.js","dao/paper.dao.js","dao/projectPapers.dao.js","components/svg/searchButton.js","components/forms/searchform.js","components/projects/papersList.js","components/projects/projectPage.js","App.js","serviceWorker.js","index.js"],"names":["abortController","abortRequestType","Main","props","react_default","a","createElement","className","children","Home","NavBar","Error","output","appConsumer","useContext","AppContext","useEffect","setError","error","payload","Fragment","statusCode","message","name","style","textAlign","React","createContext","AppProvider","user","image","alt","src","surname","_useState","useState","_useState2","Object","slicedToArray","contextObject","Provider","value","modules_error","UserInfo","config","home","search","scopus_search","projects","papers","menu_list","id","content","link","MenuButton","xmlns","xmlnsXlink","x","y","viewBox","d","x1","y1","x2","y2","PrintMenu","map","element","index","key","react_router_dom","to","onMouseUp","handleMenuBlur","SideMenu","shown","setShown","_useState3","_useState4","firstTime","setFirstTime","clsidemenu","clsbutton","onClick","menuButton","tabIndex","userInfo","sideMenu_PrintMenu","timeOutTime","request","_callee","url","options","signal","requestOptions","timer","response","data","timeOutError","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","AbortController","assign","credentials","mode","setTimeout","abort","fetch","sent","clearTimeout","parseResponseData","checkResponseStatus","abrupt","t0","stop","_callee2","queryData","query","_args2","_context2","encodeURIComponent","slice","_callee3","_context3","method","_callee4","bodyData","jsonHeaders","body","_args4","_context4","Headers","append","JSON","stringify","headers","_callee5","_args5","_context5","status","statusText","_callee6","contentType","_context6","get","indexOf","text","formData","blob","json","http","post","delete","put","abortRequest","res","project_id","projectsDao","getProjectsList","getProject","postProject","putProject","deleteProject","LoadIcon","ProjectForm","projectName","useRef","projectDescription","_createProject","asyncToGenerator","mark","e","preventDefault","current","description","alert","apply","this","_updateProject","project","projectInputData","submitAction","_x","_x2","visibility","type","setVisibility","ref","defaultValue","join","base","path","charAt","Pagination","_ref","before","after","pagination","prevLink","nextLink","hasbefore","continues","PrintList","_ref2","maps","projectsList","ProjectsList","setProjectsList","initialPaginationState","setPagination","_useState5","_useState6","display","setDisplay","_useState7","_useState8","toggleform","setToggleForm","params","queryString","parse","location","pagesize","results","fetchData","loadIcon","firstId","lastId","projectsList_PrintList","match","modules_pagination","projectForm","CheckBox","val","label","isChecked","handler","defaultChecked","onChange","paperDao","scopusSearch","paper_id","console","log","projectPapersDao","getPapersList","getPaper","postPaperIntoProject","putPaper","deletePaper","SearchButton","PrintSearchList","_ref3","papersList","handlePaperSelection","_React$createElement","forms_checkbox","Title","lib_default","Abstract","lines","ellipsis","moreText","lessText","defineProperty","PrintScoupusSearchList","_ref4","_React$createElement2","SearchForm","history","setPapersList","scopus","option2","option3","checkboxes","setCheckboxes","selectedPapers","setSelectedPapers","inputToSearch","setInputToSearch","_useState9","_useState10","_useState11","_useState12","handleCheckboxChange","newState","objectSpread","target","event","includes","array","filter","toConsumableArray","push","_handleAddPapers","i","_handleSendSearch","queryParams","formPart","onSubmit","position","placeholder","searchButton","resultPart","paginationUrl","window","href","existBefore","lastIndexOf","existOfAfter","printList","searchform_PrintSearchList","searchform_PrintScoupusSearchList","PapersList","papersList_PrintList","ProjectPageHead","slider","toUpperCase","es","flipKey","flipId","ProjectPage","setProject","setSlider","substrUrl","pathname","substring","projectPage_ProjectPageHead","react_router","exact","render","projects_papersList","searchform","App","appProvider_AppProvider","navBar","sideMenu","main","projects_projectsList","projectPage","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.917f62f8.chunk.js","sourcesContent":["/*this is the file to communicate with backend by fetch request*/\n\n//signal to abort the request\nvar abortController;\n//int to know abort error type\nvar abortRequestType;\n//10seconds for timeout\nvar timeOutTime = 10 * 1000;\n\n//object to export\nconst http = {\n    \"get\": get,\n    \"post\": post,\n    \"delete\": deletes,\n    \"put\": put,\n    \"abortRequest\": abortRequest,\n\n}\n\n\n/**\n * abort all request in progeress by user\n */\nfunction abortRequest() {\n    abortController.abort();\n    abortRequestType = 1;\n}\n\n/**\n * abort all request if timeout\n */\nfunction timeOut() {\n\n    abortController.abort();\n    abortRequestType = 2;\n}\n\n/**\n * create a basic fetch request\n * @param url\n * @param options request config\n * @return {object} response data\n */\nasync function request(url, options = {}) {\n    try {\n\n        //create a new abortController for this request\n        abortController = new AbortController();\n        let signal = abortController.signal;\n        //initialize as 0 for every request\n        abortRequestType = 0;\n\n        let requestOptions = Object.assign(\n            {\n                //enable the  sending of cookie\n                credentials: 'include',\n                \"mode\": 'cors',\n                \"signal\": signal\n            },\n            options\n        );\n\n        //set timeout clock\n        let timer = setTimeout(() => timeOut(), timeOutTime);\n\n        let response = await fetch(url, requestOptions);\n\n        //clear timeoyt clock\n        clearTimeout(timer);\n\n\n        //parse response data\n        let data = await parseResponseData(response);\n        //response error check\n        checkResponseStatus(response,data);\n        return  data;\n\n    }\n    catch (error) {\n\n        //if abort error is caused by timeout\n        if (abortRequestType === 2) {\n            //create a custom error for timeout\n            let timeOutError = new Error(\"Error: Time out to get response from backend\");\n            timeOutError.name = \"timeout\";\n            return  timeOutError;\n        }\n        //if is a abort error  caused by user\n        else if (abortRequestType === 1) {\n            return null;\n        }\n\n        return error;\n\n\n    }\n}\n\n/**\n * get method\n * @param url\n * @param queryData quey string\n * @return {object} response data\n */\nasync function get(url, queryData = \"\") {\n    let query = \"\";\n    if (queryData !== \"\") {\n        query = \"?\";\n        for (let key in queryData) {\n            query += key + \"=\" + encodeURIComponent(queryData[key]) + \"&\";\n        }\n        //delete the last &\n        query = query.slice(0, query.length - 1);\n    }\n    return await request(url + query);\n}\n\n/**\n * deletes method\n * @param url\n */\nasync function deletes(url) {\n    let options = {\n        \"method\": 'DELETE'\n    };\n\n    return await request(url, options);\n}\n\n/**\n * post method\n * @param url\n * @param bodyData\n * @return {object } response data\n */\nasync function post(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'POST',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options);\n}\n\n\n/**\n * put method\n * @param url\n * @param bodyData\n */\nasync function put(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'PUT',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options);\n}\n\n\n/**\n *  * check resposonse status\n * @param response to check\n * @param data data received\n * @throws {Error} if  status code < 200 or status code >= 300\n */\nfunction checkResponseStatus(response, data) {\n\n    if (response.status < 200 || response.status >= 300) {\n        const error = new Error(response.statusText);\n        error.data = response;\n        if(data.payload){\n            error.payload = data.payload;\n        }\n        throw error;\n    }\n\n}\n\n/**\n * parse the response of  http request\n * @param response response object\n * @return {object} data parsed\n */\nasync function parseResponseData(response) {\n    //get response data type\n    const contentType = response.headers.get('Content-Type');\n    let data = null;\n    //parse the data by its type\n    if (contentType != null) {\n        if (contentType.indexOf('text') > -1) {\n            data = await response.text()\n        }\n        if (contentType.indexOf('form') > -1) {\n            data = await response.formData();\n        }\n        if (contentType.indexOf('video') > -1) {\n            data = await response.blob();\n        }\n        if (contentType.indexOf('json') > -1) {\n            data = await response.json();\n        }\n    }\n    else if (response != null) {\n        data = await response.text();\n    }\n    return data;\n}\n\n\nexport default http;","import React from \"react\";\n\n/**\n * compotent main of page\n */\nconst Main = function(props){\n\n        return (\n            <div className=\"main-wrapper\">\n                {props.children}\n            </div>\n        );\n};\n\nexport default Main;","import React from \"react\";\n\n\n/**\n * this is home component\n */\nconst Home = function (props) {\n\n\n\n\n\n    return (\n        <h1>\n            hallo world\n\n        </h1>\n\n    );\n\n\n\n\n};\n\nexport default Home;","import React from \"react\";\n\n\n\n/**\n * this is the head component of page\n * @param \"menu_elements\" contains the list of menu-items\n */\n\nconst NavBar = function(props){\n    return (\n        <div className=\"navigation-wrapper\">\n\n            {/*background of the menu-bar*/}\n            <nav className=\"main-nav\"></nav>\n            {props.children}\n\n        </div>\n    );\n}\n\nexport default NavBar;","import React, {useContext, useEffect} from 'react';\nimport {AppContext} from \"./../providers/appProvider\";\n\n\nconst Error = function () {\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    useEffect(() => {//not used yet\n\n        return () => {\n            //delete the error, so app can resume its work\n            appConsumer.setError(null);\n        }\n\n    });\n\n\n    //console.dir(appConsumer.error);\n    let output;\n    //is a error from backend\n    if (appConsumer.error.payload) {\n        output = (\n            <>\n                <p>Error code:</p>\n                <p>{appConsumer.error.payload.statusCode}</p>\n                <p>Error name:</p>\n                <p>{appConsumer.error.payload.error}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.payload.message}</p>\n            </>\n        );\n    }\n\n    //is a error of other type\n    else {\n        output = (\n            <>\n                <p>Error name:</p>\n                <p>{appConsumer.error.name}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.message}</p>\n            </>\n        );\n    }\n\n    output = (\n        <div className=\"error-wrapper\" style={{textAlign: \"center\"}}>\n            {output}\n        </div>\n    );\n\n    return output;\n\n}\n\n\nexport default Error;","import React, {useState, useRef} from 'react';\n\nimport NavBar from './../navigation/navBar';\nimport Main from './../main';\nimport Error from './../modules/error';\n\n//create a context object\nconst AppContext = React.createContext();\n\n/**\n * this is the component that include a context object that it can be access by all its children component\n */\nconst AppProvider = function (props) {\n\n    const user = {\n        image: <img className=\"face\" alt=\"profile\" src=\"https://placekitten.com/100/100\"/>,\n        name: \"mario\",\n        surname: \"super\"\n    };\n\n    //error\n    const [error, setError] = useState(null);\n\n    //preparate an object to be insertd into context\n    const contextObject ={\n        user,\n        error,\n        setError\n    };\n\n\n    //if there isn't error\n    if (!error) {\n\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                {/*mount all components children*/}\n                {props.children}\n\n            </AppContext.Provider>\n        );\n    }\n    //if there is a error\n    else {\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                    <Error/>\n\n            </AppContext.Provider>\n        )\n    }\n\n\n}\n\nexport {AppContext, AppProvider};","import React, {useContext} from \"react\";\nimport { AppContext } from './../providers/appProvider'\n\n/*\n* this is the component that visualize user information box\n* */\nconst UserInfo = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return(\n            <div className=\"user\" >\n                {appConsumer.user.image}\n                <div className=\"user-info\">\n                    {appConsumer.user.name}\n                    <br/>\n                    {appConsumer.user.surname}\n                </div>\n            </div>\n    );\n}\n\nexport  default  UserInfo;","/**\n * this is the config file\n */\n\n\nconst config = {\n    \"home\": \"http://localhost:3000/\",\n    \"search\": \"search\",\n    \"scopus_search\": \"search-scopus\",\n    \"projects\": \"projects\",\n    \"papers\": \"papers\",\n    \"menu_list\": [\n        {id: 4, content: \"my projects\", link: \"/projects\"},\n        {id: 5, content: \"option3\", link: \"/\"},\n        {id: 6, content: \"option4\", link: \"/projects/1\"}\n    ],\n\n\n\n\n};\n\nexport default config;","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst MenuButton = function (props) {\n\n    return (\n\n        <svg id=\"menu-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n             x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M214,482.1\"/>\n            <line className=\"st-t\" x1=\"172\" y1=\"482.1\" x2=\"172\" y2=\"482.1\"/>\n            <line className=\"st-m\" x1=\"500\" y1=\"482.1\" x2=\"500\" y2=\"482.1\"/>\n            <line className=\"st-b\" x1=\"828\" y1=\"482.1\" x2=\"828\" y2=\"482.1\"/>\n        </svg>\n    );\n};\n\nexport default MenuButton;\n","import React, {useState, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\n\nimport UserInfo from './userInfo';\nimport config from '../../config/index';\nimport MenuButton from '../svg/menuButton';\n\n/**\n *this is the side menu component\n */\nconst SideMenu = function (props) {\n\n    //bool to control the visualization of menu\n    const [shown, setShown] = useState(false);\n    const [firstTime, setFirstTime] = useState(true);\n\n\n    //function to open/close the menu\n    function handleToggleMenuButton() {\n        setShown(!shown);\n        setFirstTime(false);\n    }\n\n    //function to close the menu\n    function handleMenuBlur() {\n        setShown(false);\n    }\n\n    //change the class of element by menu state\n    var clsidemenu = \"modal side-menu up\";\n    var clsbutton = \"button-wrapper close\";\n\n    if (firstTime) {\n        clsidemenu = \"modal side-menu\"\n    }\n    if (shown) {\n        clsbutton = \"button-wrapper open\"\n        clsidemenu = \"modal side-menu down\"\n    }\n\n    return (\n        <div className=\"menu\">\n\n            <div className={clsbutton} onClick={handleToggleMenuButton}>\n                <MenuButton/>\n            </div>\n\n            <div className={clsidemenu} tabIndex={-1}>\n\n                {/*user info box*/}\n                <UserInfo/>\n                <PrintMenu handleMenuBlur={handleMenuBlur}/>\n\n            </div>\n        </div>\n    );\n\n}\n\n/**\n *local compotent to print menu\n */\nconst PrintMenu = function (props) {\n\n    let output = (\n        config.menu_list.map((element, index) => (\n                <div key={index}>\n                    <Link to={element.link} className=\"menu-option\"\n                          onMouseUp={props.handleMenuBlur}>{element.content}</Link>\n                </div>\n            )\n        )\n    );\n    return output;\n\n\n}\n\n\nexport default SideMenu;","import http from './../utils/conn'\nimport config from './../config/index'\n\n/**\n * dao to get a projects list\n * @param queryData\n * @return {array[objects]}\n */\nasync function getProjectsList(queryData = \"\") {\n    let url = config.home + config.projects\n    let res = await http.get(url, queryData);\n    return res;\n\n\n}\n\n/**\n * dao to get a project\n * @param project_id\n * @return {Object} project requested\n */\nasync function getProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.get(url);\n    return res;\n}\n\n/**\n * dao to post a new project\n * @param bodyData\n * @return {Object} project created\n */\nasync function postProject(bodyData) {\n    let url = config.home + config.projects;\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putProject(project_id, bodyData) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deleteProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.delete(url);\n    return res;\n}\n\n\nconst projectsDao = {\n    \"getProjectsList\": getProjectsList,\n    \"getProject\": getProject,\n    \"postProject\": postProject,\n    \"putProject\": putProject,\n    \"deleteProject\": deleteProject,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectsDao};","import React from \"react\";\n\n/**\n * component svg loading-icon\n */\nconst LoadIcon = function (props) {\n\n    return (\n\n        <svg id=\"loading-icon\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\n             y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <g>\n                <path id=\"loading-circle1\" d=\"\n                  M 500, 500\n                  m -160, 0\n                  a 160,160 0 1,0 320,0\n                  a 160,160 0 1,0 -320,0\n          \"/>\n                <path id=\"loading-circle2\" d=\"\n                  M 500, 500\n                  m -305, 0\n                  a 305,305 0 1,0 610,0\n                  a 305,305 0 1,0 -610,0\n          \"/>\n            </g>\n        </svg>\n    );\n};\n\nexport default LoadIcon;\n","import React, {useEffect, useRef, useContext} from \"react\";\nimport {projectsDao} from './../../dao/projects.dao'\n\nimport { AppContext } from './../providers/appProvider'\n\n/**\n * this is the form for create or edit the project\n * @param props.project  project object if we want to update a old project\n * @param null if we want to create a new project\n */\nfunction ProjectForm(props) {\n    //field of project name\n    const projectName = useRef(null);\n    //field of project description\n    const projectDescription = useRef(null);//sconsigliato da react, usare useRef per form\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    /**\n     * action to create a new project\n      */\n    async function createProject(e) {\n        //disable default action\n        e.preventDefault();\n        //prepare the data object to post\n        let bodyData = {name: projectName.current.value, description: projectDescription.current.value};\n        //call dao\n        let res = await projectsDao.postProject(bodyData);\n\n        //error checking\n        if(res.message){\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n\n        alert(\"inserted correctly\");\n    }\n\n    /**\n     * action to update a old project\n     */\n    async function updateProject(e) {\n        //disable default action\n        e.preventDefault();\n        //prepare the data object to post\n        let bodyData = {name: projectName.current.value, description: projectDescription.current.value};\n        //call dao  with project_id and data object\n        let res = await projectsDao.putProject(props.project.id, bodyData);\n\n        //error checking\n        if(res.message){\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n\n        alert(\"updated correctly\");\n    }\n\n\n    //defalut input values are empty\n    let projectInputData = {name: \"\", description: \"\"};\n    //default action is create a project\n    let submitAction = createProject;\n    //if we want update a old project\n    if (props.project !== undefined) {\n        //get old project data\n        projectInputData.name = props.project.data.name;\n        projectInputData.description = props.project.data.description;\n        //set action as update\n        submitAction = updateProject;\n    }\n\n    return (\n        <>\n        <form className=\"modal add-project\" style={{visibility: (!props.visibility) ? 'hidden' : '' }}>\n            <button type=\"button\" className=\"close-btn\" onClick={(e) => {\n                props.setVisibility(!props.visibility);\n            }}>X</button>\n            <label>name</label>\n            <br/>\n            <input ref={projectName} type=\"text\" defaultValue={projectInputData.name}/>\n            <br/>\n            <label>description</label>\n            <br/>\n            <input ref={projectDescription} type=\"text\" defaultValue={projectInputData.description}/>\n            <br/>\n            <button type=\"submit\" onClick={submitAction} value=\"submit\">submit</button>\n        </form>\n        </>\n    );\n\n\n}\n\n\nexport default ProjectForm;","//need to parse query string of url\nimport queryString from 'query-string';\n\n/**\n * there are the common support function\n */\n\n\n/**\n * this is  function to manipolate 2 url string\n * if first string ends with \"/\", removes \"/\".\n * then concate wite second string and return new string\n */\nfunction join(base, path){\n    let newPath;\n    //if the last element is \"/\"\n    if(base.charAt(base.length-1) === '/'){\n        newPath = base.slice(0,-1) + path;\n    }\n    else{\n        newPath =base + path;\n    }\n\n    return newPath;\n\n  }\n\n/**\n *\n *\n * function that set pagesize and after value by query string (if exist)\n * @param query query string\n * @return {number[]} pagesize, before, after\n */\nfunction setPaginationParamsFromQuery(query){\n    //initial value\n    let pagesize=10;\n    let before=-1;\n    let after=0;\n\n\n    let params = queryString.parse(query);\n    if(params.pagesize){\n        pagesize = Number(params.pagesize);\n    }\n    //is there is before, ignore the after\n    if(params.before){\n        before = Number(params.before);\n    }\n    else if(params.after){\n        after = Number(params.after);\n    }\n    return [pagesize, before, after];\n}\n\n\n\n\nexport  { join, setPaginationParamsFromQuery};","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {join} from './../../utils/index';\n\n/**\n * this is the component for paginaton\n * @param after last element's id\n * @param pagination object {hasbefore, continues}\n * @param path current page path\n * @return {*}\n * @constructor\n */\nconst Pagination = function ({before, after, pagination, path}) {\n\n    let output = null;\n    let prevLink =\"\";\n    let nextLink = \"\";\n\n    //if there is hasbefore or continues\n    if (pagination.hasbefore || pagination.continues) {\n\n        //show prev button only hasbefore is true\n        if (pagination.hasbefore) {\n            prevLink = (\n                <Link className=\"before\" to={join(path, \"before=\" + before)}>\n                    {\"< prev\"}\n                </Link>\n            );\n        }\n        //show next button only continues is true\n        if (pagination.continues) {\n            nextLink = (\n\n                <Link className=\"after\" to={join(path, \"after=\" + after)}>\n                    {\"next >\"}\n                </Link>\n\n            )\n        }\n        output = (\n            <div className=\"pagination\">\n                {prevLink}\n                {nextLink}\n            </div>\n        );\n\n    }\n    return output;\n\n}\n\n\nexport default Pagination;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\nimport queryString from 'query-string';\n\n\nimport {projectsDao} from './../../dao/projects.dao';\nimport LoadIcon from './../svg/loadIcon';\nimport ProjectForm from './../forms/projectForm';\nimport Pagination from './../modules/pagination';\nimport {join} from './../../utils/index';\n\nimport {AppContext} from \"./../providers/appProvider\";\n\n/**\n *this component will show a projects list page\n */\n\nconst ProjectsList = function (props) {\n\n\n    //fetch data\n    const [projectsList, setProjectsList] = useState([]);\n\n    //bool to show the pagination buttons\n    const initialPaginationState = {hasbefore: false, continues: false};\n    const [pagination, setPagination] = useState(initialPaginationState);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //bool to control the visualization of input form\n    const [toggleform, setToggleForm] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const params = queryString.parse( props.location.search && props.location.search);\n    const pagesize = params.pagesize || 10;\n    const before = params.before || -1;\n    const after = params.after || 0;\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    const queryData = (before >= 0 ? {pagesize, before} : {pagesize, after});\n\n\n    useEffect(() => {\n\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            const res = await projectsDao.getProjectsList(queryData);\n\n            //error checking\n            //if is 404 error\n            if (res.message === \"Not Found\") {\n                setProjectsList([]);\n                setPagination(initialPaginationState);\n                //show the page\n                setDisplay(true);\n            }\n            //if is other error\n            else if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                //update state\n                setProjectsList(res.results);\n                setPagination({hasbefore: res.hasbefore, continues: res.continues});\n                //show the page\n                setDisplay(true);\n            }\n        }\n\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectsDao.abortRequest();\n        };\n    }, [pagesize, before, after]); //re-execute when these variables change\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n\n    else {\n\n        //get first and last project id of list\n        let firstId = 0;\n        let lastId = 0;\n        //if the list is not empty\n        if (projectsList.length > 0) {\n            firstId = projectsList[0].id;\n            lastId = projectsList[projectsList.length - 1].id;\n        }\n        output = (\n            <div>\n                {/*print list of projects*/}\n                <PrintList projectsList={projectsList} path={props.match.url}/>\n                {/*set listId and continues value*/}\n                <Pagination before={firstId} after={lastId} pagination={pagination} path={props.match.url+\"?\"}/>\n\n                {/*print the input form to create/update the projects*/}\n                <ProjectForm visibility={toggleform} setVisibility={setToggleForm}/>\n                {/*button to show input form*/}\n                <button className=\"bottom-left-btn\" type=\"button\" value=\"toggle-insert-form\" onClick={(e) => {\n                    setToggleForm(!toggleform);\n                }}>+\n                </button>\n            </div>\n        );\n\n    }\n\n    return output;\n\n\n};\n\n\n/**\n *  local component to print list\n * @param projectsList projects list data\n * @param path current page url\n */\nconst PrintList = function ({projectsList, path}) {\n\n    let maps;\n    //if list is empty, print a notice message\n    if (projectsList.length === 0) {\n        maps = (\n            <div>there aren't projects</div>\n        );\n    }\n    //if list isn't empty, print list of projects\n    else {\n        maps = (projectsList.map((element, index) =>\n            <Link key={element.id} to={join(path, \"/\" + element.id)}>\n                <div className=\"light-modal project-card\">\n                    <h3>{element.id} {element.data.name}</h3>\n                    <p>{element.data.description}</p>\n                </div>\n            </Link>\n        ));\n    }\n\n    let output =  (\n        <div className=\"project-cards-holder\">\n            <div className=\"title\">\n                PROJECTS\n            </div>\n            {maps}\n        </div>\n    );\n\n    return output;\n\n};\n\n\nexport default ProjectsList;","import React from \"react\";\n\nconst CheckBox = ({ val, label, isChecked, handler }) => (\n    <label className=\"checkbox-container\">\n      <input type=\"checkbox\" value={val} name={label} defaultChecked={isChecked} onChange={handler} />\n      <span className=\"checkmark\"></span>\n      <span>{label}</span>\n    </label>\n);\n\nexport default CheckBox;","import http from './../utils/conn'\nimport config from './../config/index'\n\n/**\n * dao to search local papers\n * @param queryData\n * @return {array[objects]}\n */\nasync function search(queryData){\n    let url = config.home+config.search;\n\n        const res = await http.get(url, queryData);\n        return res;\n\n}\n\n/**\n * dao to search scopus papers\n * @param queryData\n * @return {array[objects]}\n */\nasync function scopusSearch(queryData){\n    let url = config.home+config.scopus_search;\n\n    const res = await http.get(url, queryData);\n    return res;\n\n}\n\n\n\nconst paperDao = {\n    search,\n    scopusSearch,\n    \"abortRequest\" : http.abortRequest\n}\n\n\n\nexport {paperDao};","import http from './../utils/conn'\nimport config from './../config/index'\n\n/**\n * dao to get a list of paper associated with a project\n * @param queryData\n * @return {array[objects]}\n */\nasync function getPapersList(queryData) {\n    let url = config.home + config.papers\n\n    const res = await http.get(url, queryData);\n    return res;\n\n}\n\n/**\n * dao to get a paper\n * @param paper_id\n * @return {Object} paper requested\n */\nasync function getPaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.get(url);\n}\n\n/**\n * dao to post a new paper\n * @param bodyData\n * @return {Object} project created\n */\nasync function postPaperIntoProject(bodyData) {\n    let url = config.home + config.papers;\n    console.log(bodyData);\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putPaper(paper_id, bodyData) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deletePaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.delete(url);\n}\n\n\nconst projectPapersDao = {\n    \"getPapersList\": getPapersList,\n    \"getPaper\": getPaper,\n    \"postPaperIntoProject\": postPaperIntoProject,\n    \"putPaper\": putPaper,\n    \"deletePaper\": deletePaper,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectPapersDao};","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst SearchButton = function (props) {\n\n    return (\n        <svg id=\"search-icon\" xmlns=\"http://www.w3.org/2000/svg\"\n             xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M626.9,644.3c-73.5,0-142.6-28.6-194.6-80.6s-80.6-121.1-80.6-194.6s28.6-142.6,80.6-194.6\n                c52-52,121.1-80.6,194.6-80.6c73.5,0,142.6,28.6,194.6,80.6c52,52,80.6,121.1,80.6,194.6s-28.6,142.6-80.6,194.6\n                S700.4,644.3,626.9,644.3z\"/>\n            <line className=\"st1\" x1=\"145.2\" y1=\"850.8\" x2=\"431.7\" y2=\"564.3\"/>\n        </svg>\n    );\n};\n\nexport default SearchButton;\n","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom'\nimport ClampLines from 'react-clamp-lines';\nimport queryString from \"query-string\";\n\n\nimport CheckBox from \"./checkbox\";\nimport {paperDao} from './../../dao/paper.dao';\nimport {projectPapersDao} from './../../dao/projectPapers.dao'\nimport LoadIcon from './../svg/loadIcon';\nimport SearchButton from './../svg/searchButton';\nimport {join} from './../../utils/index';\n\nimport {AppContext} from './../providers/appProvider'\nimport Pagination from \"./../modules/pagination\";\n\n\n/*this is component form to search for the paper in project page*/\n\nconst SearchForm = function ({project_id, location, match, history}) {\n\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //options on search\n    const initialCheckboxesState = {scopus: false, option2: false, option3: false};\n    const [checkboxes, setCheckboxes] = useState(initialCheckboxesState);\n\n    //selected list of papers\n    const [selectedPapers, setSelectedPapers] = useState([]);\n\n    //input search string\n    const [inputToSearch, setInputToSearch] = useState('');\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(true);\n\n    //bool to show the pagination buttons\n    const initialPaginationState = {hasbefore: false, continues: false};\n    const [pagination, setPagination] = useState(initialPaginationState);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n\n    //set query params from url\n    const params = queryString.parse(location.search);\n    const pagesize = params.pagesize || 10;\n    const before = params.before || -1;\n    const after = params.after || 0;\n    const query = params.query || \"\";\n    const scopus = params.scopus || false;\n    const option2 = params.option2 || false;\n    const option3 = params.option3 || false;\n    const queryData = {pagesize, query};\n    if (before >= 0) {\n        queryData.before = before;\n    }\n    else {\n        queryData.after = after;\n    }\n    if (scopus) {\n        queryData.scopus = scopus;\n    }\n    if (option2) {\n        queryData.option2 = option2;\n    }\n    if (option3) {\n        queryData.option3 = option3;\n    }\n\n\n\n    useEffect(() => {\n\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //empty the list\n            setSelectedPapers([]);\n\n\n            //if there is queryString from URL\n            if (query !== \"\") {\n\n                //hide the page\n                setDisplay(false);\n\n                let res;\n                //call the dao to get local papers\n                if(scopus === false){\n                    res = await paperDao.search(queryData);\n                }\n                //call to dao to get scopus papers\n                else{\n                    res = await paperDao.scopusSearch(queryData);\n                }\n\n\n                //error checking\n                //if is 404 error\n                if (res.message === \"Not Found\") {\n                    setPapersList([]);\n                    setPagination(initialPaginationState);\n                    //show the page\n                    setDisplay(true);\n                }\n                //if is other error\n                else if (res.message) {\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }\n                //if res isn't null\n                else if (res !== null) {\n                    //update state\n                    setPapersList(res.results);\n                    setPagination({hasbefore: res.hasbefore, continues: res.continues});\n                    //show the page\n                    setDisplay(true);\n                }\n            }\n\n        }\n\n        fetchData();\n\n    }, [query, before, after, scopus, option2, option3, project_id]);  //re-execute when these variables change\n\n    /**\n     * update the checkbox state\n     */\n    function handleCheckboxChange(e) {\n        //copy the object\n        let newState = {...checkboxes};\n        let optionName = e.target.name;\n        switch (optionName) {\n            case \"scopus\":\n                newState.scopus = !newState.scopus;\n                break;\n            case \"option2\":\n                newState.option2 = !newState.option2;\n                break;\n            case \"option3\":\n                newState.option3 = !newState.option3;\n                break;\n        }\n        setCheckboxes(newState);\n    }\n\n    /*function to insert and remove the paper id from selected list*/\n    function handlePaperSelection(event) {\n        let id = event.target.value;\n        //if id is not included in the list yet\n        if (!selectedPapers.includes(id)) {\n            //copy array\n            let array = [...selectedPapers];\n            array.push(id);\n\n            //update the state\n            setSelectedPapers(array);\n        }\n        //if id already exists in the list\n        else {\n            //create a new array without the target paper id\n            var array = selectedPapers.filter(function (value) {\n                return value !== id;\n            });\n            setSelectedPapers(array);\n        }\n    }\n\n    /*function to add the post in the project*/\n    async function handleAddPapers(event) {\n\n        event.preventDefault();\n        //hide the page\n        setDisplay(false);\n\n        //for to insert papers into DB\n        for (let i = 0; i < selectedPapers.length; i++) {\n\n            //call dao\n            let res = await projectPapersDao.postPaperIntoProject({\n                paper_id: selectedPapers[i], project_id: project_id\n            });\n            //if there is the error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n                return null;\n            }\n        }\n        //show the page\n        setDisplay(true);\n\n        alert(\"insert completed\");\n    }\n\n\n    /*function to send the query*/\n    async function handleSendSearch(event) {\n\n        event.preventDefault();\n        //if query input is empty\n        if (inputToSearch === \"\") {\n            alert(\"search string is empty\")\n        }\n        else {\n            //concatenate the query string\n            let queryParams = \"?query=\" + inputToSearch;\n            if (checkboxes.scopus) {\n                queryParams += \"&scopus=true\";\n            }\n            if (checkboxes.option2) {\n                queryParams += \"&option2=true\";\n            }\n            if (checkboxes.option3) {\n                queryParams += \"&option3=true\";\n            }\n\n            //update url to start the search\n            history.push(queryParams);\n        }\n\n    }\n\n    /*\n     #######################################\n     need to  create a new child component for the part of <form>, when we have more information on search options\n     ######################################\n     */\n    let formPart = (//creare un componente a part\n        <>{}\n            <form className={(query === \"\") ? 'search-form' : 'search-form small'}\n                  onSubmit={handleSendSearch}>\n                {/*search form*/}\n                <div style={{position: 'relative'}}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"search\"\n                        defaultValue={inputToSearch}\n                        onChange={e => setInputToSearch(e.target.value)}\n                    />\n                    <button type=\"submit\" value=\"Submit\">\n                        <SearchButton/>\n                    </button>\n                </div>\n\n                <div className=\"option-holder\">\n                    <label>Option:</label><br/>\n                    <div className=\"checkboxes-holder\">\n\n                        <CheckBox label=\"scopus\" isChecked={checkboxes.scopus} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"option2\" isChecked={checkboxes.option2} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"option3\" isChecked={checkboxes.option3} handler={handleCheckboxChange}/>\n\n                    </div>\n                </div>\n\n            </form>\n        </>);\n\n\n    let resultPart=\"\";\n\n    //if the search results list is empty\n    if (display === true && papersList.length === 0 && query !== \"\") {\n        //the class is used only to workaround a small bug that display not found just as the search start before the loading icon\n        resultPart = (\n            <div className=\"notfound\"> not found :( </div> \n        );\n    }\n    else if(papersList.length > 0 && query !== \"\"){\n\n        //get first and last paper id of list\n        let firstId = papersList[0].id;\n        let lastId = papersList[papersList.length - 1].id;\n\n        //set correct url for pagination\n        let paginationUrl = window.location.href;\n        let index = paginationUrl.indexOf(\"?\");\n        let existBefore = paginationUrl.lastIndexOf(\"before\");\n        let existOfAfter = paginationUrl.lastIndexOf(\"after\");\n        if(existBefore > -1){\n            paginationUrl = paginationUrl.slice(index, existBefore)\n        }\n        else if(existOfAfter > -1){\n            paginationUrl = paginationUrl.slice(index, existOfAfter)\n        }\n        else{\n            paginationUrl = paginationUrl.slice(index) +\"&\";\n        }\n\n        let printList = (scopus === false?\n                (<PrintSearchList papersList={papersList} handlePaperSelection={handlePaperSelection}/>)\n                :\n                ( <PrintScoupusSearchList papersList={ papersList} handlePaperSelection={handlePaperSelection}/>)\n        );\n\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                {printList}\n                <Pagination before={firstId} after={lastId} pagination={pagination} path={paginationUrl}/>\n                <button className=\"bottom-left-btn\" type=\"submit\" value=\"Submit\">\n                    +\n                </button>\n            </div>\n        );\n    }\n\n    //if is loading\n    if (display === false) {\n\n        resultPart = (\n            <div className=\"loading-holder\">\n                <LoadIcon/>\n            </div>);\n    }\n\n    let output = (\n        <>\n            {formPart}\n            <form className=\"search-results\" onSubmit={handleAddPapers}>\n                {resultPart}\n            </form>\n        </>\n    );\n\n    return output;\n};\n\n\n/*local component to print search result list of papers*/\nconst PrintSearchList = function ({papersList, handlePaperSelection}) {\n\n    let output = papersList.map((element, index) =>\n        <div key={element.id} className=\"paper-card\">\n            <CheckBox val={element.id} label={\"\"} handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.id} {element.data && element.data.Title}</h3></Link>\n            <ClampLines\n                text={element.data && element.data.Abstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n}\n\n/*local component to print scopus search result list of papers*/\nconst PrintScoupusSearchList = function ({papersList, handlePaperSelection}) {\n\n    let exampleAbstract =\"I am a description I am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a description\";\n\n    let output = papersList.map((element, index) =>\n        <div key={element.id} className=\"paper-card\">\n            <CheckBox val={element.id} label={\"\"} handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.id} {element.Title}</h3></Link>\n            <ClampLines\n                text={exampleAbstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n}\n\n\nexport default SearchForm;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\nimport ClampLines from 'react-clamp-lines';\nimport queryString from \"query-string\";\n\nimport {projectPapersDao} from './../../dao/projectPapers.dao';\nimport LoadIcon from './../svg/loadIcon';\n\nimport {AppContext} from './../providers/appProvider'\nimport {join} from \"../../utils\";\nimport Pagination from \"./../modules/pagination\";\n\n\n/**\n * the local component that shows the papers list of a project\n */\nconst PapersList = ({project_id, location, match}) => {\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to show the pagination buttons\n    const initialPaginationState = {hasbefore: false, continues: false};\n    const [pagination, setPagination] = useState(initialPaginationState);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const params = queryString.parse(location.search);\n    const pagesize = params.pagesize || 10;\n    const before = params.before || -1;\n    const after = params.after || 0;\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    const queryData = (before >= 0 ? {pagesize, before} : {pagesize, after});\n    //insert project_id in queryData\n    queryData.project_id = project_id;\n\n    useEffect(() => {\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            let res = await projectPapersDao.getPapersList(queryData);\n\n            //error checking\n            //if is 404 error\n            if (res.message === \"Not Found\") {\n                setPapersList([]);\n                setPagination(initialPaginationState);\n                //show the page\n                setDisplay(true);\n            }\n            //if is other error\n            else if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n\n                //update state\n                setPapersList(res.results);\n                setPagination({hasbefore: res.hasbefore, continues: res.continues});\n                //show the page\n                setDisplay(true);\n            }\n\n        }\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectPapersDao.abortRequest();\n        };\n    }, [pagesize, before, after]); //re-excute when these variables change\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n    else {\n\n        //get first and last paper id of list\n        let firstId = 0;\n        let lastId = 0;\n        //if the list is not empty\n        if (papersList.length > 0) {\n            firstId = papersList[0].id;\n            lastId = papersList[papersList.length - 1].id;\n        }\n\n        output = (\n            <div className=\"paper-card-holder\">\n                <PrintList papersList={papersList}/>\n                <Pagination before={firstId} after={lastId} pagination={pagination} path={match.url+\"?\"}/>\n            </div>\n        );\n    }\n\n    output = (\n        <div className=\"papers-list\">\n            {output}\n        </div>\n    );\n\n    return output;\n\n}\n\n\n/**\n *local component to print list\n * @param papersList\n */\nconst PrintList = function ({papersList}) {\n\n    let output;\n    //if list is empty, print a notice message\n    if (papersList.length === 0) {\n        output = (\n            <div>there are no papers here, you can add new ones by searching</div>\n        );\n    }\n    //if list isn't empty, print list of papers\n    else {\n        output = (\n            papersList.map((element, index) =>\n                <div key={element.id} className=\"paper-card\">\n                    <Link to={\"#\"}>\n                        <h3>{element.id} {element.data.Title}</h3>\n                    </Link>\n                    <ClampLines\n                        text={element.data.Abstract}\n                        lines={4}\n                        ellipsis=\"...\"\n                        moreText=\"Expand\"\n                        lessText=\"Collapse\"\n                        className=\"paragraph\"\n                        moreText=\"more\"\n                        lessText=\"less\"\n                    />\n                </div>\n            )\n        );\n    }\n    return output;\n\n\n}\n\n\nexport default PapersList;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Route, Link} from 'react-router-dom';\nimport {Flipper, Flipped} from 'react-flip-toolkit';\nimport ClampLines from 'react-clamp-lines';\n\nimport SearchForm from './../forms/searchform';\nimport PapersList from './papersList';\nimport {projectsDao} from './../../dao/projects.dao';\nimport LoadIcon from './../svg/loadIcon';\nimport {join} from './../../utils/index';\n\nimport {AppContext} from './../providers/appProvider'\n\nconst OPTIONS1 = [\"option one\", \"option two\", \"option three\"];\n\n\n/**\n *this component will show a projects page\n */\nconst ProjectPage = (props) => {\n\n    //project object of page\n    const [project, setProject] = useState({});\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n    //bool for annimation\n    const [slider, setSlider] = useState(true);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    const project_id = props.match.params.id;\n\n    const substrUrl = window.location.pathname.substring(window.location.pathname.length - 7, window.location.pathname.length);\n\n    //set animation effects on menu by parsing the url\n    useEffect(() => {\n\n        if (substrUrl === '/search' || substrUrl === 'search/') {\n            setSlider(false);\n        }\n        else {\n            setSlider(true);\n        }\n    }, [substrUrl]);\n\n\n    useEffect(() => {\n\n        setDisplay(false);\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //call the dao\n            let res = await projectsDao.getProject(project_id);\n\n            //error checking\n            //if is other error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                //update state\n                setProject(res);\n                //show the page\n                setDisplay(true);\n            }\n        }\n        fetchData();\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectsDao.abortRequest();\n        };\n    }, [project_id]); //re-execute when these variables change\n\n\n    let output;\n\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n    else {\n\n        output = (\n\n            <div className=\"project-wrapper\">\n                <ProjectPageHead project={project} match={props.match} slider={slider}/>\n\n                {/*route the papers list*/}\n                <Route exact  path={props.match.url} render={() =>\n                    <>\n                        <div className=\"project-description\">\n                            <h2>description:</h2>\n                            {project.data.description}\n                        </div>\n                        <PapersList project_id={project_id} location={props.location} match={props.match} />\n                    </>\n                }/>\n\n                {/*route the form of search*/}\n                <Route exact path={props.match.url + \"/search\"} render={(props) =>\n                    <SearchForm project_id={project_id} {...props} />\n                }/>\n\n            </div>\n        );\n    }\n\n    return output;\n}\n\n/**\n * this is the local component to print head of project page\n */\nconst ProjectPageHead = function ({project, match, slider}) {\n    let output = (\n        <>\n            <div className=\"title\">\n                {project.data.name.toUpperCase()}\n            </div>\n            <div className=\"project-nav-link-wrapper\">\n                <div className=\"nav-link\">\n                    <Link to={match.url}>papers</Link>\n                </div>\n                <div className=\"nav-link\">\n                    <Link to={join(match.url, \"/search\")}>search</Link>\n                </div>\n                <Flipper flipKey={slider}>\n                    <Flipped flipId=\"underline\">\n                        <div className={slider ? \"underline underline-to-left\" : \"underline underline-to-right\"}/>\n                    </Flipped>\n                </Flipper>\n            </div>\n        </>\n    );\n    return output;\n\n}\n\n\nexport default ProjectPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, } from \"react-router-dom\";\n\n\n\nimport Main from './components/main';\nimport Home from './components/home';\n\nimport NavBar from './components/navigation/navBar';\nimport SideMenu from './components/navigation/sideMenu';\n\nimport ProjectsList from './components/projects/projectsList';\nimport ProjectPage from './components/projects/projectPage';\n\n\nimport  {AppProvider} from './components/providers/appProvider';\n\n\n/**\n *this is the start point of application\n */\n\nconst App = function(props) {\n\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    {/*mount a root context object*/}\n                    <AppProvider>\n\n                        <NavBar>\n                            {/*component menu*/}\n                            <SideMenu/>\n                        </NavBar>\n                        <Main>\n                            <Route exact path=\"/\" render={() => <Home/> }/>\n                            <Route exact path=\"/projects\" render={(props) => <ProjectsList {...props} />}/>\n                            <Route path=\"/projects/:id\" render={(props) => <ProjectPage {...props} />}/>\n\n                        </Main>\n\n                    </AppProvider>\n                </div>\n            </Router>\n        );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}