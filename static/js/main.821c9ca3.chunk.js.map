{"version":3,"sources":["utils/conn.js","components/main.js","components/svg/editButton.js","components/navigation/navBar.js","components/modules/error.js","components/providers/appProvider.js","components/home.js","components/navigation/userInfo.js","config/index.js","components/svg/menuButton.js","components/modules/cover.js","components/navigation/sideMenu.js","components/breadCrumbs.js","dao/projects.dao.js","components/svg/loadIcon.js","components/svg/closeButton.js","components/forms/projectForm.js","components/modules/pagination.js","utils/index.js","components/svg/optionsButton.js","components/modules/sideOptions.js","components/projects/projectsList.js","dao/paper.dao.js","dao/projectPapers.dao.js","components/svg/selectTick.js","components/forms/checkbox.js","components/svg/radioTick.js","components/forms/radiobox.js","components/svg/searchButton.js","components/svg/searchSimilarButton.js","components/papers/printPapersList.js","components/svg/selectArrow.js","components/forms/select.js","components/svg/orderArrow.js","components/svg/removeButton.js","components/forms/searchform.js","dao/updateFile.dao.js","components/svg/goButton.js","components/forms/searchSimilarPapers.js","components/forms/searchSimilarForm.js","components/papers/papersList.js","components/forms/selectformik.js","components/forms/custompaper.js","components/papers/customPaperPage.js","components/projects/projectDescription.js","components/projects/projectName.js","components/projects/projectPage.js","App.js","serviceWorker.js","index.js"],"names":["abortController","abortRequestType","Main","props","react_default","a","createElement","className","children","EditButton","_ref","confirm","Fragment","version","id","xmlns","xmlnsXlink","x","y","viewBox","points","d","NavBar","appConsumer","useContext","AppContext","title","Error","output","useEffect","setError","error","payload","statusCode","message","name","style","textAlign","type","onClick","window","history","back","React","createContext","AppProvider","user","image","alt","src","surname","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","setTitle","_useState5","_useState6","contextObject","projectName","setProjectName","Provider","value","modules_error","Home","fontSize","fontWeight","UserInfo","config","home","search","scopus_search","projects","papers","customPapers","menu_list","content","link","max_total_number_for_results","pdf_parse_server","MenuButton","x1","y1","x2","y2","Cover","cls","handler","e","PrintMenu","map","element","index","key","react_router_dom","to","onMouseUp","handleMenuBlur","SideMenu","shown","setShown","firstTime","setFirstTime","clsidemenu","clsbutton","cover","menuButton","tabIndex","userInfo","sideMenu_PrintMenu","BreadCrumbs","path","location","pathname","split","filter","href","bc","length","push","i","timeOutTime","request","_callee","url","options","signal","requestOptions","timer","response","data","timeOutError","regenerator_default","wrap","_context","prev","next","AbortController","assign","credentials","mode","setTimeout","abort","fetch","sent","clearTimeout","parseResponseData","checkResponseStatus","abrupt","t0","stop","_callee2","queryData","query","jsonHeaders","_args2","arguments","_context2","undefined","encodeURIComponent","slice","Headers","append","method","headers","_callee3","_context3","_callee4","bodyData","body","_args4","_context4","JSON","stringify","_callee5","_args5","_context5","_callee6","_args6","_context6","status","statusText","_callee7","contentType","_context7","get","indexOf","text","formData","blob","json","http","post","delete","put","postFile","abortRequest","console","log","res","_args","project_id","projectsDao","getProjectsList","getProject","postProject","putProject","deleteProject","LoadIcon","class","CloseButton","ProjectForm","yup","require","projectValidationSchema","object","shape","string","required","description","formik_esm","initialValues","validationSchema","onSubmit","_ref2","asyncToGenerator","mark","values","setSubmitting","_x","_x2","apply","this","validateOnBlur","_ref3","errors","touched","isSubmitting","validateField","setErrors","handleChange","visibility","setVisibility","closeButton","borderBottom","placeholder","onChange","component","disabled","Pagination","start","count","totalResults","queryString","newQueryString","arryQuery","parameterName","setStartAndCountInUrl","firstPage","lastPage","listPage","paged","Math","floor","totalPage","ceil","paginationLength","display","margin","arrayOfObjectsContains","b","_loop","some","v","_ret","join","base","charAt","createQueryStringFromObject","keys","getIndexOfObjectArrayByKeyAndValue","array","DeleteButton","SideOptions","target","focused","setFocused","onBlur","onMouseDown","optionsButton","padding","border","PrintList","maps","projectsList","handleDelete","sideOptions","modules_sideOptions","date_last_modified","date_created","ProjectsList","setProjectsList","setTotalResults","setDisplay","_useState7","_useState8","toggleform","setToggleForm","params","parse","createQueryData","_handleDelete","newProjectsList","project","alert","mounted","even_projs","odd_projs","objectSpread","orderBy","results","concat","fetchData","loadIcon","projectsList_PrintList","match","pagination","projectForm","paperDao","selectById","paper_id","projectPapersDao","getPapersList","getPaper","postPaperIntoProject","postCustomPaperIntoProject","putPaper","deletePaper","SelectTick","attributeName","dur","repeatCount","fill","from","CheckBox","val","label","isChecked","tick","setTick","selectTick","checked","RadioTick","cx","cy","r","RadioBox","radioTick","SearchButton","SearchSimilarButton","PrintScoupusSearchList","papersList","handlePaperSelection","selectedEidList","handleSideOptions","_handleSideOptions","forms_checkbox","eid","includes","authors","year","lib_default","abstract","lines","ellipsis","moreText","lessText","PrintPapersList","localPaperList","setLocalPaperList","_x3","_x4","_handleSideOptions2","newPapersList","paper","doi","SelectArrow","attributeType","begin","Select","selected","handleFocus","document","getElementById","beginElement","onFocus","selectArrow","borderLeft","borderRight","borderTop","data-value","OrderArrow","up","destination","setDestination","transform","RemoveButton","_","orderByOptions","searchByOptions","endYear","Date","getFullYear","yearOptions","toConsumableArray","range","String","SelectedPapersListBox","selectedPapersList","opacity","pointerEvents","removeButton","height","SearchForm","selectedPapersListFromStorage","setPapersList","queryUrl","scopus","searchBy","sort","googleScholar","arXiv","storage","localStorage","getItem","setSelectedPapersList","_useState9","_useState10","keywords","setKeyWords","_useState11","_useState12","source","setSource","_useState13","_useState14","setSearchBy","_useState15","_useState16","setYear","_useState17","_useState18","setUp","handleSelection","parseInt","getAttribute","handelOrder","event","newList","setItem","selectAllPapers","allPapersInPage","tmpList","uniqBy","_handleAddPapers","_arrayEid","preventDefault","arrayEid","_handleSendSearch","_queryString","handleOnInputChange","newSource","formPart","position","searchButton","searchSimilarButton","radiobox","singleYear","resultPart","forms_select","orderArrow","searchform_SelectedPapersListBox","printPapersList_PrintScoupusSearchList","updateFileDao","updatePdf","GoButton","SearchSimilarPapers","close","input","paperInfo","fetching","setPaperInfo","setPaperFile","topRightButton","inputElement","useRef","_handleSubmission","current","files","goButton","ref","click","SearchSimilarForm","similarPaperDataFromStorage","similarPaperData","setSimilarPaperData","similarPaperFile","setSimilarPaperFile","_useState19","_useState20","_useState21","_useState22","similarFormVisibility","setSimilarFormVisibility","_useState23","_useState24","similarPaperFetch","setSimilarPaperFetch","paperData","_res","test","FormData","fetchDataSimilarity","removeItem","marginTop","searchSimilarPapers","boxShadow","searchSimilarForm_SelectedPapersListBox","PapersList","printPapersList_PrintPapersList","form","setSelected","setFieldValue","paperType","PaperForm","paperValidationSchema","number","min","max","integer","customPaper","document_type","toString","source_title","abstract_structured","filter_oa_include","filter_study_include","notes","manual","projectId","render","_ref4","field","selectformik","CustomPaperPage","paperDataFetch","setPaperDataFetch","setPaperData","displayForm","setDisplayForm","file","custompaper","ProjectDescription","update","editing","setEditing","formatDate","date","defaultValue","width","focus","editButton","ProjectName","ProjectPageHead","notFound","lc","hash","substr","slider","es","flipKey","flipId","ProjectPage","setProject","setNotFound","updateProject","_updateProject","new_name","new_desc","reload","projects_projectName","projectPage_ProjectPageHead","react_router","exact","projectDescription","papers_papersList","searchform","searchSimilarForm","customPaperPage","App","appProvider_AppProvider","navBar","sideMenu","breadCrumbs","main","projects_projectsList","projectPage","Boolean","hostname","ReactDOM","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.821c9ca3.chunk.js","sourcesContent":["/*this is the file to communicate with backend by fetch request*/\n\n//signal to abort the request\nlet abortController;\n//int to know abort error type\nlet abortRequestType;\n//10seconds for timeout\nlet timeOutTime = 10 * 1000;\n\n\n/**\n * abort all request in progeress by user\n */\nfunction abortRequest() {\n    abortController.abort();\n    abortRequestType = 1;\n    console.log(\"abort\")\n\n}\n\n/**\n * abort all request if timeout\n */\nfunction timeOut() {\n\n    abortController.abort();\n    abortRequestType = 2;\n}\n\n/**\n * create a basic fetch request\n * @param url\n * @param options request config\n * @param {int} timeOutTime\n * @return {object} response data\n\n */\nasync function request(url, options, timeOutTime) {\n    try {\n\n        //create a new abortController for this request\n        abortController = new AbortController();\n        let signal = abortController.signal;\n        //initialize as 0 for every request\n        abortRequestType = 0;\n\n        let requestOptions = Object.assign(\n            {\n                //enable the  sending of cookie\n                credentials: 'include',\n                \"mode\": 'cors',\n                \"signal\": signal\n            },\n            options\n        );\n\n        //set timeout clock\n        let timer = setTimeout(() => timeOut(), timeOutTime);\n\n        let response = await fetch(url, requestOptions);\n\n        //clear timeout clock\n        clearTimeout(timer);\n\n\n        //parse response data\n        let data = await parseResponseData(response);\n        //response error check\n        checkResponseStatus(response,data);\n        return  data;\n\n    }\n    catch (error) {\n\n        //console.dir(error);\n\n        //if abort error is caused by timeout\n        if (abortRequestType === 2) {\n            //create a custom error for timeout\n            let timeOutError = new Error(\"Error: Time out to get response from backend\");\n            timeOutError.name = \"timeout\";\n            return  timeOutError;\n        }\n        //if is a abort error  caused by user\n        else if (abortRequestType === 1) {\n            return null;\n        }\n\n        return error;\n\n\n    }\n}\n\n/**\n * get method\n * @param url\n * @param queryData quey string\n * @return {object} response data\n */\nasync function get(url, queryData = \"\") {\n    let query = \"\";\n    if (queryData !== \"\") {\n        query = \"?\";\n        for (let key in queryData) {\n            query += key + \"=\" + encodeURIComponent(queryData[key]) + \"&\";\n        }\n        //delete the last &\n        query = query.slice(0, query.length - 1);\n    }\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n\n    let options = {\n        \"method\": 'GET',\n        \"headers\": jsonHeaders,\n    };\n\n    return await request(url + query, options, timeOutTime);\n}\n\n/**\n * delete method\n * @param url\n */\nasync function deletes(url) {\n    let options = {\n        \"method\": 'DELETE'\n    };\n\n    return await request(url, options, timeOutTime);\n}\n\n/**\n * post method\n * @param url\n * @param bodyData\n * @return {object } response data\n */\nasync function post(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'POST',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options, timeOutTime);\n}\n\n/**\n * post file method\n * @param url\n * @param bodyData\n * @return {object} response data\n */\nasync function postFile(url, bodyData = \"\") {\n\n    //custom timeout for request\n    let customTimeOutTime= 10 * 1000;\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n   // jsonHeaders.append('Content-Type', 'multipart/form-data');\n    let options = {\n        \"method\": 'POST',\n        \"headers\": jsonHeaders,\n        \"body\": bodyData\n    };\n\n    return await request(url, options, customTimeOutTime);\n}\n\n\n/**\n * put method\n * @param url\n * @param bodyData\n */\nasync function put(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'PUT',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options,timeOutTime);\n}\n\n\n/**\n *  * check resposonse status\n * @param response to check\n * @param data data received\n * @throws {Error} if  status code < 200 or status code >= 300\n */\nfunction checkResponseStatus(response, data) {\n\n    if (response.status < 200 || response.status >= 300) {\n        const error = new Error(response.statusText);\n        error.data = response;\n        if(data.payload){\n            error.payload = data.payload;\n        }\n        throw error;\n    }\n\n}\n\n/**\n * parse the response of  http request\n * @param response response object\n * @return {object} data parsed\n */\nasync function parseResponseData(response) {\n    //get response data type\n    const contentType = response.headers.get('Content-Type');\n    let data = null;\n    //parse the data by its type\n    if (contentType != null) {\n        if (contentType.indexOf('text') > -1) {\n            data = await response.text()\n        }\n        if (contentType.indexOf('form') > -1) {\n            data = await response.formData();\n        }\n        if (contentType.indexOf('video') > -1) {\n            data = await response.blob();\n        }\n        if (contentType.indexOf('json') > -1) {\n            data = await response.json();\n        }\n    }\n    else if (response != null) {\n        data = await response.text();\n    }\n    return data;\n}\n\n\n\n//object to export\nconst http = {\n    get,\n    post,\n    \"delete\" : deletes,\n    put,\n    postFile,\n    abortRequest,\n};\n\nexport default http;","import React from \"react\";\n\n/**\n * compotent main of page\n */\nconst Main = function(props){\n\n        return (\n            <div className=\"main-wrapper\">\n                {props.children}\n            </div>\n        );\n};\n\nexport default Main;","import React from \"react\";\n\n/**\n * component svg edit button\n * based on the 'confirm' flag the icon will change\n */\nconst EditButton = function ({confirm}) {\n    var output = <></>;\n    if(!confirm){//if the user is not editing\n        output = (<svg version=\"1.1\" id=\"edit-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t    viewBox=\"0 0 1000 1000\">\n            <path className=\"st-pencil\" d=\"M224,632.3l-81.6,225.3L367.7,776l0,0L833,310.7c39.4-39.4,39.9-103.3,0.7-142.9c-0.5-0.5-1-1-1.4-1.4\n            c-39.6-39.2-103.6-38.7-142.9,0.7L224,632.3L224,632.3z\"/>\n            <path className=\"st-pencil-border\" d=\"M367.7,776c-24-71.7-71.9-119.6-143.7-143.7\"/>\n            <path className=\"st-pencil\" d=\"M805.7,338c-24-71.7-71.9-119.6-143.7-143.7\"/>\n        </svg>);\n    }else{//if the user is editing\n        output = (\n            <svg version=\"1.1\" id=\"confirm-edit-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t            viewBox=\"0 0 1000 1000\">\n                <polyline className=\"st-confirm\" points=\"918,192.3 389.3,807.7 82,450 \"/>\n            </svg>\n        );\n    }\n    return output;\n};\n\nexport default EditButton;\n","import React, {useContext} from \"react\";\n\nimport {AppContext} from \"components/providers/appProvider\";\nimport EditButton from \"components/svg/editButton\";\n\n/**\n * this is the head component of page\n * @param props\n * @param \"menu_elements\" contains the list of menu-items\n */\n\n\nconst NavBar = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    \n    return (\n        <div className=\"navigation-wrapper\">\n\n            {/*background of the menu-bar*/}\n            <nav className=\"main-nav\">\n                {appConsumer.title}\n            </nav>\n            {props.children}\n\n        </div>\n    );\n}\n\nexport default NavBar;","import React, {useContext, useEffect} from 'react';\nimport {AppContext} from \"components/providers/appProvider\";\n\n\nconst Error = function () {\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    useEffect(() => {//not used yet\n\n        return () => {\n            //delete the error, so app can resume its work\n            appConsumer.setError(null);\n        }\n\n    });\n\n    //function to delete the error object in context\n    function handleOnRefresh(){\n        appConsumer.setError(null);\n    }\n    //function to return to previous page\n    function handleOnGoBack(){\n        window.history.back();\n        appConsumer.setError(null);\n    }\n\n\n    //console.dir(appConsumer.error);\n    let output;\n    //is a error from backend\n    if (appConsumer.error.payload) {\n        output = (\n            <>\n                <p>Error code:</p>\n                <p>{appConsumer.error.payload.statusCode}</p>\n                <p>Error name:</p>\n                <p>{appConsumer.error.payload.error}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.payload.message}</p>\n            </>\n        );\n    }\n\n    //is a error of other type\n    else {\n        output = (\n            <>\n                <p>Error name:</p>\n                <p>{appConsumer.error.name}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.message}</p>\n            </>\n        );\n    }\n\n    output = (\n        <div className=\"error-wrapper\" style={{textAlign: \"center\"}}>\n            {output}\n            <br/>\n            <button type=\"button\" onClick={handleOnGoBack}><u>return to previous page</u></button>\n            <br/>\n            <p>or</p>\n            <br/>\n            <button type=\"button\" onClick={handleOnRefresh}><u>refresh</u></button>\n\n        </div>\n    );\n\n    return output;\n\n}\n\n\nexport default Error;","import React, {useState, useRef} from 'react';\n\nimport NavBar from 'components/navigation/navBar';\nimport Main from 'components/main';\nimport Error from 'components/modules/error';\n\n//create a context object\nconst AppContext = React.createContext();\n\n/**\n * this is the component that include a context object that it can be access by all its children component\n */\nconst AppProvider = function (props) {\n\n    const user = {\n        image: <img className=\"face\" alt=\"profile\" src=\"https://placekitten.com/100/100\"/>,\n        name: \"Mario\",\n        surname: \"Rossi\"\n    };\n\n    //error\n    const [error, setError] = useState(null);\n\n    //title\n    const [title, setTitle] = useState(<div className=\"nav-elements\"> <h2 className=\"static-title\">HOME</h2> </div>);\n\n    const [projectName, setProjectName] = useState(\"\");\n\n    //preparate an object to be insertd into context\n    const contextObject ={\n        user,\n        error,\n        setError,\n        title,\n        setTitle,\n        projectName,\n        setProjectName\n    };\n\n\n    //if there isn't error\n    if (!error) {\n\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                {/*mount all components children*/}\n                {props.children}\n\n            </AppContext.Provider>\n        );\n    }\n    //if there is a error\n    else {\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                    <Error/>\n\n            </AppContext.Provider>\n        )\n    }\n\n\n}\n\nexport {AppContext, AppProvider};","import React, {useContext, useEffect} from \"react\";\n\nimport {AppContext} from \"components/providers/appProvider\";\n\n/**\n * this is home component\n */\nconst Home = function (props) {\n\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set title when component mounts\n    useEffect(() => {\n        appConsumer.setTitle(<div className=\"nav-elements\"> <h2 className=\"static-title\">HOME</h2> </div>);\n    },[])//run on component mount\n\n\n    return (\n        <>\n            <h1>\n                Systematic Literature Review manager\n            </h1>\n            <h2 style={{fontSize: 22, fontWeight: \"normal\"}}>the system right now allows you to</h2>\n            <ul style={{fontSize: 18, fontWeight: \"lighter\"}}>\n                <li>browse a list of prjects</li>\n                <li>add a new project</li>\n                <li>browse the list of papers on a project</li>\n                <li>search(from scopus) and add papers to a project</li>\n            </ul>\n            <h2 style={{fontSize: 22, fontWeight: \"normal\"}}>notes</h2>\n            <ul style={{fontSize: 18, fontWeight: \"lighter\"}}>\n                <li><i>the scopus search works partially(can't retrieve the description)</i>\n                    <ul><li style={{fontSize: 16}}><i>from Elsevier developer portal : \"The data available depends on your institutional subscriptions, and only when you're making calls from within your institutional network are you considered a subscriber\"</i></li></ul>\n                </li>\n                <li><i>the options don't affect the search, for now</i></li>\n            </ul>\n        </>\n    );\n\n\n\n\n};\n\nexport default Home;","import React, {useContext} from \"react\";\nimport { AppContext } from 'components/providers/appProvider'\n\n/*\n* this is the component that visualize user information box\n* */\nconst UserInfo = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return(\n            <div className=\"user\" >\n                {appConsumer.user.image}\n                <div className=\"user-info\">\n                    {appConsumer.user.name}\n                    <br/>\n                    {appConsumer.user.surname}\n                </div>\n            </div>\n    );\n};\n\nexport  default  UserInfo;","/**\n * this is the config file\n */\n\n\nconst config = {\n    //\"home\": \"https://crowdai-slr-api-dev.herokuapp.com/\",\n    \"home\": \"http://localhost:3000/\",\n    \"search\": \"search\",\n    \"scopus_search\": \"search-scopus\",\n    \"projects\": \"projects\",\n    \"papers\": \"papers\",\n    \"customPapers\": \"customPapers\",\n    \"menu_list\": [\n        {id: 4, content: \"home\", link: \"/\"},\n        {id: 5, content: \"my projects\", link: \"/projects\"},\n        {id: 6, content: \"account\", link: \"#\"}\n    ],\n    \"max_total_number_for_results\": 5000,\n    \"pdf_parse_server\": \"pdf\"\n\n\n\n\n};\n\nexport default config;\n","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst MenuButton = function (props) {\n\n    return (\n\n        <svg id=\"menu-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n             x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M214,482.1\"/>\n            <line className=\"st-t\" x1=\"172\" y1=\"482.1\" x2=\"172\" y2=\"482.1\"/>\n            <line className=\"st-m\" x1=\"500\" y1=\"482.1\" x2=\"500\" y2=\"482.1\"/>\n            <line className=\"st-b\" x1=\"828\" y1=\"482.1\" x2=\"828\" y2=\"482.1\"/>\n        </svg>\n    );\n};\n\nexport default MenuButton;\n","import React, {useContext} from \"react\";\n\n\n\n/**\n * component for covering the page\n */\nconst Cover = function ({cls, handler}) {\n    //get data from global context\n    return (\n        <div className={\"cover \" + cls} onClick={(e) => {handler(false)}}></div>\n    );\n};\n\nexport default Cover;","import React, {useState, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\n\nimport UserInfo from 'components/navigation/userInfo';\nimport config from 'config/index';\nimport MenuButton from 'components/svg/menuButton';\nimport Cover from 'components/modules/cover';\n\n/**\n *this is the side menu component\n */\nconst SideMenu = function (props) {\n\n    //bool to control the visualization of menu\n    const [shown, setShown] = useState(false);\n    const [firstTime, setFirstTime] = useState(true);\n\n\n    //function to open/close the menu\n    function handleToggleMenuButton() {\n        setShown(!shown);\n        setFirstTime(false);\n    }\n\n    //function to close the menu\n    function handleMenuBlur(e) {\n        setShown(false);\n    }\n\n    //change the class of element by menu state\n    var clsidemenu = \"modal side-menu up\";\n    var clsbutton = \"button-wrapper close\";\n\n    if (firstTime) {\n        clsidemenu = \"modal side-menu\"\n    }\n    if (shown) {\n        clsbutton = \"button-wrapper open\"\n        clsidemenu = \"modal side-menu down\"\n    }\n\n    return (\n        <div className=\"menu\">\n            <Cover cls={(shown) ? \"full-screen-transparent\" : \"\"} handler={handleMenuBlur}/>\n            <div className={clsbutton} onClick={handleToggleMenuButton}>\n                <MenuButton/>\n            </div>\n\n            <div className={clsidemenu} tabIndex={-1}>\n\n                {/*user info box*/}\n                <UserInfo/>\n                <PrintMenu handleMenuBlur={handleMenuBlur}/>\n\n            </div>\n        </div>\n    );\n\n};\n\n/**\n *internal component that is used only for print menu items\n */\nconst PrintMenu = function (props) {\n\n    let output = (\n        config.menu_list.map((element, index) => (\n                <div key={index}>\n                    <Link to={element.link} className=\"menu-option\"\n                          onMouseUp={props.handleMenuBlur}>{element.content}</Link>\n                </div>\n            )\n        )\n    );\n    return output;\n\n\n}\n\n\nexport default SideMenu;","import React, {useContext} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AppContext} from 'components/providers/appProvider';\n\n\nconst BreadCrumbs = function(props) {\n\n    //I split the pathname by '/' and remove empty strings\n    let path = props.location.pathname.split('/').filter(x => x);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //will contain the partial url\n    let href= \"/\"; \n    //array of JSX elements containing the links\n    let bc = [];\n\n    //I don't print ' > ' at the end if there's only one link\n    if(path.length === 0){\n        bc.push(<> </>);\n    }else{\n        bc.push(<Link key={0} to={href}>home<span> > </span></Link>);\n    }\n\n    //I iterate over the paths taking care of links\n    for(let i = 0; i < path.length; i++){\n\n        //avoids the path '/' and the trailing slash\n        if(href === \"/\"){\n            href += path[i];//I update the partial url\n        }else{\n            href += (\"/\" + path[i]);//I update the partial url\n        }\n        \n        //I check whether is the ID of a project \n        if(path[i-1] && path[i-1] === \"projects\"){\n            //I retrieve the project title from the context\n            bc.push(<Link key={i+1} to={href}>'{appConsumer.projectName}'</Link>);\n        }else{\n            bc.push(<Link key={i+1} to={href}>{path[i]}</Link>);\n        }\n\n        //I don't put ' > ' at the end\n        if(i < (path.length - 1)){\n            bc.push(<span key={i+9999}>{\" > \"}</span>);\n        }\n        \n    }\n    \n\n    return (\n        <div className=\"breadcrumbs\">{bc}</div>\n    );\n\n}\n\nexport default BreadCrumbs;\n","import http from 'utils/conn'\nimport config from 'config/index'\n\n/**\n * dao to get a projects list\n * @param queryData\n * @return {array[objects]}\n */\nasync function getProjectsList(queryData = \"\") {\n    let url = config.home + config.projects\n    let res = await http.get(url, queryData);\n    return res;\n\n\n}\n\n/**\n * dao to get a project\n * @param project_id\n * @return {Object} project requested\n */\nasync function getProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.get(url);\n    return res;\n}\n\n/**\n * dao to post a new project\n * @param bodyData\n * @return {Object} project created\n */\nasync function postProject(bodyData) {\n    let url = config.home + config.projects;\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putProject(project_id, bodyData) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deleteProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.delete(url);\n    return res;\n}\n\n\nconst projectsDao = {\n    getProjectsList,\n    getProject,\n    postProject,\n    putProject,\n    deleteProject,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectsDao};","import React from \"react\";\n\n/**\n * component svg loading-icon\n */\nconst LoadIcon = function (props) {\n\n    return (\n\n        <svg id=\"loading-icon\" className={props.class} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\n             y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <g>\n                <path id=\"loading-circle1\" d=\"\n                  M 500, 500\n                  m -160, 0\n                  a 160,160 0 1,0 320,0\n                  a 160,160 0 1,0 -320,0\n          \"/>\n                <path id=\"loading-circle2\" d=\"\n                  M 500, 500\n                  m -305, 0\n                  a 305,305 0 1,0 610,0\n                  a 305,305 0 1,0 -610,0\n          \"/>\n            </g>\n        </svg>\n    );\n};\n\nexport default LoadIcon;\n","import React from \"react\";\n\n/**\n * component svg close-btn\n */\nconst CloseButton = function (props) {\n\n    return (\n        <svg id=\"close-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 1000 1000\">\n        <line className=\"ln\" x1=\"134\" y1=\"866\" x2=\"866\" y2=\"134\"/>\n        <line className=\"ln\" x1=\"134\" y1=\"134\" x2=\"866\" y2=\"866\"/>\n        </svg>\n    );\n};\n\nexport default CloseButton;\n","import React, {useEffect, useState, useContext} from \"react\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport {projectsDao} from 'dao/projects.dao'\n\nimport CloseButton from 'components/svg/closeButton';\n\nimport { AppContext } from 'components/providers/appProvider'\n\n/**\n * this is the form for create or edit the project\n * @param props.project  project object if we want to update a old project\n * @param null if we want to create a new project\n */\nfunction ProjectForm(props) {\n\n    let yup = require('yup');\n\n    const [touc, setTouc] = useState(false);\n\n    const projectValidationSchema = yup.object().shape({\n        name: yup.string().required('please enter a title'),\n        description: yup.string().required('please enter a description')\n    });\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return (\n        <>\n        <Formik\n            initialValues={{ name: '', description:''}}\n            validationSchema={projectValidationSchema}\n            onSubmit={async (values, { setSubmitting }) => {\n                let bodyData = {name: values.name, description: values.description};\n                //call dao\n                let res = await projectsDao.postProject(bodyData);\n\n                //error checking\n                if(res.message){\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }else{\n                    props.history.push(\"/projects/\" + res.id);\n                }\n                setSubmitting(false);\n            }}\n            validateOnBlur={false}\n        >\n        {function ({ errors, touched, isSubmitting, setErrors, validateField, handleChange }) {\n            let output = \"\";\n            output = (<Form className=\"modal add-project\" style={{visibility: (!props.visibility) ? 'hidden' : '' }}>\n                <button type=\"button\" className=\"close-btn\" onClick={(e) => {\n                    props.setVisibility(!props.visibility);\n                }}><CloseButton/></button>\n                <br/>\n                <Field\n                    style={{borderBottom : (errors.name && touched.name) ? \"solid 1px #d81e1e\" : \"\"}}\n                    name=\"name\"\n                    type=\"text\" \n                    placeholder=\"Project Name\"\n                    onChange={(e) => {handleChange(e); validateField('name')}}/>\n                <br/>\n                <br/>\n                <Field\n                    style={{borderBottom : (errors.description && touched.description) ? \"solid 1px #d81e1e\" : \"\"}}\n                    name=\"description\"\n                    component=\"textarea\"\n                    placeholder=\"Project Description\"/>\n                <br/>\n                <button type=\"submit\" disabled={isSubmitting || \n                    ((errors.name && touched.name) ||\n                    (errors.description && touched.description))}>Add Project</button>\n            </Form>\n            );\n            return output;\n        }}\n        </Formik>\n\n       \n        </>\n    );\n\n\n}\n\n\nexport default ProjectForm;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport config from 'config/index';\n\n/**\n * this is the component for pagination\n * @param start offset of results\n * @param count number of element for page\n * @param totalResults the total number of results\n * @param path the path of current page\n * @return {*}\n * @constructor\n */\n\nconst Pagination = function({start, count, totalResults, path}) {\n\n    //set limit max of start\n    if(totalResults >config.max_total_number_for_results){\n        totalResults= config.max_total_number_for_results;\n    }\n    //prepare the correct link path for pagination\n    path = setStartAndCountInUrl(path);\n\n    let prev = \"\", next = \"\", firstPage = \"\", lastPage = \"\";\n    let listPage = [] ;\n    let separator = \"...\";\n    //number*2 of element in pagination\n    let paginationLength = 4;\n    //the page count start by 1.\n    let paged = Math.floor(start / count) + 1;\n    //get total page number\n    let totalPage = Math.ceil(totalResults / count);\n\n\n    //we need the pagination only the totalPage is major than 1\n    if (totalPage > 1) {\n\n        //if it isn't the first page, print the prev-page link\n        if (paged > 1) {\n            prev = (\n                <li>\n                    <Link className=\"prev-page\"\n                          to={path + \"start=\" + (((paged - 1) * count) > 0 ? ((paged - 2) * count) : 0) + \"&count=\" + count}>\n                        {\"<\"}\n                    </Link>\n                </li>\n            );\n        }\n        //if it isn't the last page, print the next-page link\n        if (paged < totalPage) {\n            next = (\n                <li>\n                    <Link className=\"next-page\" to={path + \"start=\" + (paged * count) + \"&count=\" + count}>\n                        {\">\"}\n                    </Link>\n                </li>\n            );\n        }\n\n        //if the first page  isn't include by regular listPage, print the first-page link\n        if (paged > paginationLength + 2) {\n            firstPage = (\n                <>\n                    <li>\n                        <Link className=\"first-page\" to={path + \"start=0&count=\" + count}>\n                            {\"1\"}\n                        </Link>\n                    </li>\n                    <li>\n                        <span>{separator}</span>\n                    </li>\n                </>\n            );\n        }\n\n        //if the last page  isn't include by regular listPage, print the last-page link\n        if (paged < totalPage - (paginationLength + 1)) {\n            lastPage = (\n                <>\n                    <li>\n                        <span>{separator}</span>\n                    </li>\n                    <li>\n                        <Link style={{display: \"inline-block\"}} className=\"last-page\"\n                              to={path + \"start=\" + ((totalPage - 1) * count) + \"&count=\" + count}>\n                            {totalPage}\n                        </Link>\n                    </li>\n                </>\n            );\n        }\n\n        //print the range of page link, the center is current paged\n        for (let i = paged - paginationLength; i <= paged + paginationLength; i++) {\n\n            //print only the i has a valid value\n            if (i > 0 && i <= totalPage) {\n\n                //if i isn't current page, print link\n                if (i !== paged) {\n\n                    listPage.push((\n                            <Link className=\"normal-page\" to={path + \"start=\" + ((i-1) * count) + \"&count=\" + count}>\n                                {i}\n                            </Link>\n                    ));\n                }\n                //if i is current page, print only text\n                else {\n                    listPage.push((\n                            <span className=\"current-page\">{paged}</span>\n                    ));\n                }\n\n            }\n        }\n\n\n    }\n\n    let output = (\n        <ul className=\"pagination\">\n            {prev}\n            {firstPage}\n            {listPage.map((element,index)=><li style={{display: \"inline-block\", margin: 10}} key={index}>{element}</li>)}\n            {lastPage}\n            {next}\n        </ul>\n    );\n    return output;\n};\n\n\n/**\n * internal function to prepare the path link for pagination\n * @param path\n * @return {*}\n */\n\nfunction setStartAndCountInUrl(path){\n\n    let url = window.location.href;\n    //get the queryString from url\n    let queryString = url.split(\"?\")[1];\n    //if it exists\n    if(queryString) {\n        //remove the part after # if it exists\n        queryString = queryString.split(\"#\")[0];\n\n        let newQueryString = \"\";\n        //split queryString in array of string\n        let arryQuery = queryString.split(\"&\");\n        for (let i = 0; i < arryQuery.length; i++) {\n            //check each queryElement\n            let parameterName = arryQuery[i].split(\"=\")[0];\n            //if it isn't start and count\n            if (parameterName !== \"start\" && parameterName !== \"count\") {\n                //add to the new queryString\n                newQueryString += arryQuery[i]+\"&\";\n            }\n        }\n        //create a new path whiteout start and count\n        path = path+\"?\"+newQueryString;\n    }\n    //if path doesn't contain any queryString\n    else {\n        path = path+\"?\";\n    }\n\n\n    return path;\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Pagination;","//need to parse query string of url\nimport queryString from 'query-string';\n\n//here are the common support function\n\n/**\n * compares two arrays of objects\n */\nfunction arrayOfObjectsEquals(a, b) {\n\n    if (a == null || b == null) {\n        return false;\n    }\n    if (a.length != b.length) {\n        return false;\n    }\n\n    a.sort();\n    b.sort();\n\n\n    for (var i = 0; i < a.length; ++i) {\n        if (JSON.stringify(a[i]) !== JSON.stringify(b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * checks if B is contained in A, using a key to check the inclusion\n * @param {array} a\n * @param {array} b\n * @param {string} key (object field)\n */\nfunction arrayOfObjectsContains(a, b, key) {\n\n    if (a == null || b == null) {\n        return false;\n    }\n    if (a.length == 0 || b.length == 0) {\n        return false;\n    }\n\n    //iterate over all elements of B and check if A contains it \n    //by checking wether and element in A has the same key as the selected B element(b[i])\n    for (let i = 0; i < b.length; ++i) {\n        //if doesn't contain the given element then it meand that the vector A doesn't include the vector B\n        if (!a.some(e => e[key] === b[i][key])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * converts the checkboxes object of the search form into parameters for the url\n */\nfunction searchCheckboxesToParams(checkboxes) {\n    var params = \"\";\n    Object.keys(checkboxes).forEach(key => {//I iterate over each field of the object\n        if (key !== \"years\") {//if it's not an year\n            if (checkboxes[key]) {//if it's a true flag\n                console.log(key)\n                params += \"&\" + key + \"=\" + checkboxes[key];\n            }\n        }\n        else {//if it's a year\n            if (checkboxes.years.length !== 0) {//if there are some years selected\n                params += \"&\" + queryString.stringify({\"years\": checkboxes.years}, {arrayFormat: 'comma'});\n            }\n        }\n    });\n    return params;\n}\n\n/**\n * this is  function to manipolate 2 url string\n * if first string ends with \"/\", removes \"/\".\n * then concate wite second string and return new string\n */\nfunction join(base, path) {\n    let newPath;\n    //if the last element is \"/\"\n    if (base.charAt(base.length - 1) === '/') {\n        newPath = base.slice(0, -1) + path;\n    }\n    else {\n        newPath = base + path;\n    }\n\n    return newPath;\n\n}\n\n/**\n *\n *\n * function to create string of query by queryObject\n * @param queryData query object\n * @return {string} query string\n */\nfunction createQueryStringFromObject(queryData) {\n\n    let queryString = \"?\";\n    //create a array of keys\n    let keys = Object.keys(queryData);\n    //concatenate the object.property\n    for (let i = 0; i < keys.length; i++) {\n        //I don't need to sort for the recently added sorting\n        if (queryData[\"orderBy\"] !== \"date_created\" || keys[i] !== \"sort\") {\n            queryString += keys[i] + \"=\" + encodeURIComponent(queryData[keys[i]]);\n            //if it isn't the last element, add symbol \"&\"\n            if (i !== (keys.length - 1)) {\n                queryString += \"&\";\n            }\n        }\n    }\n    return queryString;\n\n}\n\n\n/**\n * get element index of a object array by [key, value]\n * @param array to find\n * @param key to find\n * @param value to find\n * @return {number} index of element, -1 if didn't find\n */\nfunction getIndexOfObjectArrayByKeyAndValue(array, key, value) {\n    let index = -1;\n    for (let i = 0; i < array.length; i++) {\n        if (array[i][key] === value) {\n            index = i;\n            break;\n        }\n    }\n    return index;\n}\n\n\nexport {\n    arrayOfObjectsEquals,\n    arrayOfObjectsContains,\n    searchCheckboxesToParams,\n    join,\n    createQueryStringFromObject,\n    getIndexOfObjectArrayByKeyAndValue,\n\n};","import React from \"react\";\n\n/**\n * component svg options menu button\n */\nconst DeleteButton = function (props) {\n\n    return (\n\n        <svg version=\"1.1\" id=\"options-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t        viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M214,482.1\"/>\n            <line className=\"st-options\" x1=\"500\" y1=\"250\" x2=\"500\" y2=\"250\"/>\n            <line className=\"st-options\" x1=\"500\" y1=\"500\" x2=\"500\" y2=\"500\"/>\n            <line className=\"st-options\" x1=\"500\" y1=\"750\" x2=\"500\" y2=\"750\"/>\n        </svg>\n\n    );\n};\n\nexport default DeleteButton;","import React,{useState} from \"react\";\n\nimport OptionsButton from 'components/svg/optionsButton';\n\n/**\n * component side options\n * it needs a class for the styling,\n * an array of options,\n * the function that will handle the click on the option\n * and, if necessary, a target for the handler function\n */\nconst SideOptions = function ({cls, options, handler, target}) {\n\n    //this is used to display or hide the options of the menu\n    const [focused, setFocused] = useState(false)\n\n\n    return (\n        <div className={cls}>\n            <button type=\"button\" \n                    onBlur={(e) => \n                        //if the element is blurred then I hide it\n                        {if(focused){setFocused(false)}}} \n                    onMouseDown={(e) => //onMouseDown fires before onBlur\n                        //immediately after the button is clicked I toggle the menu\n                        {setFocused(!focused)}}>\n                <OptionsButton/>\n            </button>\n            <div style={{fontSize: (focused) ? \"12px\" : \"0px\", padding: (focused) ? \"2px\" : \"0px\", border: (focused) ? \"solid 1px #e8e8e8\" : \"solid 0px #e8e8e8\"}} className=\"options-list\">\n                \n                {options.map((element, index) => \n                    <div key={index} onMouseDown={(e) => handler(target, element)} className=\"option\">{element}</div>\n                )}\n                \n            </div>\n        </div>\n    );\n}\n\nexport default SideOptions;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\nimport queryString from 'query-string';\n\n\nimport {projectsDao} from 'dao/projects.dao';\nimport LoadIcon from 'components/svg/loadIcon';\nimport ProjectForm from 'components/forms/projectForm';\nimport Pagination from 'components/modules/pagination';\nimport {join} from 'utils/index';\nimport Cover from 'components/modules/cover';\nimport SideOptions from 'components/modules/sideOptions';\n\nimport {AppContext} from \"components/providers/appProvider\";\n\n/**\n *this component will show a projects list page\n */\n\nconst ProjectsList = function (props) {\n\n\n    //fetch data\n    const [projectsList, setProjectsList] = useState([]);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //bool to control the visualization of input form\n    const [toggleform, setToggleForm] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const queryData = createQueryData(props.location.search);\n\n\n    //set title when component mounts\n    useEffect(() => {\n        appConsumer.setTitle(<div className=\"nav-elements\"> <h2 className=\"static-title\">PROJECTS</h2> </div>);\n        //I remove any old project name that was previously saved\n        appConsumer.setProjectName(\"\");\n    },[]); //run on component mount\n\n    useEffect(() => {\n\n        //flag that represents the state of component\n        let mounted = true;\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            const res = await projectsDao.getProjectsList({orderBy: \"date_last_modified\", ...queryData});\n\n            //error checking\n            //if the component is still mounted and  is 404 error\n            if (mounted && res && res.message === \"Not Found\") {\n                setProjectsList([]);\n                setTotalResults(0);\n                //show the page\n                setDisplay(true);\n            }\n            //if the component is still mounted and  there are some other errors\n            else if (mounted && res && res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if the component is still mounted and  res isn't null\n            else if (mounted && res) {\n                //update state\n\n                //I put even first and then odd ones so I can display 2 columns with left-right flow \n                var even_projs = [];\n                even_projs = res.results.filter(function(element, index){ if( index % 2 ) return element;});\n                var odd_projs = [];\n                odd_projs = res.results.filter(function(element, index){ if( !(index % 2) ) return element;});\n\n                setProjectsList(odd_projs.concat(even_projs));\n                setTotalResults(res.totalResults);\n                //show the page\n                setDisplay(true);\n            }\n        };\n\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //set flag as unmounted\n            mounted = false;\n        };\n    }, [queryData.start, queryData.count]); //re-execute when these variables change\n\n\n    //handle to delete project\n    async function handleDelete(id){\n\n        console.log(\"deleting \" + id);\n        //call the dao\n        let res = await projectsDao.deleteProject(id);\n        //error checking\n        //if is other error\n        if (res && res.message) {\n            //pass error object to global context\n            appConsumer.setError(res);  \n        }\n        //if res isn't null\n        else if (res && res !== null) {\n            //create a new array without the project deleted\n            let newProjectsList = projectsList.filter((project)=>project.id !== id);\n            //update project list state\n            setProjectsList(newProjectsList);\n\n            alert(\"DELETED SUCCESSFULLY!\");\n        }\n    }\n\n\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n\n    else {\n\n        output = (\n            <div>\n                <Cover cls={toggleform ? \"full-screen\" : \"\"} handler={setToggleForm}/>\n                {/*print list of projects*/}\n                <PrintList projectsList={projectsList} path={props.match.url} handleDelete={handleDelete}/>\n                {/*set listId and continues value*/}\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults} path={props.match.url}/>\n\n                {/*print the input form to create/update the projects*/}\n                <ProjectForm visibility={toggleform} setVisibility={setToggleForm} history={props.history}/>\n                {/*button to show input form*/}\n                <button className=\"bottom-left-btn add-project-btn\" type=\"button\" value=\"toggle-insert-form\" \n                onClick={(e) => {\n                    setToggleForm(!toggleform);\n                }}>\n                    <div className=\"btn-title\">Add Project</div><div className=\"btn-icon\"> </div>\n                </button>\n            </div>\n        );\n\n    }\n\n    return output;\n\n\n};\n\n\n/**\n *  internal component only to print the list\n * @param projectsList projects list data\n * @param path current page url\n * @param handleDelete function to delete the project\n * */\nconst PrintList = function ({projectsList, path, handleDelete}) {\n\n    let sideOptions= [\"delete\"];\n\n    let maps;\n    //if list is empty, print a notice message\n    if (projectsList.length === 0) {\n        maps = (\n            <div>there aren't projects</div>\n        );\n    }\n    //if list isn't empty, print list of projects\n    else {\n        maps = (projectsList.map((element, index) =>\n                <div key={element.id} className=\"light-modal project-card\">\n                    <SideOptions options={sideOptions} handler={handleDelete} target={element.id} cls=\"card-options project-card-options\"/>\n                    <Link to={join(path, \"/\" + element.id)}>\n                        <h3>{element.data.name}</h3>\n                        <p className=\"description\">{element.data.description}</p>\n                        <div className=\"project-dates\">\n                            <p>{/*created on <i>{element.date_created.slice(0, 10)}</i>*/}</p>\n                            <p>last modified on <i>{(element.date_last_modified === element.date_created) ? \"never\" : element.date_last_modified.slice(0, 10)}</i></p> \n                        </div>\n                    </Link>\n                </div>\n        ));\n    }\n\n    let output =  (\n        <div className=\"project-cards-holder\">\n            {maps}\n        </div>\n    );\n\n    return output;\n\n};\n\n/**\n * internal function to prepare a object of queryData\n * @param query\n * @return object of queryData for the fetch\n */\nfunction createQueryData(query){\n\n    //set query params from queryString of url\n    let params = queryString.parse( query);\n    let count = params.count || 10;\n    let start = params.start || 0;\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    let queryData = {start, count};\n    return queryData;\n\n}\n\n\n\n\n\nexport default ProjectsList;","import http from 'utils/conn'\nimport config from 'config/index'\n\n/**\n * dao to search local papers\n * @param queryData\n * @return {array[objects]}\n */\nasync function search(queryData){\n    let url = config.home+config.search;\n\n        const res = await http.get(url, queryData);\n        return res;\n\n}\n\n/**\n * get a specific paper\n */\nasync function selectById(id){\n    let url = config.home + config.papers + \"/\" + id;\n\n    const res = await http.get(url);\n    return res;\n}\n\n\n\nconst paperDao = {\n    search,\n    selectById,\n    \"abortRequest\" : http.abortRequest\n}\n\n\n\nexport {paperDao};","import http from 'utils/conn'\nimport config from 'config/index'\n\n/**\n * dao to get a list of paper associated with a project\n * @param queryData\n * @return {array[objects]}\n */\nasync function getPapersList(queryData) {\n    let url = config.home + config.papers\n    const res = await http.get(url, queryData);\n    return res;\n\n}\n\n/**\n * dao to get a paper\n * @param paper_id\n * @return {Object} paper requested\n */\nasync function getPaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.get(url);\n}\n\n/**\n * dao to post a new paper\n * @param bodyData\n * @return {Object} project created\n */\nasync function postPaperIntoProject(bodyData) {\n    let url = config.home + config.papers;\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to post a new custom paper\n * @param bodyData\n * @return {Object} project created\n */\nasync function postCustomPaperIntoProject(bodyData) {\n    let url = config.home + config.customPapers;\n    return await http.post(url, bodyData);\n}\n\n\n/**\n * dao to put a old paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putPaper(paper_id, bodyData) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deletePaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.delete(url);\n}\n\n\nconst projectPapersDao = {\n    getPapersList,\n    getPaper,\n    postPaperIntoProject,\n    postCustomPaperIntoProject,\n    putPaper,\n    deletePaper,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectPapersDao};","import React from \"react\";\n\n/**\n * component svg close-btn\n */\nconst SelectTick = function (props) {\n\n    return (\n        <svg id=\"select-tick\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 1000 1000\">\n            <polyline className=\"st-tick\" points=\"918,192.3 389.3,807.7 82,450 \">\n                <animate attributeName=\"points\" dur=\"0.2s\" repeatCount=\"1\" fill=\"freeze\"\n                    from=\"500,600 400,700 200,750\"\n                    to=\"918,192.3 389.3,807.7 82,450 \"\n                />\n            </polyline>\n        </svg>\n    );\n};\n\nexport default SelectTick;\n","import React, {useState, useEffect} from \"react\";\n\nimport SelectTick from 'components/svg/selectTick';\n\nconst CheckBox = function ({ val, name, label, isChecked, handler }) {\n\n    let output = \"\";\n    const [tick, setTick] = useState(<></>);\n    useEffect(() => {\n        if(isChecked){\n            setTick(<SelectTick/>);\n        }else{\n            setTick(<></>)\n        }\n    }, [isChecked])\n\n    \n    output = (\n        <label className=\"checkbox-container\">\n            <input type=\"checkbox\" value={val} name={name} checked={isChecked} onChange={(e) => {console.log(\"clickekdkdkdkd\"); handler(e)}} />\n            <span className=\"checkmark\">{tick}</span>\n            <span className=\"name\">{label}</span>\n        </label>\n    );\n    return output;\n}\n\nexport default CheckBox;","import React from \"react\";\n\n/**\n * component svg close-btn\n */\nconst RadioTick = function (props) {\n\n    return (\n        <svg id=\"radio-tick\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t        viewBox=\"0 0 1000 1000\">\n            <circle className=\"st-circle\" cx=\"500\" cy=\"500\" r=\"375\">\n                <animate attributeName=\"r\" dur=\"0.2s\" repeatCount=\"1\" fill=\"freeze\"\n                                from=\"0\"\n                                to=\"375\"\n                />\n            </circle>\n        </svg>\n    );\n};\n\nexport default RadioTick;\n","import React, {useState, useEffect} from \"react\";\n\nimport RadioTick from 'components/svg/radioTick';\n\nconst RadioBox = function ({ label, name, val, isChecked , handler}) {\n\n    let output = \"\";\n    const [tick, setTick] = useState(<></>);\n    useEffect(() => {\n        if(isChecked){\n            setTick(<RadioTick/>);\n        }else{\n            setTick(<></>)\n        }\n    }, [isChecked])\n\n    output= (\n        <label className=\"radiobox-container\">\n        <input type=\"radio\" value={val} name={name} checked={isChecked} onChange={handler}/>\n        <span className=\"radiomark\">{tick}</span>\n        <span>{label}</span>\n        </label>\n    );\n    return output;\n}\n\nexport default RadioBox;","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst SearchButton = function (props) {\n\n    return (\n        <svg id=\"search-icon\" xmlns=\"http://www.w3.org/2000/svg\"\n             xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M626.9,644.3c-73.5,0-142.6-28.6-194.6-80.6s-80.6-121.1-80.6-194.6s28.6-142.6,80.6-194.6\n                c52-52,121.1-80.6,194.6-80.6c73.5,0,142.6,28.6,194.6,80.6c52,52,80.6,121.1,80.6,194.6s-28.6,142.6-80.6,194.6\n                S700.4,644.3,626.9,644.3z\"/>\n            <line className=\"st1\" x1=\"145.2\" y1=\"850.8\" x2=\"431.7\" y2=\"564.3\"/>\n        </svg>\n    );\n};\n\nexport default SearchButton;\n","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst SearchSimilarButton = function (props) {\n\n    return (\n        <svg id=\"similar-paper-search-icon\" xmlns=\"http://www.w3.org/2000/svg\" \n            xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <polyline className=\"st0-sps\" points=\"795.8,214 734.8,214 736.8,146 \t\t\"/>\n            <polyline className=\"st0-sps\" points=\"842.8,214 842.8,875.8 262.8,875.8 262.8,106 734.8,106 \t\t\"/>\n            <line className=\"st0-sps\" x1=\"842.8\" y1=\"214\" x2=\"734.8\" y2=\"106\"/>\n            <line className=\"st1-sps\" x1=\"350.8\" y1=\"198.9\" x2=\"644.8\" y2=\"198.9\"/>\n            <line className=\"st2-sps\" x1=\"346.8\" y1=\"385.4\" x2=\"752.8\" y2=\"385.4\"/>\n            <line className=\"st2-sps\" x1=\"544\" y1=\"485.9\" x2=\"752.8\" y2=\"485.9\"/>\n            <line className=\"st3-sps\" x1=\"346.8\" y1=\"485.9\" x2=\"544\" y2=\"485.9\"/>\n            <line className=\"st2-sps\" x1=\"575.9\" y1=\"586.4\" x2=\"752.8\" y2=\"586.4\"/>\n            <line className=\"st3-sps\" x1=\"346.8\" y1=\"586.4\" x2=\"575.9\" y2=\"586.4\"/>\n            <line className=\"st2-sps\" x1=\"555.5\" y1=\"686.9\" x2=\"752.8\" y2=\"686.9\"/>\n            <line className=\"st3-sps\" x1=\"346.8\" y1=\"686.9\" x2=\"555.5\" y2=\"686.9\"/>\n            <circle className=\"st4-sps\" cx=\"410.8\" cy=\"594.3\" r=\"171.7\"/>\n            <line className=\"st4-sps\" x1=\"111.2\" y1=\"894\" x2=\"289.4\" y2=\"715.7\"/>\n        </svg>\n        \n    );\n};\n\nexport default SearchSimilarButton;\n","import React, {useContext, useState} from \"react\";\nimport ClampLines from 'react-clamp-lines';\nimport {Link} from 'react-router-dom';\n\nimport CheckBox from \"components/forms/checkbox\";\nimport SideOptions from 'components/modules/sideOptions';\nimport {projectPapersDao} from 'dao/projectPapers.dao';\nimport {AppContext} from 'components/providers/appProvider'\n/**\n * prints the papers list of a local search on the fake database\n */\n/*\nconst PrintLocalSearchList = function ({papersList, handlePaperSelection}) {\n\n    let output = papersList.map((element, index) =>\n        <div key={element.id} className=\"paper-card\">\n            <CheckBox name={\"\"} label={\"\"} val={element.eid}  handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.data && element.data.title}</h3></Link>\n            <ClampLines\n                text={element.data && element.data.abstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n};\n*/\n\n/**\n * prints the results of a search on scopus\n */\nconst PrintScoupusSearchList = function ({papersList, handlePaperSelection, selectedEidList}) {\n\n    //side options\n    let sideOptions= [\"search similar\"];\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //handle for the side options\n    async function handleSideOptions(id, name){\n        if(name === \"delete\"){\n            console.log(\"deleting \" + id);\n            //call the dao\n            let res = await projectPapersDao.deletePaper(id);\n            //error checking\n            //if is other error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n\n                alert(\"DELETED SUCCESSFULLY!\");\n\n            }\n        }\n    }\n\n    let output = papersList.map((element, index) =>\n        <div key={index} className=\"paper-card\">\n            <CheckBox name={element.title} label={\"\"} val={element.eid}  isChecked ={selectedEidList.includes(element.eid)} handler={handlePaperSelection}/>\n            <SideOptions options={sideOptions} handler={handleSideOptions} target={element.id} cls=\"card-options paper-card-options\"/>\n            <Link to={\"#\"}><h3>{element.title}</h3></Link>\n            <div className=\"extra-info\">\n                <p className=\"authors\">{element.authors}</p>\n                <p className=\"eid\">{element.eid}</p>\n                <p className=\"date\">{element.year}</p>\n            </div>\n            <ClampLines\n                text={element.abstract}\n                lines={4}\n                ellipsis=\"...\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n};\n\n/**\n * prints a list of papers and handles their removal from the project\n */\n\nconst PrintPapersList = function ({papersList, location, history}) {\n\n    const [localPaperList, setLocalPaperList] = useState(papersList);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //side options\n    let sideOptions= [\"delete\", \"search similar\"];\n\n    //handle for the side options\n    async function handleSideOptions(id, name){\n        if(name === \"delete\"){\n            console.log(\"deleting \" + id);\n            //call the dao\n            let res = await projectPapersDao.deletePaper(id);\n            //error checking\n            //if is other error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n\n                alert(\"DELETED SUCCESSFULLY!\");\n                let newPapersList = localPaperList.filter((paper)=>paper.id !== id);\n                setLocalPaperList(newPapersList);\n            }\n        }\n    }\n\n    let output;\n    //if list is empty, print a notice message\n    if (localPaperList.length === 0) {\n        output = (\n            <div>there are no papers here, you can add new ones by searching</div>\n        );\n    }\n    //if list isn't empty, print list of papers\n    else {\n        output = (\n            localPaperList.map((element) =>\n                <div key={element.id} className=\"paper-card\">\n                    <SideOptions options={sideOptions} handler={handleSideOptions} target={element.id} cls=\"card-options paper-card-options\"/>\n                    <Link to={\"#\"}>\n                        <h3>{element.data.title}</h3>\n                    </Link>\n                    <div className=\"extra-info\">\n                        <p className=\"authors\">{element.data.authors}</p>\n                        <p className=\"eid\">{element.data.eid || element.data.doi}</p>\n                        <p className=\"date\">{element.data.year}</p>\n                    </div>\n                    <ClampLines\n                        text={element.data.abstract}\n                        lines={4}\n                        ellipsis=\"...\"\n                        className=\"paragraph\"\n                        moreText=\"more\"\n                        lessText=\"less\"\n                    />\n                </div>\n            )\n        );\n    }\n    return output;\n\n\n};\n\nexport  {PrintPapersList, PrintScoupusSearchList};","import React from \"react\";\n\n/**\n * component svg select arrow\n * 'focused' is a flag used for displaying a different shape\n */\nconst SelectArrow= function ({focused}) {\n    var from=\"\";\n    var to=\"\";\n    //I check if the upper component is focused and then I animate\n    if(focused){\n        from=\"90,295.5 500,704.5 910,295.5 \";\n        to=\"90,704.5 500,295.5 910,704.5 \";;\n    }else{\n        from=\"90,704.5 500,295.5 910,704.5 \";;\n        to=\"90,295.5 500,704.5 910,295.5 \";\n    }\n    return (\n    <svg version=\"1.1\" id=\"arrow-select\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n        viewBox=\"0 0 1000 1000\">\n            <polyline className=\"st-arrow-select\" points={from}>\n            <animate attributeType=\"XML\" id=\"ani-select-arrow\" attributeName=\"points\" from={from} to={to} begin=\"0s\" dur=\"0.2s\" repeatCount=\"1\" fill=\"freeze\" />\n            </polyline>\n        </svg>\n    );\n};\n\nexport default SelectArrow;\n\n","import React, {useState} from \"react\";\nimport SelectArrow from 'components/svg/selectArrow';\n\n\n/**\n * this component acts as an html <select>\n * it needs an array of options, the index of the selected one and the hadler to change the status of the upper component calling this one\n */\nconst Select = ({ options, selected, handler }) => {\n    \n    //this is useful for the animation\n    const [focused, setFocused] = useState(false);\n\n\n\n    function handleFocus(e){\n        //handle arrow animation and focus of menu\n        document.getElementById(\"ani-select-arrow\").beginElement();//trigger svg animation\n        setFocused(!focused);\n    }\n\n    var output = (\n        <div className=\"custom-select\">\n            <div className=\"selected\" tabIndex={-2} onBlur={handleFocus} onFocus={handleFocus}>{options[selected].label} <div className=\"arrow\"><SelectArrow focused={focused}/></div></div>\n            <div className=\"options-holder\" style={{fontSize: (!focused) ? '0px' : '15px', borderBottom: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderLeft: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderRight: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderTop:\"none\"}}>\n                {options.map((element, index) => (\n                <div key={index} data-value={index} className=\"option\" style={{padding: (!focused) ? '0px' : '2px' }} onMouseDown={handler}>\n                    {element.label}\n                </div>))}\n            </div>\n        </div>\n    );\n    return output;\n}\n\nexport default Select;","import React, {useState, useEffect} from \"react\";\n\n/**\n * component svg order arrow button\n@param {string} up [ASC or DESC]\n */\nconst OrderArrow= function ({display, up}) {\n\n    let output = \"\";\n\n    let from=\"\";\n    let to=\"\";\n\n    //I check where the arrow should point to(up or down) checking the 'up' flag passed by the parent component\n    if(up ===\"ASC\"){\n        from=\"371.7,293 500,165 628.3,293 \";\n        to=\"371.7,491.9 500,619.9 628.3,491.9 \";\n    }else{\n        from=\"371.7,491.9 500,619.9 628.3,491.9 \";\n        to=\"371.7,293 500,165 628.3,293 \";\n    }\n\n    const [destination, setDestination] = useState(to);\n\n    useEffect(() => {\n      setDestination(to);\n    }, [to])\n\n    if(display){\n        output = (\n            <svg version=\"1.1\" id=\"order-arrow\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 1000 1000\" >\n                <polyline className=\"st-order-arrow-head\" points=\"371.7,293 500,165 628.3,293 \" transform=\"matrix(1.5303008,0,0,1.5303008,-279.47582,-105.57059)\">\n                    <animate attributeType=\"XML\" id=\"ani-order-arrow\" attributeName=\"points\" from={from} to={destination} begin=\"0s\" dur=\"0.2s\" repeatCount=\"1\" fill=\"freeze\" />\n                </polyline>\n                <line className=\"st-order-arrow\" x1=\"485.67453\" y1=\"145.09268\" x2=\"485.67453\" y2=\"827.75989\"/>\n            </svg>\n        );\n    }\n    \n    return output;\n};\n\nexport default OrderArrow;","import React from \"react\";\n\n/**\n * component svg close-btn\n */\nconst RemoveButton = function (props) {\n\n    return (\n        <svg id=\"remove-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 1000 1000\">\n        <line className=\"rb\" x1=\"134\" y1=\"866\" x2=\"866\" y2=\"134\"/>\n        <line className=\"rb\" x1=\"134\" y1=\"134\" x2=\"866\" y2=\"866\"/>\n        </svg>\n    );\n};\n\nexport default RemoveButton;\n","import React, {useState, useEffect, useContext, useRef} from \"react\";\nimport {Link} from 'react-router-dom'\nimport ClampLines from 'react-clamp-lines';\nimport queryString from \"query-string\";\n\n\nimport {paperDao} from 'dao/paper.dao';\nimport {projectPapersDao} from 'dao/projectPapers.dao'\n\nimport CheckBox from \"components/forms/checkbox\";\nimport RadioBox from \"components/forms/radiobox\";\nimport LoadIcon from 'components/svg/loadIcon';\nimport SearchButton from 'components/svg/searchButton';\nimport SearchSimilarButton from 'components/svg/searchSimilarButton';\nimport {PrintScoupusSearchList} from 'components/papers/printPapersList';\nimport Select from 'components/forms/select';\nimport OrderArrow from 'components/svg/orderArrow';\nimport Pagination from \"components/modules/pagination\";\nimport CloseButton from 'components/svg/closeButton';\nimport RemoveButton from 'components/svg/removeButton';\n\nimport {AppContext} from 'components/providers/appProvider'\n\nimport {createQueryStringFromObject, getIndexOfObjectArrayByKeyAndValue, arrayOfObjectsContains, join} from 'utils/index';\n\n\n// Load the lodash build\nconst _ = require('lodash');\n\n//order options\nconst orderByOptions = [\n    {label: 'Title', value: 'title'},\n    {label: 'Date', value: 'date'}\n];\n\n//search by  options\nconst searchByOptions = [\n    {label: 'all', value: 'all'},\n    {label: 'author', value: 'author'},\n    {label: 'content', value: 'content'},\n    {label: 'adv. query', value: 'advanced'}\n];\n\n//year options\nconst startYear = 2017;\nconst endYear = new Date().getFullYear() + 2;\n//create a int array from startYear to endYear, then convert it to string array, after this concatenate with \"all\"\nconst yearOptions = [\"all\", ...(_.range(startYear, endYear).map(String))];\n\n\n/**\n * this is component form to search for the paper in project page\n * */\n\nconst SearchForm = function ({project_id, location, match, history}) {\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(true);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n\n    //set query params from url\n    let queryData = createQueryData(location.search);\n    //console.log(queryData);\n\n    //get the localStorage object\n    const storage = window.localStorage;\n    let selectedPapersListFromStorage;\n    if (!window.localStorage) {\n        console.log(\"the browser must be support localStorage\");\n    }\n    //if exists already this attribute in the local storage\n    if (storage.getItem(\"selectedPapersList\")) {\n        selectedPapersListFromStorage = JSON.parse(storage.getItem(\"selectedPapersList\"));\n    }\n    //if not exists, we create a new array\n    else {\n        selectedPapersListFromStorage = [];\n    }\n\n    // list of selected papers\n    const [selectedPapersList, setSelectedPapersList] = useState(selectedPapersListFromStorage);\n\n    //state for search form\n    const [keywords, setKeyWords] = useState(\"_\");\n    const [source, setSource] = useState({\"scopus\": true, \"googleScholar\": false, \"arXiv\": false});\n    const [searchBy, setSearchBy] = useState(\"all\");\n    const [year, setYear] = useState(\"all\");\n\n    //state for sorting arrow animation\n    const [up, setUp] = useState(queryData.sort);\n\n\n    useEffect(() => {\n        //flag that represents the state of component\n        let mounted = true;\n\n        //if the sorting parameter changes I update the status and trigger the SVG animation\n        if (up !== queryData.sort) {\n            setUp(queryData.sort);\n            if(document.getElementById(\"ani-order-arrow\")){\n                document.getElementById(\"ani-order-arrow\").beginElement();\n            }\n        }\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //update the values of state from url\n            setKeyWords(queryData.query);\n            setSource({\"scopus\": queryData.scopus, \"googleScholar\": queryData.googleScholar, \"arXiv\": queryData.arXiv});\n            setSearchBy(queryData.searchBy);\n            setYear(queryData.year);\n\n            //if there is queryString from URL\n            if (queryData.query !== \"\") {\n\n                setDisplay(false);\n\n                //always call the dao to search on scopus\n                let res = await paperDao.search(queryData);\n\n                //error checking\n                //if the component is still mounted and  is 404 error\n                if (mounted && res && res.message === \"Not Found\") {\n                    setPapersList([]);\n                    setTotalResults(0);\n                    //show the page\n                    setDisplay(true);\n                }\n                //if the component is still mounted and  there are some other errors\n                else if (mounted && res && res.message) {\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }\n                //if the component is still mounted and  res isn't null\n                else if (mounted && res) {\n                    //update state\n                    setPapersList(res.results);\n                    setTotalResults(res.totalResults);\n                    //show the page\n                    setDisplay(true);\n                }\n            }\n        };\n\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //set flag as unmounted\n            mounted = false;\n        };\n\n    }, [project_id, queryData.query, queryData.orderBy, queryData.searchBy, queryData.sort, queryData.year, queryData.start, queryData.count, queryData.scopus, queryData.googleScholar, queryData.arXiv]);  //re-execute when these variables change\n\n\n    /*\n     START OF 'RESULT PAPERS HANDLING' ########################################################\n     */\n\n    //handler for sort selection\n    function handleSelection(e) {\n        //get index\n        let index = parseInt(e.target.getAttribute('data-value'));\n        //get value by index\n        queryData.orderBy = orderByOptions[index].value;\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n\n    }\n\n    //handler for order selection(ASC|DESC)\n    function handelOrder(e) {\n\n        if (queryData.sort === \"ASC\") {\n            queryData.sort = \"DESC\";\n        }\n        else {\n            queryData.sort = \"ASC\";\n        }\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n\n    /*function to insert and remove the paper id from selected list*/\n    function handlePaperSelection(event) {\n\n        let newList;\n        //get eid\n        let eid = event.target.value;\n        //get ttitle\n        let title = event.target.name;\n        //if id is not included in the list yet\n        if (getIndexOfObjectArrayByKeyAndValue(selectedPapersList, \"eid\", eid) === -1) {\n            //create a copy of array\n            newList = [...selectedPapersList];\n            //insert into array\n            newList.push({\"eid\": eid, \"title\": title});\n\n        }\n        //if id already exists in the list\n        else {\n            //remove the  target paper from array\n            newList = selectedPapersList.filter(function (element) {\n                return element.eid !== eid;\n            });\n        }\n\n        //update array\n        setSelectedPapersList(newList);\n        //update array in local storage\n        storage.setItem(\"selectedPapersList\", JSON.stringify(newList));\n    }\n\n    /*function to select all papers*/\n    function selectAllPapers(event) {\n\n        let newList;\n\n        //if not all papers are selected yet\n        if (!arrayOfObjectsContains(selectedPapersList, papersList, \"eid\")) {\n\n            //I get the list of the papers in the current page\n            let allPapersInPage = papersList.map((paper) => {\n                return {\"eid\": paper.eid, \"title\": paper.title}\n            });\n            //and merge them with the previously selected ones\n            let tmpList = [...allPapersInPage, ...selectedPapersList];\n            newList = _.uniqBy(tmpList, 'eid');\n\n        }\n        //if all papers are selected, we need to remove them\n        else {\n            //I get the list of the papers in the current page\n            let allPapersInPage = papersList.map((paper) => {\n                return {\"eid\": paper.eid, \"title\": paper.title}\n            });\n            //I filter the selectedPapersList by removing the papers that are in the current page\n            newList = selectedPapersList.filter(x => !allPapersInPage.some(paper => paper.eid === x.eid));\n        }\n\n        //update array\n        setSelectedPapersList(newList);\n        //update array in local storage\n        storage.setItem(\"selectedPapersList\", JSON.stringify(newList));\n    }\n\n\n    /*function to add the post in the project*/\n    async function handleAddPapers(event) {\n\n        event.preventDefault();\n\n        if (selectedPapersList.length === 0) {\n            alert(\"the list is empty!\");\n        }\n        else {\n\n            //create a eidList from the list of selected paper\n            let arrayEid = selectedPapersList.map(element => element.eid);\n            //call dao\n            let res = await projectPapersDao.postPaperIntoProject({\n                \"arrayEid\": arrayEid, \"project_id\": project_id\n            });\n            //if there is the error\n            if (res && res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n                return null;\n            }\n\n            //empties the state\n            setSelectedPapersList([]);\n            //update the storage\n            storage.setItem(\"selectedPapersList\", JSON.stringify(selectedPapersList));\n            alert(\"insert completed\");\n        }\n\n    }\n\n    /*\n     END OF 'RESULT PAPERS HANDLING' ########################################################\n     */\n\n\n    /*function to send the query*/\n    async function handleSendSearch(event) {\n\n        event.preventDefault();\n\n        //if query input is empty\n        if (keywords === \"\") {\n            alert(\"search string is empty\")\n        }\n        else {\n            //synchronize the query data from react state hooks\n            queryData.query = keywords;\n            queryData.scopus = source.scopus;\n            queryData.googleScholar = source.googleScholar;\n            queryData.arXiv = source.arXiv;\n            queryData.searchBy = searchBy;\n            queryData.year = year;\n\n            //send query url\n            let queryString = createQueryStringFromObject(queryData);\n            //launch to search\n            history.push(queryString);\n\n        }\n\n    }\n\n    /**\n     *handle to update hook state by input change\n     */\n    function handleOnInputChange(event) {\n\n        let newSource;\n\n        switch (event.target.name) {\n            case \"query\":\n                setKeyWords(event.target.value);\n                break;\n            case \"scopus\":\n                //copy the old source\n                newSource = {...source};\n                //switch between true and false\n                newSource.scopus = !source.scopus;\n                setSource(newSource);\n                break;\n\n            case \"googleScholar\":\n                //copy the old source\n                newSource = {...source};\n                //switch between true and false\n                newSource.googleScholar = !source.googleScholar;\n                setSource(newSource);\n                break;\n            case \"arXiv\":\n                //copy the old source\n                newSource = {...source};\n                //switch between true and false\n                newSource.arXiv = !source.arXiv;\n                setSource(newSource);\n                break;\n            case \"searchBy\":\n                setSearchBy(event.target.value);\n                break;\n            case \"year\":\n                setYear(event.target.value);\n                break;\n            default:\n                break;\n        }\n\n\n    }\n\n    /*\n     #######################################\n     need to  create a new child component for the part of <form>, when we have more information on search options\n     ######################################\n     */\n    let formPart = (\n        <>{}\n            <form className={(queryData.query === \"\") ? 'search-form' : 'search-form small'}\n                  onSubmit={handleSendSearch}>\n                {/*search form*/}\n                <div style={{position: 'relative'}}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"search\"\n                        name=\"query\"\n                        value={keywords}\n                        onChange={handleOnInputChange}\n                    />\n                    <button className=\"go-search\" type=\"submit\" value=\"Submit\">\n                        <SearchButton/>\n                    </button>\n                    <Link to={\"/projects/\" + project_id + \"/searchsimilar\"}>\n                        <button className=\"go-similar\" type=\"button\">\n                            <SearchSimilarButton/>\n                        </button>\n                    </Link>\n                </div>\n\n                <div className=\"option-holder\">\n                    <label>Source:</label><br/>\n\n                    <div className=\"checkboxes-holder\">\n                        <CheckBox label=\"Scopus\" name=\"scopus\" val=\"\" isChecked={source.scopus}\n                                  handler={handleOnInputChange}/>\n                        <CheckBox label=\"Google Scholar\" name=\"googleScholar\" val=\"\" isChecked={source.googleScholar}\n                                  handler={handleOnInputChange}/>\n                        <CheckBox label=\"arXiv\" name=\"arXiv\" val=\"\" isChecked={source.arXiv}\n                                  handler={handleOnInputChange}/>\n                    </div>\n\n                    <label>Search by:</label><br/>\n\n                    <div className=\"checkboxes-holder\">\n                        <RadioBox label={searchByOptions[0].label} name=\"searchBy\" val={searchByOptions[0].value}\n                                  isChecked={searchBy === searchByOptions[0].value} handler={handleOnInputChange}/>\n                        <RadioBox label={searchByOptions[1].label} name=\"searchBy\" val={searchByOptions[1].value}\n                                  isChecked={searchBy === searchByOptions[1].value} handler={handleOnInputChange}/>\n                        <RadioBox label={searchByOptions[2].label} name=\"searchBy\" val={searchByOptions[2].value}\n                                  isChecked={searchBy === searchByOptions[2].value} handler={handleOnInputChange}/>\n                        <RadioBox label={searchByOptions[3].label} name=\"searchBy\" val={searchByOptions[3].value}\n                                  isChecked={searchBy === searchByOptions[3].value} handler={handleOnInputChange}/>\n                    </div>\n\n                    <label>Year:</label><br/>\n                    <div className=\"checkboxes-holder\">\n                        {\n                            yearOptions.map((singleYear, index) =>\n                                <RadioBox key={index} label={singleYear} name=\"year\" val={singleYear}\n                                          isChecked={year === singleYear} handler={handleOnInputChange}/>\n                            )\n                        }\n                    </div>\n                </div>\n\n            </form>\n        </>);\n\n\n    let resultPart = \"\";\n\n    //if is loading\n    if (display === false) {\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                <div className=\"paper-card-holder-head\"\n                     style={{pointerEvents: \"none\"}}>{/* this way the user cannot sort while loading the results */}\n                    <div className=\"select-all\">\n                        <CheckBox label=\"Select All\" name=\"select_all\" val=\"\" isChecked={false}\n                                  handler={selectAllPapers}/>\n                    </div>\n                    <div className=\"order\">\n                        <label>sort by:</label>\n                        <Select options={orderByOptions}\n                                selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\", queryData.orderBy)}\n                                handler={handleSelection}/>\n                        <button type=\"button\" onClick={handelOrder}><OrderArrow display={true} up={(queryData.sort)}/>\n                        </button>\n                    </div>\n                </div>\n                <SelectedPapersListBox selectedPapersList={selectedPapersList}/>\n                <div className=\"search-loading-holder\">\n                    <LoadIcon class={\"small\"}/>\n                </div>\n            </div>);\n    }\n\n    //if the search results list is empty\n    else if (papersList.length === 0 && queryData.query !== \"\") {\n        //the class is used only to workaround a small bug that display not found just as the search start before the loading icon\n        resultPart = (\n            <div className=\"not-found\"> not found :( </div>\n        );\n    }\n    else if (papersList.length > 0 && queryData.query !== \"\") {\n\n        //create a eidList from the list of selected paper\n        let arrayEid = selectedPapersList.map(element => element.eid);\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                <div className=\"paper-card-holder-head\">\n                    <div className=\"select-all\">\n                        <CheckBox label=\"Select All\" name=\"select_all\" val=\"\"\n                                  isChecked={arrayOfObjectsContains(selectedPapersList, papersList, \"eid\")}\n                                  handler={selectAllPapers}/>\n                    </div>\n                    <div className=\"order\">\n                        <label>sort by:</label>\n                        <Select options={orderByOptions}\n                                selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\", queryData.orderBy)}\n                                handler={handleSelection}/>\n                        <button type=\"button\" onClick={handelOrder}><OrderArrow display={true} up={(queryData.sort)}/>\n                        </button>\n                    </div>\n                </div>\n                <SelectedPapersListBox selectedPapersList={selectedPapersList}\n                                       handlePaperSelection={handlePaperSelection}/>\n\n                <PrintScoupusSearchList papersList={papersList} handlePaperSelection={handlePaperSelection}\n                                        selectedEidList={arrayEid}/>\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults}\n                            path={match.url}/>\n            </div>\n        );\n    }\n\n\n    let output = (\n        <>\n            {formPart}\n            <form className=\"search-results\" onSubmit={handleAddPapers}>\n                {resultPart}\n            </form>\n        </>\n    );\n\n    return output;\n};\n\n\n/**\n * internal component to print the box of list of selected paper\n */\nconst SelectedPapersListBox = function ({selectedPapersList, handlePaperSelection}) {\n\n    let output = \"\";\n    output = (\n        <div className=\"selected-papers-list\" style={{\n            opacity: (selectedPapersList.length > 0) ? \"1.0\" : \"0.0\",\n            pointerEvents: (selectedPapersList.length > 0) ? \"auto\" : \"none\"\n        }}>\n            <h3>\n                {\"SELECTED PAPERS\"} <br/><span>(total : {selectedPapersList.length})</span>\n            </h3>\n            <div className=\"submission-wrapper\">\n                <div className=\"papers-wrapper\" style={{border: (selectedPapersList.length > 0) ? \"\" : \"0px\"}}>\n                    <div className=\"papers-flex\" style={{padding: (selectedPapersList.length > 0) ? \"\" : \"0px\"}}>\n                        {selectedPapersList.map((element, index) =>\n                            <p key={index}>\n                                <span>{element.title}</span>\n                                <button type=\"button\" className=\"remove-btn\" name={element.title}\n                                        value={element.eid} //name and value don't work on the button event for some reasons\n                                        onClick={(e) => {\n                                            handlePaperSelection({target: {name: element.title, value: element.eid}})\n                                        }}>\n                                    <RemoveButton/>\n                                </button>\n                            </p>\n                        )}\n                    </div>\n                </div>\n                <button style={{\n                    border: (selectedPapersList.length > 0) ? \"\" : \"0px\",\n                    margin: (selectedPapersList.length > 0) ? \"\" : \"0px\",\n                    height: (selectedPapersList.length > 0) ? \"\" : \"0px\",\n                    pointerEvents: (selectedPapersList.length > 0) ? \"auto\" : \"none\"\n                }} className=\"ti-btn add-resultpaper-btn\" type=\"submit\" value=\"Submit\">\n                    <div className=\"btn-title\">Add Selected Paper</div>\n                    <div className=\"btn-icon\"></div>\n                </button>\n            </div>\n        </div>\n    );\n\n    return output;\n\n};\n\n\n/**\n * internal function to prepare a object of queryData\n * @param queryUrl\n * @return object of queryData for the fetch\n */\nfunction createQueryData(queryUrl) {\n\n\n    //set query params from queryString of url\n    let params = queryString.parse(queryUrl);\n    let query = params.query || \"\";\n\n    let searchBy = params.searchBy || \"all\";\n    let orderBy = params.orderBy || \"title\";\n    let sort = params.sort || \"ASC\";\n    let start = params.start || 0;\n    let count = params.count || 10;\n\n\n    let scopus;\n    if (params.scopus === undefined) {\n        scopus = true;\n    }\n    else {\n        scopus = (params.scopus === \"true\");\n    }\n\n    let googleScholar = (params.googleScholar === \"true\");\n    let arXiv = (params.arXiv === \"true\");\n\n    let year = params.year || \"all\";\n\n    let queryData = {query, searchBy, orderBy, sort, scopus, googleScholar, arXiv, year, start, count};\n\n    return queryData;\n\n}\n\n\nexport default SearchForm;","import http from 'utils/conn'\nimport config from 'config/index'\n\n/**\n * dao to post the file pdf to backend\n * @param data the file data\n * @return {objects}\n */\nasync function updatePdf(data) {\n    let url = config.home +config.pdf_parse_server;\n\n    let res = await http.postFile(url, data);\n    return res;\n\n}\n\n\nconst updateFileDao = {\n    updatePdf,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {updateFileDao};","import React from \"react\";\n\n/**\n * component svg go-btn\n */\nconst GoButton = function (props) {\n\n    return (\n        <svg id=\"go-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 1000 1000\">\n\n            <polyline\n            className=\"st1-go\"\n            points=\"371.7,481.9 500,609.9 628.3,481.9 \"\n            transform=\"matrix(0,-1.4834458,1.4856134,0,-92.453824,1228.1491)\"/>\n            <line\n            className=\"st0-go\"\n            x1=\"810.69312\"\n            y1=\"486.42624\"\n            x2=\"206.34099\"\n            y2=\"486.42624\"/>\n\n        </svg>\n    );\n};\n\nexport default GoButton;\n","import React, {useRef, useState} from \"react\";\nimport ClampLines from 'react-clamp-lines';\nimport {Link} from 'react-router-dom';\n\nimport CloseButton from 'components/svg/closeButton';\nimport GoButton from \"components/svg/goButton\";\nimport LoadIcon from \"components/svg/loadIcon\";\n\n/**\n * the search form component used for inserting the data relative to the paper we are searching for similar ones\n */\nconst SearchSimilarPapers = ({close, //the setter for closing the form when it's visible(sets the visibility to false)\n                                style, //style of the component\n                                project_id,\n                                input, //the string input\n                                handler, //handler for the string input\n                                paperInfo, //the data of the retrieved paper(should match the paper we are searching similarities for)\n                                fetching, //flag to control when the component is fetching the data related to the paper we are searching similarities for\n                                setPaperInfo, //sets the info of the paper we are searching similarites for\n                                setPaperFile, //handles the input of a file(when we upload a file instead os specifying the paper by a string)\n                                history\n                            }) => {\n    \n    let output = \"\";\n    let content = \"\";\n    let topRightButton = \"\";\n\n    //reference for the input file field\n    const inputElement = useRef(null);\n\n\n    //clicking the button will trigger the input file\n    const onButtonClick = () => {\n        inputElement.current.click();\n    };\n\n    async function handleSubmission(){\n        //if the user submits a paper I set the paperFile variable to its content so the main form can work with it\n        if(inputElement.current.files[0]){\n            setPaperFile(inputElement.current.files[0]);\n        }\n    }\n\n    //output\n    if(fetching){\n        content = (<div className=\"load-icon-similar-paper\"><LoadIcon/></div>);\n    }else if(paperInfo && paperInfo.title){\n        content = (\n            <>\n            <h3 className=\"similar-paper-title\">{paperInfo.title}</h3>\n            <ClampLines\n                text={paperInfo.abstract}\n                lines={4}\n                ellipsis=\"...\"\n                className=\"similar-paper-paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n            </>\n        );\n    }else{\n        content = (\n            <>\n                <p className=\"similar-description\">Search for Similar Papers</p>\n                <div className=\"DOI-holder\">\n                    <input\n                        type=\"text\"\n                        placeholder=\"type DOI, EID, or paper title\"\n                        value={input}\n                        onChange={handler}\n                        name=\"query\"\n                    />\n                    <button className=\"go-search DOI-btn\" type=\"submit\" value=\"Submit\">\n                        <GoButton/>\n                    </button>\n                </div>\n                <p className=\"or\">or</p>\n                <div className=\"file-input-container\">\n                    <input type=\"file\" id=\"real-input\" ref={inputElement} onChange={handleSubmission}/>\n                    <button type=\"button\" className=\"browse-btn\" onClick={onButtonClick}>\n                        Upload a Paper\n                    </button>\n                </div>\n            </>\n        );\n    }\n    if(paperInfo){\n        topRightButton = (\n            <button type=\"button\" className={\"close-btn red-x\"} onClick={(e) => {\n                setPaperInfo(undefined);//I delete the similar paper info\n                setPaperFile(undefined);//I delete its file\n                history.push({});\n            }}><CloseButton/></button>\n        );\n    }else{\n        topRightButton = (\n            <Link to={\"/projects/\"+ project_id + \"/search\"} ><button type=\"button\" className={\"close-btn\"}><CloseButton/></button></Link>\n        );\n    }\n    output = (\n        <div style={{...style}} className=\"light-modal similar-search-paper-upload\">\n            {topRightButton}\n            {content}\n        </div>\n    );\n    return output;\n}\n\nexport default SearchSimilarPapers;","import React, {useState, useEffect, useContext, useRef} from \"react\";\nimport {Link} from 'react-router-dom'\nimport ClampLines from 'react-clamp-lines';\nimport queryString from \"query-string\";\n\n\nimport {paperDao} from 'dao/paper.dao';\nimport {projectPapersDao} from 'dao/projectPapers.dao';\nimport {updateFileDao} from \"dao/updateFile.dao\";\n\nimport CheckBox from \"components/forms/checkbox\";\nimport RadioBox from \"components/forms/radiobox\";\nimport {PrintScoupusSearchList} from 'components/papers/printPapersList';\nimport Select from 'components/forms/select';\nimport Pagination from \"components/modules/pagination\";\nimport SearchSimilarPapers from \"components/forms/searchSimilarPapers\";\n\nimport OrderArrow from 'components/svg/orderArrow';\nimport LoadIcon from 'components/svg/loadIcon';\nimport SearchButton from 'components/svg/searchButton';\nimport RemoveButton from 'components/svg/removeButton';\nimport SearchSimilarButton from 'components/svg/searchSimilarButton';\n\nimport {AppContext} from 'components/providers/appProvider'\n\nimport {createQueryStringFromObject, getIndexOfObjectArrayByKeyAndValue, arrayOfObjectsContains} from 'utils/index';\n\n\n\n// Load the lodash build\nconst _ = require('lodash');\n\n//order options\nconst orderByOptions = [\n    {label: 'Title', value: 'title'},\n    {label: 'Date', value: 'date'}\n];\n\n\n//year options\nconst startYear = 2017;\nconst endYear = new Date().getFullYear() + 2;;\n//create a int array from startYear to endYear, then convert it to string array, after this concatenate with \"all\"\nconst yearOptions = [\"all\", ...(_.range(startYear, endYear).map(String))];\n\n\n/**\n * this is component form to search for the paper in project page\n * */\n\nconst SearchSimilarForm = function ({project_id, location, match, history}) {\n\n\n    //list of result papers data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to control the visualization of the results when fetching results data\n    const [display, setDisplay] = useState(true);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n\n    //set query params from url\n    let queryData = createQueryData(location.search);\n    //console.log(queryData);\n\n    //get the localStorage object\n    const storage = window.localStorage;\n    let selectedPapersListFromStorage;\n    let similarPaperDataFromStorage;\n    if (!window.localStorage) {\n        console.log(\"the browser must be support localStorage\");\n    }\n    \n    //if exists already this attribute in the local storage\n    if (storage.getItem(\"selectedPapersList\")) {\n        selectedPapersListFromStorage = JSON.parse(storage.getItem(\"selectedPapersList\"));\n    }\n    //if not exists, we create a new array\n    else {\n        selectedPapersListFromStorage = [];\n    }\n\n    //if exists already this attribute in the local storage\n    if (storage.getItem(\"similarPaperData\")) {\n        similarPaperDataFromStorage = JSON.parse(storage.getItem(\"similarPaperData\"));\n    }\n    //if not exists, we create a new array\n    else {\n        similarPaperDataFromStorage = null;\n    }\n\n    // list of selected papers\n    const [selectedPapersList, setSelectedPapersList] = useState(selectedPapersListFromStorage);\n\n    //state for search form\n    const [keywords, setKeyWords] = useState(\"\");\n    const [source, setSource] = useState({\"scopus\": true, \"googleScholar\": false, \"arXiv\": false});\n    const [year, setYear] = useState(\"all\");\n    const [similarPaperData, setSimilarPaperData] = useState(similarPaperDataFromStorage); //the data of the paper to search similarities for\n    const [similarPaperFile, setSimilarPaperFile] = useState(undefined); //the file of the paper to search similarities for\n\n    //state for sorting arrow animation\n    const [up, setUp] = useState(queryData.sort);\n\n    //state for 'similar papers search' form\n    const [similarFormVisibility, setSimilarFormVisibility] = useState(false);\n\n    //bool for target similar paper fetching\n    const [similarPaperFetch, setSimilarPaperFetch] = useState(false);\n\n\n    /*\n        START OF USEEFFECT FOR HANDLING QUERY PARAMETERS ###################################################\n    */\n\n    //effect for query parameters input\n    useEffect(() => {\n\n        let mounted = true;\n\n        console.log(queryData);\n        //if the sorting parameter changes I update the status and trigger the SVG animation\n        if(up !== queryData.sort){\n            setUp(queryData.sort);\n            if(document.getElementById(\"ani-order-arrow\")){\n                document.getElementById(\"ani-order-arrow\").beginElement();\n            }\n        }\n\n\n        //fetches data when searching for similarities\n        const fetchDataSimilarity = async () => {\n\n            let res = undefined;\n\n            //standard options parameters\n            setKeyWords(queryData.query);\n            setSource({\"scopus\": queryData.scopus, \"googleScholar\": queryData.googleScholar, \"arXiv\": queryData.arXiv});\n            setYear(queryData.year);\n\n            //if there's some data in storage\n            if(similarPaperData){\n                //open flag of loading\n                setDisplay(false);\n                //I call the dao for searching for similar papers based on similarPaperString\n                res = await paperDao.search({\"query\": \"Trento\"});\n                setPapersList(res.results);\n                //close flag of loading\n                setDisplay(true);\n            }else if(similarPaperFile){//if there's a file I can do an api call to search for papers similar to the file\n                \n                console.log(\"FILE NAME : \" + similarPaperFile.name)\n\n                //check file extension and its mine type\n                if(!/\\.(pdf|PDF)$/.test(similarPaperFile.name) || similarPaperFile.type.indexOf(\"application/pdf\") === -1){\n                    alert(\"the file must be a pdf\");\n                }\n                else{\n                    //open flag of loading\n                    setDisplay(false);\n                    setSimilarPaperFetch(true);\n                    console.log(\"FETCHING PARSE PDF\")\n                    //prepare the form data for post\n                    let formData = new FormData();\n                    formData.append('file', similarPaperFile);\n\n                    //call the dao\n                    console.log(\"CALLING THE PAPER PARSER SERVICE\")\n                    res = await updateFileDao.updatePdf(formData);\n    \n                    //if there is a error\n                    if (res && res.message) {\n                        //pass error object to global context\n                        alert(\"Error during parsing file\");\n                        setDisplay(true);\n                        setSimilarPaperFetch(false);\n                    }\n                    else{\n                        console.log(res);\n                        //set paperdata\n                        setSimilarPaperData(res);\n                        //display the paper data\n                        setSimilarPaperFetch(false);\n                    }\n    \n                    //I call the dao for searching for similar papers based on similarPaperString\n                    res = await paperDao.search({\"query\": \"Trento\"});\n                    setPapersList(res.results);\n                    //close flag of loading\n                    setDisplay(true);\n\n                }\n            }else if (queryData.query !== \"\") {\n\n                console.log(\"SIMILAR PAPER STRING : \" + queryData.query);\n\n                setDisplay(false);\n                \n                setSimilarPaperFetch(true);\n                //this will be the call to the service identifying a specific paper\n                let paperData = await paperDao.selectById(16);\n                setSimilarPaperData(paperData.data);\n                setSimilarPaperFetch(false);\n\n\n                //I call the dao for searching for similar papers based on similarPaperString\n                let res = await paperDao.search(queryData);\n\n                //error checking\n                //if is 404 error\n                if (res && res.message === \"Not Found\") {\n                    setPapersList([]);\n                    setTotalResults(0);\n                    //show the page\n                    setDisplay(true);\n                }\n                //if is other error\n                else if (res && res.message) {\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }\n                //if res isn't null\n                else if (res !== null) {\n                    //update state\n                    setPapersList(res.results);\n                    setTotalResults(res.totalResults);\n                    //show the page\n                    setDisplay(true);\n                }\n            }else{\n                console.log(\"no file (& no similarPaperString)\");\n            }\n\n        };\n\n\n        fetchDataSimilarity();\n\n        //when the component will unmount\n        return () => {\n            localStorage.removeItem(\"similarPaperData\");\n            mounted = false;\n        };\n\n    }, [project_id, similarPaperFile, queryData.query, queryData.orderBy, queryData.sort, queryData.year, queryData.start, queryData.count, queryData.scopus, queryData.googleScholar, queryData.arXiv]);  //re-execute when these variables change\n\n\n    /*\n        END OF USEEFFECT FOR HANDLING QUERY PARAMETERS #######################################################\n    */\n\n\n    //update local storage every time the similar paper data changes\n    useEffect(() => {\n        console.log(\"effecting\");\n        if(similarPaperData){\n            storage.setItem(\"similarPaperData\", JSON.stringify(similarPaperData));\n        }else{\n            storage.removeItem(\"similarPaperData\");\n        }\n    }, [similarPaperData])\n\n    /*handles the submission of a search */\n    function handleSendSearch(event) {\n\n        console.log(\"SUBMITTING SEARCH\");\n        if(event){\n            event.preventDefault();\n        }\n\n        console.log(\"similarity search was called\");\n        //if query input is empty\n        if (keywords === \"\" && !similarPaperFile) {\n            alert(\"similar paper string is empty\")\n        }\n        else {\n            //synchronize the query data from react state hooks\n            //if there isn't any file I search with the string\n            if(!similarPaperFile){\n                console.log(\"there isn't a file\")\n                queryData.query = keywords;\n            }else{\n                console.log(\"there's a file\")\n                queryData.query = \"\";\n            }\n            queryData.scopus = source.scopus;\n            queryData.googleScholar = source.googleScholar;\n            queryData.arXiv = source.arXiv;\n            queryData.year = year;\n\n            //send query url\n            let queryString = createQueryStringFromObject(queryData);\n            //launch to search\n            history.push(queryString);//this allows pushing the same data and refreshing the page with the hash router\n\n        }\n\n\n    }\n\n    /**\n     *handle to update hook state by input change on the form fields\n     */\n    function handleOnInputChange(event) {\n\n        let newSource;\n\n        switch (event.target.name) {\n            case \"query\":\n                setKeyWords(event.target.value);\n                break;\n            case \"scopus\":\n                //copy the old source\n                newSource = {...source};\n                //switch between true and false\n                newSource.scopus = !source.scopus;\n                setSource(newSource);\n                break;\n\n            case \"googleScholar\":\n                //copy the old source\n                newSource = {...source};\n                //switch between true and false\n                newSource.googleScholar = !source.googleScholar;\n                setSource(newSource);\n                break;\n            case \"arXiv\":\n                //copy the old source\n                newSource = {...source};\n                //switch between true and false\n                newSource.arXiv = !source.arXiv;\n                setSource(newSource);\n                break;\n            case \"year\":\n                setYear(event.target.value);\n                break;\n            default:\n                break;\n        }\n\n\n    }\n\n    /*\n     #######################################\n     need to  create a new child component for the part of <form>, when we have more information on search options\n     ######################################\n     */\n    let formPart = (\n        <>\n            <form className={(queryData.query === \"\" && !similarPaperFile && !similarPaperData) ? 'search-form' : 'search-form small'}\n                    style={{marginTop: (similarFormVisibility) ? \"30px\" : \"60px\"}}\n                    onSubmit={handleSendSearch}>\n                {/*search form*/}\n                \n                <SearchSimilarPapers style={{boxShadow: \"0px 0px 3px -1px rgba(0, 0, 0, 0.25)\"}}\n                    project_id={project_id}\n                    close={setSimilarFormVisibility} handler={handleOnInputChange} \n                    input={keywords} paperInfo={similarPaperData}\n                    fetching={similarPaperFetch} setPaperInfo={setSimilarPaperData}\n                    setPaperFile={setSimilarPaperFile}\n                    history={history}/>\n                \n                <div className=\"option-holder\">\n                    <label>Source:</label><br/>\n\n                    <div className=\"checkboxes-holder\">\n                        <CheckBox label=\"Scopus\" name=\"scopus\" val=\"\" isChecked={source.scopus}\n                                  handler={handleOnInputChange}/>\n                        <CheckBox label=\"Google Scholar\" name=\"googleScholar\" val=\"\" isChecked={source.googleScholar}\n                                  handler={handleOnInputChange}/>\n                        <CheckBox label=\"arXiv\" name=\"arXiv\" val=\"\" isChecked={source.arXiv}\n                                  handler={handleOnInputChange}/>\n                    </div>\n\n                    <label>Year:</label><br/>\n                    <div className=\"checkboxes-holder\" >\n                        {\n                            yearOptions.map((singleYear, index) =>\n                                <RadioBox key={index} label={singleYear} name=\"year\" val={singleYear}\n                                          isChecked={year === singleYear} handler={handleOnInputChange}/>\n                            )\n                        }\n                    </div>\n                </div>\n            </form>\n        </>);\n\n\n    let resultPart = \"\";\n\n     /*\n        START OF 'RESULT PAPERS HANDLING' ########################################################\n    */\n\n    //handler for sort selection\n    function handleSelection(e) {\n        //get index\n        let index = parseInt(e.target.getAttribute('data-value'));\n        //get value by index\n        queryData.orderBy = orderByOptions[index].value;\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n\n    }\n\n    //handler for order selection(ASC|DESC)\n    function handelOrder(e) {\n\n        if (queryData.sort === \"ASC\") {\n            queryData.sort = \"DESC\";\n        }\n        else {\n            queryData.sort = \"ASC\";\n        }\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n\n    /*function to insert and remove the paper id from selected list*/\n    function handlePaperSelection(event) {\n        let newList;\n        //get eid\n        let eid = event.target.value;\n        //get ttitle\n        let title = event.target.name;\n        //if id is not included in the list yet\n        if (getIndexOfObjectArrayByKeyAndValue(selectedPapersList, \"eid\", eid) === -1) {\n           //create a copy of array\n            newList = [...selectedPapersList];\n            //insert into array\n            newList.push({\"eid\": eid, \"title\": title});\n\n        }\n        //if id already exists in the list\n        else {\n            //remove the  target paper from array\n            newList = selectedPapersList.filter(function (element) {\n                return element.eid !== eid;\n            });\n        }\n\n        //update array\n        setSelectedPapersList(newList);\n        storage.setItem(\"selectedPapersList\", JSON.stringify(newList));\n    }\n\n    /*function to select all papers*/\n    function selectAllPapers(event) {\n        \n        let newList;\n        \n        //if not all papers are selected yet\n        if(!arrayOfObjectsContains(selectedPapersList, papersList, \"eid\")){\n            //I get the list of the papers in the current page\n            let allPapersInPage = papersList.map((paper) => {return {\"eid\" : paper.eid, \"title\" : paper.title}});\n            //and merge them with the previously selected ones\n            let tmpList = [...allPapersInPage, ...selectedPapersList];\n            newList = _.uniqBy(tmpList, 'eid');\n        }else{//otherwise\n            //I get the list of the papers in the current page\n            let allPapersInPage = papersList.map((paper) => {return {\"eid\" : paper.eid, \"title\" : paper.title}});\n            //I filter the selectedPapersList by removing the papers that are in the current page\n            newList = selectedPapersList.filter(x => !allPapersInPage.some(paper => paper.eid === x.eid));\n        }\n        \n        setSelectedPapersList(newList);\n\n        //update array in local storage\n        storage.setItem(\"selectedPapersList\", JSON.stringify(newList));\n    }\n\n    /*function to add the post in the project*/\n    async function handleAddPapers(event) {\n\n        event.preventDefault();\n        //console.log(selectedPapersList);\n\n       //create a eidList from the list of selected paper\n        let arrayEid = selectedPapersList.map(element => element.eid);\n        //call dao\n        let res = await projectPapersDao.postPaperIntoProject({\n            \"arrayEid\": arrayEid, \"project_id\": project_id\n        });\n        //if there is the error\n        if (res && res.message) {\n            //pass error object to global context\n            appConsumer.setError(res);\n            return null;\n        }\n\n        //empties the state\n        setSelectedPapersList([]);\n\n        //update the storage\n        storage.setItem(\"selectedPapersList\", JSON.stringify(selectedPapersList));\n\n        alert(\"insert completed\");\n\n    }\n\n    /*\n        END OF 'RESULT PAPERS HANDLING' ########################################################\n    */\n\n    //if is loading\n    if (display === false) {\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                <div className=\"paper-card-holder-head\" style={{pointerEvents: \"none\"}}>{/* this way the user cannot sort while loading the results */}\n                    <div className=\"select-all\">\n                    <CheckBox label=\"Select All\" name=\"select_all\" val=\"\" isChecked={false} handler={selectAllPapers}/>\n                    </div>\n                    <div className=\"order\">\n                        <label>sort by:</label>\n                        <Select options={orderByOptions}\n                                selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\", queryData.orderBy)}\n                                handler={handleSelection}/>\n                        <button type=\"button\" onClick={handelOrder}><OrderArrow display={true} up={(queryData.sort)}/></button>\n                    </div>\n                </div>\n                <SelectedPapersListBox selectedPapersList={selectedPapersList}/>\n                <div className=\"search-loading-holder\">\n                    <LoadIcon class={\"small\"}/>\n                </div>\n            </div>);\n    }\n\n    //if the search results list is empty\n    else if (papersList.length === 0 && (queryData.query !== \"\" || similarPaperFile || similarPaperData)) {\n        //the class is used only to workaround a small bug that display not found just as the search start before the loading icon\n        resultPart = (\n            <div className=\"not-found\"> not found :( </div>\n        );\n    }\n    else if (papersList.length > 0 && (queryData.query !== \"\" || similarPaperFile || similarPaperData)) {\n\n        //create a eidList from the list of selected paper\n        let arrayEid = selectedPapersList.map(element => element.eid);\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                <div className=\"paper-card-holder-head\">\n                    <div className=\"select-all\">\n                    <CheckBox label=\"Select All\" name=\"select_all\" val=\"\" isChecked={arrayOfObjectsContains(selectedPapersList, papersList, \"eid\")} handler={selectAllPapers}/>\n                    </div>\n                    <div className=\"order\">\n                        <label>sort by:</label>\n                        <Select options={orderByOptions}\n                                selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\", queryData.orderBy)}\n                                handler={handleSelection}/>\n                        <button type=\"button\" onClick={handelOrder}><OrderArrow display={true} up={(queryData.sort)}/></button>\n                    </div>\n                </div>\n                <SelectedPapersListBox selectedPapersList={selectedPapersList} handlePaperSelection={handlePaperSelection}/>\n\n                <PrintScoupusSearchList papersList={papersList} handlePaperSelection={handlePaperSelection} selectedEidList={arrayEid}/>\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults} path={match.url}/>\n            </div>\n        );\n    }\n\n\n    let output = (\n        <>\n            {formPart}\n            <form className=\"search-results\" onSubmit={handleAddPapers}>\n                {resultPart}\n            </form>\n        </>\n    );\n\n    return output;\n};\n\n\n/**\n * internal component to print the box of list of selected paper\n */\nconst SelectedPapersListBox = function ({selectedPapersList, handlePaperSelection}){\n\n    let output = \"\";\n    output = (\n        <div className=\"selected-papers-list\" style={{opacity: (selectedPapersList.length>0) ? \"1.0\" : \"0.0\", pointerEvents: (selectedPapersList.length>0) ? \"auto\" : \"none\"}}>\n            <h3>\n                {\"SELECTED PAPERS\"} <br/><span>(total : {selectedPapersList.length})</span>\n            </h3>\n            <div className=\"submission-wrapper\">\n                <div className=\"papers-wrapper\" style={{border: (selectedPapersList.length>0) ? \"\" : \"0px\"}}>\n                    <div className=\"papers-flex\" style={{padding: (selectedPapersList.length>0) ? \"\" : \"0px\"}}>\n                        {selectedPapersList.map((element, index) =>\n                            <p key={index}>\n                                <span>{element.title}</span> \n                                <button type=\"button\" className=\"remove-btn\" name={element.title} value={element.eid} //name and value don't work on the button event for some reasons\n                                    onClick={(e) => {handlePaperSelection({target: {name: element.title, value:element.eid}})}}>\n                                    <RemoveButton/>\n                                </button>\n                            </p>\n                        )}\n                    </div>\n                </div>\n                <button style={{border: (selectedPapersList.length>0) ? \"\" : \"0px\", margin: (selectedPapersList.length>0) ? \"\" : \"0px\", height: (selectedPapersList.length>0) ? \"\" : \"0px\", pointerEvents: (selectedPapersList.length>0) ? \"auto\" : \"none\"}} className=\"ti-btn add-resultpaper-btn\" type=\"submit\" value=\"Submit\">\n                    <div className=\"btn-title\">Add Selected Paper</div><div className=\"btn-icon\"> </div>\n                </button>\n            </div>\n        </div>\n    );\n\n    return output;\n\n};\n\n\n/**\n * internal function to prepare a object of queryData\n * @param queryUrl\n * @return object of queryData for the fetch\n */\nfunction createQueryData(queryUrl) {\n\n\n    //set query params from queryString of url\n    let params = queryString.parse(queryUrl);\n    let query = params.query || \"\";\n\n    let orderBy = params.orderBy || \"title\";\n    let sort = params.sort || \"ASC\";\n    let start = params.start || 0;\n    let count = params.count || 10;\n\n\n    let scopus;\n    if (params.scopus === undefined) {\n        scopus = true;\n    }\n    else {\n        scopus = (params.scopus === \"true\");\n    }\n\n    let googleScholar = (params.googleScholar === \"true\");\n    let arXiv = (params.arXiv === \"true\");\n\n    let year = params.year || \"all\";\n\n    let queryData = {query, orderBy, sort, scopus, googleScholar, arXiv, year, start, count};\n\n    return queryData;\n\n}\n\n\nexport default SearchSimilarForm;","import React, {useState, useEffect, useContext} from \"react\";\nimport queryString from \"query-string\";\n\nimport {projectPapersDao} from 'dao/projectPapers.dao';\n\nimport LoadIcon from 'components/svg/loadIcon';\nimport {PrintPapersList} from 'components/papers/printPapersList';\nimport Select from 'components/forms/select';\nimport OrderArrow from 'components/svg/orderArrow';\nimport Pagination from \"components/modules/pagination\";\nimport {createQueryStringFromObject, getIndexOfObjectArrayByKeyAndValue} from 'utils/index';\n\nimport {AppContext} from 'components/providers/appProvider'\n\n\n\n\n//order options\nconst orderByOptions = [\n    { value: 'date_created', label: 'Recently Added' },\n    { value: 'title', label: 'Title' },\n    { value: 'authors', label: 'Authors' }\n  ];\n\n/**\n * the local component that shows the papers list of a project\n */\nconst PapersList = ({project_id, location, match, history}) => {\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to show the pagination list\n    const [totalResults, setTotalResults] = useState(0);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const queryData = createQueryData(location.search);\n\n    const [up, setUp] = useState(queryData.sort);\n\n    useEffect(() => {\n\n        //flag that represents the state of component\n        let  mounted = true;\n\n        if(queryData.orderBy !== \"date_created\" && up !== queryData.sort){\n            setUp(queryData.sort);\n            document.getElementById(\"ani-order-arrow\").beginElement();\n        }\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            let res = await projectPapersDao.getPapersList({project_id, ...queryData});\n\n            //error checking\n            //if the component is still mounted and  is 404 error\n            if (mounted && res && res.message === \"Not Found\") {\n                setPapersList([]);\n                setTotalResults(0);\n                //show the page\n                setDisplay(true);\n            }\n            //if the component is still mounted and  there are some other errors\n            else if (mounted && res && res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if the component is still mounted and  res isn't null\n            else if (mounted && res) {\n\n                //update state\n                setPapersList(res.results);\n                setTotalResults(res.totalResults);\n                //show the page\n                setDisplay(true);\n            }\n\n        };\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //set flag as unmounted\n            mounted = false;\n        };\n    }, [queryData.start, queryData.count, queryData.sort, queryData.orderBy]); //re-execute when these variables change\n\n\n    //handler for sort selection\n    function handleSelection(e){\n        let index = parseInt(e.target.getAttribute('data-value'));\n\n        //if I previously ordered by 'most recent' then I sort the next order by ASC\n        if(queryData.orderBy === \"date_created\"){\n            queryData.sort = \"ASC\";\n        }\n        queryData.orderBy=orderByOptions[index].value;\n\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n    //handler for order selection(ASC|DESC)\n    function handelOrder(e){\n        //trigger svg animation\n        if(queryData.sort === \"ASC\"){\n            queryData.sort = \"DESC\";\n        }\n        else{\n            queryData.sort = \"ASC\";\n        }\n        //update url\n        let queryString = createQueryStringFromObject(queryData);\n        history.push(queryString);\n    }\n\n\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print loading image\n        output = (\n            <div className=\"paper-card-holder\">\n                <div className=\"order\" style={{pointerEvents: \"none\"}}>{/* this way the user cannot sort while loading the results */}\n                    <label>sort by:</label>\n                    <Select options={orderByOptions} selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\",queryData.orderBy)} handler={handleSelection}/>\n                    <button type=\"button\" onClick={handelOrder}><OrderArrow display={queryData.orderBy !== \"date_created\"} up={up}/></button>\n                </div>\n                <LoadIcon class={\"small\"}/>\n            </div> );\n    }\n    else {\n\n        output = (\n            <div className=\"paper-card-holder\">\n                <div className=\"order\">\n                    <label>sort by:</label>\n                    <Select options={orderByOptions} selected={getIndexOfObjectArrayByKeyAndValue(orderByOptions, \"value\", queryData.orderBy)} handler={handleSelection}/>\n                    <button type=\"button\" onClick={handelOrder}><OrderArrow display={queryData.orderBy !== \"date_created\"} up={up}/></button>\n                </div>\n                <PrintPapersList papersList={papersList} location={location} history={history}/>\n                <Pagination start={queryData.start} count={queryData.count} totalResults={totalResults} path={match.url}/>\n            </div>\n        );\n    }\n\n    output = (\n        <div className=\"papers-list\">\n            {output}\n        </div>\n    );\n\n    return output;\n\n};\n\n\n\n\n/**\n * internal function to prepare a object of queryData\n * @param query\n * @return object of queryData for the fetch\n */\nfunction createQueryData(query){\n\n    //set query params from queryString of url\n    let params = queryString.parse( query);\n    let count = params.count || 10;\n    let start = params.start || 0;\n    let orderBy = params.orderBy || \"date_created\";\n    let sort = params.sort || \"ASC\";\n\n    if(orderBy === \"date_created\"){\n        sort = \"DESC\";\n    }\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    let queryData = {orderBy, sort, start, count };\n    return queryData;\n\n}\n\n\n\nexport default PapersList;","import React, {useState, useEffect} from \"react\";\nimport SelectArrow from 'components/svg/selectArrow';\n\n\n/**\n * this component acts as an html <select>\n * it needs an array of options, the index of the selected one and the hadler to change the status of the upper component calling this one\n */\nconst Select = ({ options, form, name }) => {\n    \n\n    //this is useful for the animation\n    const [focused, setFocused] = useState(false);\n\n    //this keeps the selected option\n    const [selected, setSelected] = useState(0)\n\n    //this handle the selection setting the index of the selected option\n    function handler(e){\n        let index = parseInt(e.target.getAttribute('data-value'));\n        setSelected(index);\n    }\n\n    //this updates the field value for formik\n    useEffect(() => {\n        form.setFieldValue(name, options[selected].value);\n    }, [selected])\n\n    function handleFocus(e){\n        //handle arrow animation and focus of menu\n        document.getElementById(\"ani-select-arrow\").beginElement();//trigger svg animation\n        setFocused(!focused);\n    }\n\n    var output = (\n        <div className=\"custom-select\">\n            <div className=\"selected\" tabIndex={-2} onBlur={handleFocus} onFocus={handleFocus}>{options[selected].label} <div className=\"arrow\"><SelectArrow focused={focused}/></div></div>\n            <div className=\"options-holder\" style={{fontSize: (!focused) ? '0px' : '15px', borderBottom: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderLeft: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderRight: (!focused) ? \"0px solid #d7d7d7\" : \"1px solid #d7d7d7\", borderTop:\"none\"}}>\n                {options.map((element, index) => (\n                <div key={index} data-value={index} className=\"option\" style={{padding: (!focused) ? '0px' : '2px' }} onMouseDown={handler}>\n                    {element.label}\n                </div>))}\n            </div>\n        </div>\n    );\n    return output;\n}\n\nexport default Select;","import React, {useEffect, useState, useContext} from \"react\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport {projectPapersDao} from 'dao/projectPapers.dao'\n\nimport Select from 'components/forms/selectformik';\n\nimport { AppContext } from 'components/providers/appProvider'\n\n//order options\nconst paperType = [\n    { value: 'article', label: 'Article' },\n    { value: 'book_chapter', label: 'Book Chapter' },\n    { value: 'conf_publication', label: 'Conf. Publication' }\n  ];\n\n/**\n * this is the form for create or edit the paper\n * @param props.projectId  relative project where we will insert the paper\n */\nfunction PaperForm(props) {\n\n    let yup = require('yup');\n    const uuid = require(\"uuid\");\n\n    //validation schema for form\n    const paperValidationSchema = yup.object().shape({\n        title: yup.string().required('please enter a title'),\n        authors: yup.string().required('please enter an author'),\n        year: yup.number().required('please enter a year').min(1000).max(new Date().getFullYear() + 1).integer(),\n        //document_type: yup.string().required('please enter a paper type'),\n        abstract: yup.string().required('please enter the abstract')\n    });\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return (\n        <>\n        <Formik\n            initialValues={{\n                title: (props.customPaper && props.customPaper.title) || '',\n                authors: (props.customPaper && props.customPaper.authors) || '',\n                year: (props.customPaper && props.customPaper.year) || '',\n                abstract: (props.customPaper && props.customPaper.abstract) || '',\n                //it is not present in pdf parse service\n                document_type: (props.customPaper && props.customPaper.document_type) || '',\n                doi: (props.customPaper && props.customPaper.doi) || \"\"\n            }}\n            validationSchema={paperValidationSchema}\n            onSubmit={async (values, { setSubmitting }) => {\n                //if doi is not specified I set it as empty string\n                if(values.doi === undefined){\n                    values.doi = \"\";\n                }\n                const paperData = {...values, \n                    year: values.year.toString(), \n                    source_title: values.title, \n                    link: \"custom_paper\", \n                    source: \"slr_custom_papers\", \n                    abstract_structured: \"0\",\n                    filter_oa_include: \"0\",\n                    filter_study_include: \"0\",\n                    notes: \"\",\n                    //data necessary for identifying custom papers\n                    manual: \"true\"}\n                console.log(paperData);\n                \n                let res = await projectPapersDao.postCustomPaperIntoProject({\n                    paper: paperData, project_id: props.projectId\n                });\n                //error checking\n                if (res && res.message) {\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }else{\n                    props.history.push(props.url);\n                }\n                setSubmitting(false);\n            }}\n            validateOnBlur={false}\n        >\n        {({ errors, touched, isSubmitting }) => (\n            <Form className=\"new-paper-form\">\n                <Field\n                    style={{borderBottom: (errors.title && touched.title) ? \"1px solid #d81e1e\" : \"\"}}\n                    id=\"title\"\n                    name=\"title\"\n                    type=\"text\" \n                    placeholder=\"Paper Title\"/>\n                <div className=\"new-paper-form-ad\">\n                    <div className=\"author-year\">\n                        <Field\n                            style={{borderBottom: (errors.authors && touched.authors) ? \"1px solid #d81e1e\" : \"\"}}\n                            name=\"authors\"\n                            type=\"text\" \n                            placeholder=\"paper author\"/>\n                        <Field \n                            style={{borderBottom: (errors.year && touched.year) ? \"1px solid #d81e1e\" : \"\"}}\n                            name=\"year\"\n                            type=\"number\"\n                            placeholder=\"year\"/>\n                    </div>\n                    <div className=\"type-doi\">\n                        <Field\n                            name=\"document_type\"\n                            render={({ field, form }) => (\n                                    <Select options={paperType} {...field} form={form}/>\n                            )}\n                        />\n                        <Field \n                            name=\"doi\"\n                            type=\"text\"\n                            placeholder=\"DOI(optional)\"/>\n                    </div>\n                </div>\n                <Field\n                    style={{borderBottom: (errors.abstract && touched.abstract) ? \"1px solid #d81e1e\" : \"\"}}\n                    name=\"abstract\"\n                    placeholder=\"Paper Abstract\"\n                    component=\"textarea\"/>\n                <button type=\"submit\" disabled={isSubmitting ||\n                    (errors.title && touched.title) ||\n                    (errors.authors && touched.authors) ||\n                    (errors.year && touched.year) ||\n                    (errors.abstract && touched.abstract)\n                }>Add paper</button>\n            </Form>\n        )}\n        </Formik>\n        </>\n    );\n\n\n}\n\n\nexport default PaperForm;","import React, {useEffect, useState, useRef} from \"react\";\nimport PaperForm from 'components/forms/custompaper';\nimport LoadIcon from \"components/svg/loadIcon\";\n\nimport {updateFileDao} from \"dao/updateFile.dao\";\n\nfunction CustomPaperPage({projectId, url, history}) {\n\n\n    const [paperDataFetch, setPaperDataFetch] = useState(false);\n    const [paperData, setPaperData] = useState(undefined);\n    const [displayForm, setDisplayForm] = useState(false);\n\n    //reference for the input file field\n    const inputElement = useRef(null);\n\n    async function handleSubmission(){\n\n        //get the file object\n        let file = inputElement.current.files[0];\n        //if this file exist\n        if(file){\n\n            //check file extension and its mine type\n            if(!/\\.(pdf|PDF)$/.test(file.name) || file.type.indexOf(\"application/pdf\") === -1){\n                alert(\"the file must be a pdf\");\n            }\n            else{\n                //open flag of loading\n                setPaperDataFetch(true);\n\n                //prepare the form data for post\n                let formData = new FormData();\n                formData.append('file', file);\n\n                //call the dao\n               let res = await updateFileDao.updatePdf(formData);\n\n               //if there is a error\n                if (res && res.message) {\n                    //pass error object to global context\n                    alert(\"Error during parsing file\");\n                   \n                }\n                else{\n                    //set paperdata\n                    setPaperData(res);\n                    //display the form\n                    setDisplayForm(true);\n                }\n\n                //close flag of loading\n                setPaperDataFetch(false);\n\n            }\n        }\n    }\n\n    let output = \"\";\n\n    if(!displayForm && !paperDataFetch){\n        output = (\n            <div className=\"new-paper-page-wrapper\">\n                <div>\n                    <div className=\"file-input-container\">\n                        <input type=\"file\"name =\"file\" id=\"real-input\" ref={inputElement} onChange={handleSubmission}/>\n                        <button type=\"button\" className=\"browse-btn\" onClick={() => {inputElement.current.click();}}>\n                            Upload a Paper\n                        </button>\n                    </div>\n                        or<br/>\n                    <button type=\"button\"\n                        onClick={() => {setDisplayForm(true)}}\n                    >insert data manually</button>\n                </div>\n            </div>\n        );\n    }else if(paperDataFetch){\n        output = (\n            <div className=\"new-paper-page-wrapper\">\n                <div className=\"file-input-container\">\n                    <input type=\"file\" id=\"real-input\"/>\n                    <button type=\"button\" className=\"browse-btn\">\n                        <LoadIcon/>\n                    </button>\n                </div>\n                    or<br/>\n                <button type=\"button\"\n                    onClick={() => {/* reset connection to api if necessary */ setPaperDataFetch(false); setDisplayForm(true);}}\n                >abort and insert data manually</button>\n            </div>\n        );\n    }else{\n        output = (\n            <PaperForm projectId={projectId} url={url} history={history} customPaper={paperData}/>\n        );\n    }\n\n    return output;\n\n}\n\n\nexport default CustomPaperPage;","import React, {useState} from \"react\";\n\nimport {AppContext} from \"components/providers/appProvider\";\nimport EditButton from \"components/svg/editButton\";\n\n/**\n * this is the description component for the project page\n */\n\n\nconst ProjectDescription = function({description, update, date_last_modified, date_created}){\n\n\n    //this is used as a toggle for checking if the user is trying to edit the name of the project\n    const [editing, setEditing] = useState(false);\n\n    //handles the click on the edit/confirm button\n    function handleEditRequest(e){\n        console.log(\"CLICK\");\n        if(!editing){//if the user was not editing I allow him to edit\n            setTimeout(//I wait for the button event to fire before blurring out the textarea\n                function(){\n                    document.getElementById(\"edit-project-description-input\").focus();\n                },100);\n            \n            setEditing(true);\n            console.log(editing)\n        }else{//if the user was editing I submit its changes\n            update();\n        }\n    }\n\n    //format the date string\n    function formatDate(date){\n        return <span className=\"date\">{date.slice(0,10)} at {date.slice(11,19)}</span>\n    }\n\n\n    return (\n        <div className={(!editing) ? \"project-description hidden-form-description\" : \"project-description\"}>\n            <h2>Description:</h2>\n            <p style={{fontSize: (editing) ? \"0px\" : \"15px\"}}> {description}</p>\n            <form className=\"edit-project-description\" style={{height:(editing) ? \"\" : \"0px\"}}>\n                    <textarea id=\"edit-project-description-input\"  defaultValue={description} style={{width: (editing) ? \"100%\" : \"0%\", padding: (editing) ? \"\" : \"0px\", height:(editing) ? \"\" : \"0px\"}}\n                    onBlur={(e) => {\n                                    console.log(\"blurring\");\n                                    setEditing(false);\n                                }}\n                    />\n                    <button className=\"edit-button\" onMouseDown={handleEditRequest} type=\"button\">\n                        <EditButton confirm={editing}/>\n                    </button>\n            </form>\n            <h2>Additional info:</h2>\n            <p className=\"project-date-info\"> <span>Created</span> {formatDate(date_created)} </p>\n            <p className=\"project-date-info\"> <span>Last edited</span> {formatDate(date_last_modified)} </p>\n        </div>\n    );\n}\n\nexport default ProjectDescription;","import React, {useContext,useState,useEffect} from \"react\";\n\nimport EditButton from \"components/svg/editButton\";\n\n/**\n * this is the head component of page\n * @param \"menu_elements\" contains the list of menu-items\n */\n\n\nconst ProjectName = function({name, update}){\n\n    //this is used as a toggle for checking if the user is trying to edit the name of the project\n    const [editing, setEditing] = useState(false);\n\n    //checks if there's an edit request\n    function handleEditRequest(e){\n        if(!editing){//if the user is not editing the name yet(the check is useful because handleEditRequest and handleConfirm fire at the same time)\n            document.getElementById(\"edit-project-name-input\").focus();\n            setEditing(!editing);\n        }\n    }\n\n    //checks if the user wants to confirm the change\n    function handleConfirm(e){\n        if(editing){//if the user was editing I confirm its request and call the api(the check is useful because handleEditRequest and handleConfirm fire at the same time)\n            update();\n            setEditing(!editing);\n        }\n    }\n\n    return(\n        <div className={(editing) ? \"nav-elements\" : \"nav-elements hidden-form\"}> <h2 style={{fontSize: (editing) ? \"0px\" : \"21px\"}}>{name}</h2> \n            {/*clicking on the div containing the title will allow the user to access the form for editing the project name*/}\n            <form className=\"edit-project-name\"  onClick={handleEditRequest} onSubmit={(e) => {e.preventDefault()}}>\n                <input type=\"text\" id=\"edit-project-name-input\" defaultValue={name} style={{width: (editing) ? \"\" : \"0px\", padding: (editing) ? \"\" : \"0px\"}}\n                    onBlur={(e) => {setEditing(false)}}\n                />\n                <button className=\"edit-button\" onMouseDown={handleConfirm} type=\"button\"><EditButton confirm={editing}/></button>\n                {/*clicking on the button will confirm the new name*/}\n            </form>\n        </div>\n    );\n}\n\nexport default ProjectName;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Route, Link, Switch} from 'react-router-dom';\nimport {Flipper, Flipped} from 'react-flip-toolkit';\n\nimport SearchForm from 'components/forms/searchform';\nimport SearchSimilarForm from 'components/forms/searchSimilarForm';\nimport PapersList from 'components/papers/papersList';\nimport CustomPaperPage from 'components/papers/customPaperPage';\nimport {projectsDao} from 'dao/projects.dao';\nimport LoadIcon from 'components/svg/loadIcon';\nimport ProjectDescription from 'components/projects/projectDescription';\nimport ProjectName from 'components/projects/projectName';\nimport {join} from 'utils/index';\n\nimport {AppContext} from 'components/providers/appProvider'\n\n\n/**\n *this component will show a projects page\n */\nconst ProjectPage = (props) => {\n\n    //project object of page\n    const [project, setProject] = useState({data: {name: \"loading...\"}});\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //notFound state for hiding the navbar\n    const [notFound, setNotFound] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    const project_id = props.match.params.id;\n\n    //set the project title\n    useEffect(() => {\n        if(project.data.name === \"loading...\"){\n            appConsumer.setTitle(<div className=\"nav-elements\"> <h2 className=\"static-title\">{project.data.name}</h2> </div>);//I set the page title\n        }else{\n            appConsumer.setTitle(<ProjectName name={project.data.name} update={updateProject}/>);\n            appConsumer.setProjectName(project.data.name);\n        }\n    \n    }, [project]);\n\n    useEffect(() => {\n\n        //flag that represents the state of component\n        let mounted = true;\n\n        setDisplay(false);\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            console.log(\"fetch project page\");\n\n            //call the dao\n            let res = await projectsDao.getProject(project_id);\n\n            //error checking\n            //if the component is still mounted and there is some other errors\n            if (mounted && res && res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if the component is still mounted and res isn't null\n            else if (mounted && res ) {\n                //update state\n                setProject(res);\n                //show the page\n                setDisplay(true);\n            }\n        };\n        fetchData();\n        //when the component will unmount\n        return () => {\n\n            //set flag as unmounted\n            mounted = false;\n        };\n    }, [project_id]); //re-execute when these variables change\n    \n\n    //function for updating the description and name\n    async function updateProject(){\n\n        let new_name = document.getElementById(\"edit-project-name-input\").value;\n        let new_desc = document.getElementById(\"edit-project-description-input\").value;\n\n\n        //if the new name o description are difference from the old name o description\n        if(new_name !== project.data.name || new_desc !== project.data.description){\n\n            //call the dao\n            let res = await projectsDao.putProject(project_id, {name: new_name, description : new_desc});\n\n            //error checking\n            //if is other error\n            if (res && res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res && res !== null) {\n                console.log(\"UPDATED SUCCESSFULLY!\");\n                window.location.reload();\n            }\n\n\n        }\n    }\n\n\n    let output;\n\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n    else {\n        output = (\n            <div className=\"project-wrapper\">\n                <ProjectPageHead match={props.match} notFound={notFound}/>\n\n                {/*route the papers list*/}\n                <Switch>\n                    <Route exact  path={props.match.url} render={function(props){\n                        setNotFound(false);\n                        return (\n                            <>\n                                <ProjectDescription description={project.data.description} update={updateProject} date_last_modified={project.date_last_modified} date_created={project.date_created}/>\n                                <PapersList project_id={project_id} location={props.location} match={props.match} history={props.history}/>\n                                <Link to={join(props.match.url,\"/addpaper\")}>\n                                    <button className=\"bottom-left-btn add-custompaper-btn\">\n                                        <div className=\"btn-title\">Add Custom Paper</div><div className=\"btn-icon\"> </div>\n                                    </button>\n                                </Link>\n\n                            </>\n                        );\n                    }}/>\n\n                    {/*route the form of search*/}\n                    <Route exact path={props.match.url + \"/search\"} render={function(props){\n                        setNotFound(false);\n                        return (<SearchForm project_id={project_id} {...props} />);\n                    }}/>\n\n                    <Route exact path={props.match.url + \"/searchsimilar\"} render={function(props){\n                        setNotFound(false);\n                        return (<SearchSimilarForm project_id={project_id} {...props} />);\n                    }}/>\n\n                    <Route path = {props.match.url + \"/addpaper\"} render={() =>\n                        <>\n                            <Link className=\"back\" to={props.match.url}>  </Link>\n                            <CustomPaperPage projectId={project.id} url={props.match.url} history={props.history}/>\n                        </>\n                    } />\n                </Switch>\n\n            </div>\n        );\n    }\n\n    return output;\n};\n\n/**\n * this is the local component to print head of project page\n */\nconst ProjectPageHead = function ({match, notFound}) {\n    const lc = window.location.hash.substr(window.location.hash.length - 9);\n    const slider = (((\"#\" + match.url) === window.location.hash.split(\"?\")[0]) || (lc === \"/addpaper\" || lc === \"addpaper/\"));\n    let output = (\n        <>\n            <div className=\"project-nav-link-wrapper\" style={{display: (notFound || (lc === \"/addpaper\" || lc === \"addpaper/\")) ? \"none\" : \"\"}}>\n                <div className=\"nav-link\">\n                    <Link to={match.url}>papers</Link>\n                </div>\n                <div className=\"nav-link\">\n                    <Link to={join(match.url, \"/search\")}>search</Link>\n                </div>\n                <Flipper flipKey={slider}>\n                    <Flipped flipId=\"underline\">\n                        <div className={slider ? \"underline underline-to-left\" : \"underline underline-to-right\"}/>\n                    </Flipped>\n                </Flipper>\n            </div>\n        </>\n    );\n    return output;\n\n};\n\n\nexport default ProjectPage;","import React from 'react';\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\n\n\n\nimport Main from 'components/main';\nimport Home from 'components/home';\n\nimport NavBar from 'components/navigation/navBar';\nimport SideMenu from 'components/navigation/sideMenu';\nimport BreadCrumbs from 'components/breadCrumbs';\n\nimport ProjectsList from 'components/projects/projectsList';\nimport ProjectPage from 'components/projects/projectPage';\n\n\nimport  {AppProvider} from 'components/providers/appProvider';\n\n\n/**\n *this is the start point of application\n */\n\nconst App = function(props) {\n\n\n        return (\n            <Router>\n                <div className=\"app\">\n\n                    {/*mount a root context object*/}\n                    <AppProvider>\n\n                        <NavBar>\n                            {/*component menu*/}\n                            <SideMenu/>\n                        </NavBar>\n                        <Switch>\n                            <Route render={(props) => <BreadCrumbs {...props}/>}/>\n                        </Switch>\n                        <Main>\n                            <Switch>\n                                <Route exact path=\"/\" render={() => <Home/> }/>\n                                <Route exact path=\"/projects\" render={(props) => <ProjectsList {...props} />}/>\n                                <Route path=\"/projects/:id\" render={(props) => <ProjectPage {...props} />}/>\n                                <Route render={(props) => <div>404</div>}/>\n                            </Switch>\n\n                        </Main>\n\n                    </AppProvider>\n                </div>\n            </Router>\n        );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}