{"version":3,"sources":["utils/conn.js","components/main.js","components/navigation/navBar.js","components/modules/error.js","components/providers/appProvider.js","components/home.js","components/navigation/userInfo.js","config/index.js","components/svg/menuButton.js","components/navigation/sideMenu.js","dao/projects.dao.js","components/svg/loadIcon.js","components/svg/closeButton.js","components/forms/projectForm.js","utils/index.js","components/modules/pagination.js","components/modules/cover.js","components/projects/projectsList.js","components/forms/checkbox.js","dao/paper.dao.js","dao/projectPapers.dao.js","components/svg/searchButton.js","components/papers/printPapersList.js","components/forms/searchform.js","components/papers/papersList.js","components/projects/projectPage.js","App.js","serviceWorker.js","index.js"],"names":["abortController","abortRequestType","Main","props","react_default","a","createElement","className","children","NavBar","appConsumer","useContext","AppContext","title","Error","output","useEffect","setError","error","payload","Fragment","statusCode","message","name","style","textAlign","React","createContext","AppProvider","user","image","alt","src","surname","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","contextObject","setTitle","Provider","value","modules_error","Home","fontSize","fontWeight","UserInfo","config","home","search","scopus_search","projects","papers","menu_list","id","content","link","MenuButton","xmlns","xmlnsXlink","x","y","viewBox","d","x1","y1","x2","y2","PrintMenu","map","element","index","key","react_router_dom","to","onMouseUp","handleMenuBlur","SideMenu","shown","setShown","firstTime","setFirstTime","clsidemenu","clsbutton","onClick","menuButton","tabIndex","userInfo","sideMenu_PrintMenu","timeOutTime","request","_callee","url","options","signal","requestOptions","timer","response","data","timeOutError","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","AbortController","assign","credentials","mode","setTimeout","abort","fetch","sent","clearTimeout","parseResponseData","checkResponseStatus","abrupt","t0","stop","_callee2","queryData","query","_args2","_context2","encodeURIComponent","slice","_callee3","_context3","method","_callee4","bodyData","jsonHeaders","body","_args4","_context4","Headers","append","JSON","stringify","headers","_callee5","_args5","_context5","status","statusText","_callee6","contentType","_context6","get","indexOf","text","formData","blob","json","http","post","delete","put","abortRequest","res","project_id","projectsDao","getProjectsList","getProject","postProject","putProject","deleteProject","LoadIcon","class","CloseButton","ProjectForm","setName","description","setDescription","_createProject","asyncToGenerator","mark","e","preventDefault","history","push","apply","this","_updateProject","project","alert","projectInputData","submitAction","_x","_x2","visibility","type","setVisibility","closeButton","defaultValue","onChange","target","placeholder","searchCheckboxesToParams","checkboxes","params","keys","forEach","console","log","years","queryString","arrayFormat","join","base","path","charAt","Pagination","_ref","before","after","pagination","prevLink","nextLink","hasbefore","continues","Cover","cls","handler","PrintList","_ref2","maps","projectsList","ProjectsList","setProjectsList","initialPaginationState","setPagination","_useState5","_useState6","display","setDisplay","_useState7","_useState8","toggleform","setToggleForm","parse","location","pagesize","results","fetchData","loadIcon","firstId","lastId","cover","projectsList_PrintList","match","modules_pagination","projectForm","CheckBox","label","isChecked","defaultChecked","paperDao","scopusSearch","paper_id","projectPapersDao","getPapersList","getPaper","postPaperIntoProject","putPaper","deletePaper","SearchButton","PrintLocalSearchList","papersList","handlePaperSelection","_React$createElement","forms_checkbox","val","lib_default","abstract","lines","ellipsis","moreText","lessText","defineProperty","PrintScoupusSearchList","_React$createElement2","Title","_ref3","_React$createElement3","_","require","SearchForm","yearOptions","range","String","scopus","Boolean","googleScholar","arXiv","searchby","includes","split","initialCheckboxesState","all","author","paperTitle","setCheckboxes","setPapersList","selectedPapers","setSelectedPapers","inputToSearch","setInputToSearch","_useState9","_useState10","_useState11","_useState12","handleCheckboxChange","newState","objectSpread","optionName","array","filter","event","toConsumableArray","_handleAddPapers","i","_handleSendSearch","queryParams","formPart","onSubmit","position","searchButton","resultPart","paginationUrl","window","href","existBefore","lastIndexOf","existOfAfter","printList","printPapersList_PrintLocalSearchList","printPapersList_PrintScoupusSearchList","PapersList","printPapersList_PrintList","ProjectPageHead","slider","es","flipKey","flipId","ProjectPage","setProject","setSlider","substrUrl","pathname","substring","toUpperCase","projectPage_ProjectPageHead","react_router","exact","render","papers_papersList","searchform","App","basename","appProvider_AppProvider","navBar","sideMenu","main","projects_projectsList","projectPage","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b763eaf9.chunk.js","sourcesContent":["/*this is the file to communicate with backend by fetch request*/\n\n//signal to abort the request\nvar abortController;\n//int to know abort error type\nvar abortRequestType;\n//10seconds for timeout\nvar timeOutTime = 10 * 1000;\n\n//object to export\nconst http = {\n    \"get\": get,\n    \"post\": post,\n    \"delete\": deletes,\n    \"put\": put,\n    \"abortRequest\": abortRequest,\n\n}\n\n\n/**\n * abort all request in progeress by user\n */\nfunction abortRequest() {\n    abortController.abort();\n    abortRequestType = 1;\n}\n\n/**\n * abort all request if timeout\n */\nfunction timeOut() {\n\n    abortController.abort();\n    abortRequestType = 2;\n}\n\n/**\n * create a basic fetch request\n * @param url\n * @param options request config\n * @return {object} response data\n */\nasync function request(url, options = {}) {\n    try {\n\n        //create a new abortController for this request\n        abortController = new AbortController();\n        let signal = abortController.signal;\n        //initialize as 0 for every request\n        abortRequestType = 0;\n\n        let requestOptions = Object.assign(\n            {\n                //enable the  sending of cookie\n                credentials: 'include',\n                \"mode\": 'cors',\n                \"signal\": signal\n            },\n            options\n        );\n\n        //set timeout clock\n        let timer = setTimeout(() => timeOut(), timeOutTime);\n\n        let response = await fetch(url, requestOptions);\n\n        //clear timeoyt clock\n        clearTimeout(timer);\n\n\n        //parse response data\n        let data = await parseResponseData(response);\n        //response error check\n        checkResponseStatus(response,data);\n        return  data;\n\n    }\n    catch (error) {\n\n        //if abort error is caused by timeout\n        if (abortRequestType === 2) {\n            //create a custom error for timeout\n            let timeOutError = new Error(\"Error: Time out to get response from backend\");\n            timeOutError.name = \"timeout\";\n            return  timeOutError;\n        }\n        //if is a abort error  caused by user\n        else if (abortRequestType === 1) {\n            return null;\n        }\n\n        return error;\n\n\n    }\n}\n\n/**\n * get method\n * @param url\n * @param queryData quey string\n * @return {object} response data\n */\nasync function get(url, queryData = \"\") {\n    let query = \"\";\n    if (queryData !== \"\") {\n        query = \"?\";\n        for (let key in queryData) {\n            query += key + \"=\" + encodeURIComponent(queryData[key]) + \"&\";\n        }\n        //delete the last &\n        query = query.slice(0, query.length - 1);\n    }\n    return await request(url + query);\n}\n\n/**\n * deletes method\n * @param url\n */\nasync function deletes(url) {\n    let options = {\n        \"method\": 'DELETE'\n    };\n\n    return await request(url, options);\n}\n\n/**\n * post method\n * @param url\n * @param bodyData\n * @return {object } response data\n */\nasync function post(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'POST',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options);\n}\n\n\n/**\n * put method\n * @param url\n * @param bodyData\n */\nasync function put(url, bodyData = \"\") {\n\n    let jsonHeaders = new Headers();\n    jsonHeaders.append('Accept', 'application/json, text/plain, */*');\n    jsonHeaders.append('Cache-Control', 'no-cache');\n    jsonHeaders.append('Content-Type', 'application/json;charset=UTF-8');\n    let body = JSON.stringify(bodyData, null, 2);\n    let options = {\n        \"method\": 'PUT',\n        \"headers\": jsonHeaders,\n        \"body\": body,\n    };\n\n    return await request(url, options);\n}\n\n\n/**\n *  * check resposonse status\n * @param response to check\n * @param data data received\n * @throws {Error} if  status code < 200 or status code >= 300\n */\nfunction checkResponseStatus(response, data) {\n\n    if (response.status < 200 || response.status >= 300) {\n        const error = new Error(response.statusText);\n        error.data = response;\n        if(data.payload){\n            error.payload = data.payload;\n        }\n        throw error;\n    }\n\n}\n\n/**\n * parse the response of  http request\n * @param response response object\n * @return {object} data parsed\n */\nasync function parseResponseData(response) {\n    //get response data type\n    const contentType = response.headers.get('Content-Type');\n    let data = null;\n    //parse the data by its type\n    if (contentType != null) {\n        if (contentType.indexOf('text') > -1) {\n            data = await response.text()\n        }\n        if (contentType.indexOf('form') > -1) {\n            data = await response.formData();\n        }\n        if (contentType.indexOf('video') > -1) {\n            data = await response.blob();\n        }\n        if (contentType.indexOf('json') > -1) {\n            data = await response.json();\n        }\n    }\n    else if (response != null) {\n        data = await response.text();\n    }\n    return data;\n}\n\n\nexport default http;","import React from \"react\";\n\n/**\n * compotent main of page\n */\nconst Main = function(props){\n\n        return (\n            <div className=\"main-wrapper\">\n                {props.children}\n            </div>\n        );\n};\n\nexport default Main;","import React, {useContext} from \"react\";\n\nimport {AppContext} from \"./../providers/appProvider\";\n\n/**\n * this is the head component of page\n * @param \"menu_elements\" contains the list of menu-items\n */\n\nconst NavBar = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return (\n        <div className=\"navigation-wrapper\">\n\n            {/*background of the menu-bar*/}\n            <nav className=\"main-nav\">\n                <div className=\"nav-elements\"> {appConsumer.title} </div>\n            </nav>\n            {props.children}\n\n        </div>\n    );\n}\n\nexport default NavBar;","import React, {useContext, useEffect} from 'react';\nimport {AppContext} from \"./../providers/appProvider\";\n\n\nconst Error = function () {\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    useEffect(() => {//not used yet\n\n        return () => {\n            //delete the error, so app can resume its work\n            appConsumer.setError(null);\n        }\n\n    });\n\n\n    //console.dir(appConsumer.error);\n    let output;\n    //is a error from backend\n    if (appConsumer.error.payload) {\n        output = (\n            <>\n                <p>Error code:</p>\n                <p>{appConsumer.error.payload.statusCode}</p>\n                <p>Error name:</p>\n                <p>{appConsumer.error.payload.error}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.payload.message}</p>\n            </>\n        );\n    }\n\n    //is a error of other type\n    else {\n        output = (\n            <>\n                <p>Error name:</p>\n                <p>{appConsumer.error.name}</p>\n                <p>Error message</p>\n                <p>{appConsumer.error.message}</p>\n            </>\n        );\n    }\n\n    output = (\n        <div className=\"error-wrapper\" style={{textAlign: \"center\"}}>\n            {output}\n        </div>\n    );\n\n    return output;\n\n}\n\n\nexport default Error;","import React, {useState, useRef} from 'react';\n\nimport NavBar from './../navigation/navBar';\nimport Main from './../main';\nimport Error from './../modules/error';\n\n//create a context object\nconst AppContext = React.createContext();\n\n/**\n * this is the component that include a context object that it can be access by all its children component\n */\nconst AppProvider = function (props) {\n\n    const user = {\n        image: <img className=\"face\" alt=\"profile\" src=\"https://placekitten.com/100/100\"/>,\n        name: \"Mario\",\n        surname: \"Rossi\"\n    };\n\n    //error\n    const [error, setError] = useState(null);\n\n    //title\n    const [title, setTitle] = useState(\"HOME\");\n\n    //preparate an object to be insertd into context\n    const contextObject ={\n        user,\n        error,\n        setError,\n        title,\n        setTitle\n    };\n\n\n    //if there isn't error\n    if (!error) {\n\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                {/*mount all components children*/}\n                {props.children}\n\n            </AppContext.Provider>\n        );\n    }\n    //if there is a error\n    else {\n        return (\n            //*set the values of contenxt*\n            <AppContext.Provider value={contextObject}>\n\n                    <Error/>\n\n            </AppContext.Provider>\n        )\n    }\n\n\n}\n\nexport {AppContext, AppProvider};","import React, {useContext, useEffect} from \"react\";\n\nimport {AppContext} from \"./providers/appProvider\";\n\n/**\n * this is home component\n */\nconst Home = function (props) {\n\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set title when component mounts\n    useEffect(() => {\n        appConsumer.setTitle(\"HOME\");\n    },[])//run on component mount\n\n\n    return (\n        <>\n            <h1>\n                Systematic Literature Review manager\n            </h1>\n            <h2 style={{fontSize: 22, fontWeight: \"normal\"}}>the system right now allows you to</h2>\n            <ul style={{fontSize: 18, fontWeight: \"lighter\"}}>\n                <li>browse a list of prjects</li>\n                <li>add a new project</li>\n                <li>browse the list of papers on a project</li>\n                <li>search(from a local database or scopus) and add papers to a project</li>\n            </ul>\n            <h2 style={{fontSize: 22, fontWeight: \"normal\"}}>notes</h2>\n            <ul style={{fontSize: 18, fontWeight: \"lighter\"}}>\n                <li><i>the scopus search works partially(can't retrieve the description)</i>\n                    <ul><li style={{fontSize: 16}}>from Elsevier developer portal : \"The data available depends on your institutional subscriptions, and only when you're making calls from within your institutional network are you considered a subscriber\"</li></ul>\n                </li>\n                <li><i>besides the scopus search, the other options don't affect the search</i></li>\n            </ul>\n        </>\n    );\n\n\n\n\n};\n\nexport default Home;","import React, {useContext} from \"react\";\nimport { AppContext } from './../providers/appProvider'\n\n/*\n* this is the component that visualize user information box\n* */\nconst UserInfo = function(props){\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    return(\n            <div className=\"user\" >\n                {appConsumer.user.image}\n                <div className=\"user-info\">\n                    {appConsumer.user.name}\n                    <br/>\n                    {appConsumer.user.surname}\n                </div>\n            </div>\n    );\n}\n\nexport  default  UserInfo;","/**\n * this is the config file\n */\n\n\nconst config = {\n    \"home\": \"https://crowdai-slr-api-dev.herokuapp.com/\",\n    \"search\": \"search\",\n    \"scopus_search\": \"search-scopus\",\n    \"projects\": \"projects\",\n    \"papers\": \"papers\",\n    \"menu_list\": [\n        {id: 4, content: \"home\", link: \"/\"},\n        {id: 5, content: \"my projects\", link: \"/projects\"},\n        {id: 6, content: \"account\", link: \"#\"}\n    ],\n\n\n\n\n};\n\nexport default config;","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst MenuButton = function (props) {\n\n    return (\n\n        <svg id=\"menu-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n             x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M214,482.1\"/>\n            <line className=\"st-t\" x1=\"172\" y1=\"482.1\" x2=\"172\" y2=\"482.1\"/>\n            <line className=\"st-m\" x1=\"500\" y1=\"482.1\" x2=\"500\" y2=\"482.1\"/>\n            <line className=\"st-b\" x1=\"828\" y1=\"482.1\" x2=\"828\" y2=\"482.1\"/>\n        </svg>\n    );\n};\n\nexport default MenuButton;\n","import React, {useState, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\n\nimport UserInfo from './userInfo';\nimport config from '../../config/index';\nimport MenuButton from '../svg/menuButton';\n\n/**\n *this is the side menu component\n */\nconst SideMenu = function (props) {\n\n    //bool to control the visualization of menu\n    const [shown, setShown] = useState(false);\n    const [firstTime, setFirstTime] = useState(true);\n\n\n    //function to open/close the menu\n    function handleToggleMenuButton() {\n        setShown(!shown);\n        setFirstTime(false);\n    }\n\n    //function to close the menu\n    function handleMenuBlur() {\n        setShown(false);\n    }\n\n    //change the class of element by menu state\n    var clsidemenu = \"modal side-menu up\";\n    var clsbutton = \"button-wrapper close\";\n\n    if (firstTime) {\n        clsidemenu = \"modal side-menu\"\n    }\n    if (shown) {\n        clsbutton = \"button-wrapper open\"\n        clsidemenu = \"modal side-menu down\"\n    }\n\n    return (\n        <div className=\"menu\">\n\n            <div className={clsbutton} onClick={handleToggleMenuButton}>\n                <MenuButton/>\n            </div>\n\n            <div className={clsidemenu} tabIndex={-1}>\n\n                {/*user info box*/}\n                <UserInfo/>\n                <PrintMenu handleMenuBlur={handleMenuBlur}/>\n\n            </div>\n        </div>\n    );\n\n}\n\n/**\n *local compotent to print menu\n */\nconst PrintMenu = function (props) {\n\n    let output = (\n        config.menu_list.map((element, index) => (\n                <div key={index}>\n                    <Link to={element.link} className=\"menu-option\"\n                          onMouseUp={props.handleMenuBlur}>{element.content}</Link>\n                </div>\n            )\n        )\n    );\n    return output;\n\n\n}\n\n\nexport default SideMenu;","import http from './../utils/conn'\nimport config from './../config/index'\n\n/**\n * dao to get a projects list\n * @param queryData\n * @return {array[objects]}\n */\nasync function getProjectsList(queryData = \"\") {\n    let url = config.home + config.projects\n    let res = await http.get(url, queryData);\n    return res;\n\n\n}\n\n/**\n * dao to get a project\n * @param project_id\n * @return {Object} project requested\n */\nasync function getProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.get(url);\n    return res;\n}\n\n/**\n * dao to post a new project\n * @param bodyData\n * @return {Object} project created\n */\nasync function postProject(bodyData) {\n    let url = config.home + config.projects;\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putProject(project_id, bodyData) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a project\n * @param project_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deleteProject(project_id) {\n    let url = config.home + config.projects + \"/\" + project_id;\n    let res = await http.delete(url);\n    return res;\n}\n\n\nconst projectsDao = {\n    \"getProjectsList\": getProjectsList,\n    \"getProject\": getProject,\n    \"postProject\": postProject,\n    \"putProject\": putProject,\n    \"deleteProject\": deleteProject,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectsDao};","import React from \"react\";\n\n/**\n * component svg loading-icon\n */\nconst LoadIcon = function (props) {\n\n    return (\n\n        <svg id=\"loading-icon\" className={props.class} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\n             y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <g>\n                <path id=\"loading-circle1\" d=\"\n                  M 500, 500\n                  m -160, 0\n                  a 160,160 0 1,0 320,0\n                  a 160,160 0 1,0 -320,0\n          \"/>\n                <path id=\"loading-circle2\" d=\"\n                  M 500, 500\n                  m -305, 0\n                  a 305,305 0 1,0 610,0\n                  a 305,305 0 1,0 -610,0\n          \"/>\n            </g>\n        </svg>\n    );\n};\n\nexport default LoadIcon;\n","import React from \"react\";\n\n/**\n * component svg close-btn\n */\nconst CloseButton = function (props) {\n\n    return (\n        <svg id=\"close-button\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n            viewBox=\"0 0 1000 1000\">\n        <line className=\"ln\" x1=\"134\" y1=\"866\" x2=\"866\" y2=\"134\"/>\n        <line className=\"ln\" x1=\"134\" y1=\"134\" x2=\"866\" y2=\"866\"/>\n        </svg>\n    );\n};\n\nexport default CloseButton;\n","import React, {useEffect, useState, useContext} from \"react\";\nimport {projectsDao} from './../../dao/projects.dao'\n\nimport CloseButton from './../svg/closeButton';\n\nimport { AppContext } from './../providers/appProvider'\n\n/**\n * this is the form for create or edit the project\n * @param props.project  project object if we want to update a old project\n * @param null if we want to create a new project\n */\nfunction ProjectForm(props) {\n\n    //fields values\n    const [name, setName] = useState(\"\")\n    const [description, setDescription] = useState(\"\")\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    /**\n     * action to create a new project\n      */\n    async function createProject(e) {\n        //disable default action\n        e.preventDefault();\n        //prepare the data object to post\n        let bodyData = {name: name, description:description};\n        //call dao\n        let res = await projectsDao.postProject(bodyData);\n\n        //error checking\n        if(res.message){\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n        props.history.push(\"/projects/\" + res.id);\n    }\n\n    /**\n     * action to update a old project(not used yet)\n     */\n    async function updateProject(e) {\n        //disable default action\n        e.preventDefault();\n        //prepare the data object to post\n        let bodyData = {name: name, description: description};\n        //call dao  with project_id and data object\n        let res = await projectsDao.putProject(props.project.id, bodyData);\n\n        //error checking\n        if(res.message){\n            //pass error object to global context\n            appConsumer.setError(res);\n        }\n\n        alert(\"updated correctly\");\n    }\n\n\n    //defalut input values are empty\n    let projectInputData = {name: \"\", description: \"\"};\n    //default action is create a project\n    let submitAction = createProject;\n    //if we want update a old project\n    if (props.project !== undefined) {\n        //get old project data\n        projectInputData.name = props.project.data.name;\n        projectInputData.description = props.project.data.description;\n        //set action as update\n        submitAction = updateProject;\n    }\n\n    return (\n        <>\n        <form className=\"modal add-project\" style={{visibility: (!props.visibility) ? 'hidden' : '' }}>\n            <button type=\"button\" className=\"close-btn\" onClick={(e) => {\n                props.setVisibility(!props.visibility);\n            }}><CloseButton/></button>\n            <br/>\n            <input \n                defaultValue={name}\n                onChange={e => setName(e.target.value)}\n                type=\"text\" \n                placeholder=\"project name\"/>\n            <br/>\n            <br/>\n            <textarea \n                defaultValue={description}\n                onChange={e => setDescription(e.target.value)}\n                type=\"text\" \n                placeholder=\"project description\"/>\n            <br/>\n            <button type=\"submit\" onClick={submitAction} value=\"submit\">Add project</button>\n        </form>\n        </>\n    );\n\n\n}\n\n\nexport default ProjectForm;","//need to parse query string of url\nimport queryString from 'query-string';\n\n//here are the common support function\n\n\n/**\n * converts the checkboxes object of the search form into parameters for the url\n */\nfunction searchCheckboxesToParams(checkboxes){\n    var params = \"\";\n    Object.keys(checkboxes).forEach(key => {//I iterate over each field of the object\n        if(key !== \"years\"){//if it's not an year\n            if(checkboxes[key]){//if it's a true flag\n                console.log(key)\n                params += \"&\" + key + \"=\" + checkboxes[key];\n            }\n        }else{//if it's a year\n            if(checkboxes.years.length !== 0){//if there are some years selected\n                params += \"&\" + queryString.stringify({\"years\" : checkboxes.years} , {arrayFormat: 'comma'});\n            }\n        }\n      });\n      return params;\n}\n\n/**\n * this is  function to manipolate 2 url string\n * if first string ends with \"/\", removes \"/\".\n * then concate wite second string and return new string\n */\nfunction join(base, path){\n    let newPath;\n    //if the last element is \"/\"\n    if(base.charAt(base.length-1) === '/'){\n        newPath = base.slice(0,-1) + path;\n    }\n    else{\n        newPath =base + path;\n    }\n\n    return newPath;\n\n  }\n\n/**\n *\n *\n * function that set pagesize and after value by query string (if exist)\n * @param query query string\n * @return {number[]} pagesize, before, after\n */\nfunction setPaginationParamsFromQuery(query){\n    //initial value\n    let pagesize=10;\n    let before=-1;\n    let after=0;\n\n\n    let params = queryString.parse(query);\n    if(params.pagesize){\n        pagesize = Number(params.pagesize);\n    }\n    //is there is before, ignore the after\n    if(params.before){\n        before = Number(params.before);\n    }\n    else if(params.after){\n        after = Number(params.after);\n    }\n    return [pagesize, before, after];\n}\n\n\n\n\nexport  {searchCheckboxesToParams, join, setPaginationParamsFromQuery};","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {join} from './../../utils/index';\n\n/**\n * this is the component for paginaton\n * @param after last element's id\n * @param pagination object {hasbefore, continues}\n * @param path current page path\n * @return {*}\n * @constructor\n */\nconst Pagination = function ({before, after, pagination, path}) {\n\n    let output = null;\n    let prevLink =\"\";\n    let nextLink = \"\";\n\n    //if there is hasbefore or continues\n    if (pagination.hasbefore || pagination.continues) {\n\n        //show prev button only hasbefore is true\n        if (pagination.hasbefore) {\n            prevLink = (\n                <Link className=\"before\" to={join(path, \"before=\" + before)}>\n                    {\"< prev\"}\n                </Link>\n            );\n        }\n        //show next button only continues is true\n        if (pagination.continues) {\n            nextLink = (\n\n                <Link className=\"after\" to={join(path, \"after=\" + after)}>\n                    {\"next >\"}\n                </Link>\n\n            )\n        }\n        output = (\n            <div className=\"pagination\">\n                {prevLink}\n                {nextLink}\n            </div>\n        );\n\n    }\n    return output;\n\n}\n\n\nexport default Pagination;","import React, {useContext} from \"react\";\n\n\n\n/**\n * component for covering the page\n */\nconst Cover = function ({cls, handler}) {\n    //get data from global context\n    return (\n        <div className={\"cover \" + cls} onClick={(e) => {handler(false)}}></div>\n    );\n};\n\nexport default Cover;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom';\nimport queryString from 'query-string';\n\n\nimport {projectsDao} from './../../dao/projects.dao';\nimport LoadIcon from './../svg/loadIcon';\nimport ProjectForm from './../forms/projectForm';\nimport Pagination from './../modules/pagination';\nimport {join} from './../../utils/index';\nimport Cover from './../modules/cover';\n\nimport {AppContext} from \"./../providers/appProvider\";\n\n/**\n *this component will show a projects list page\n */\n\nconst ProjectsList = function (props) {\n\n\n    //fetch data\n    const [projectsList, setProjectsList] = useState([]);\n\n    //bool to show the pagination buttons\n    const initialPaginationState = {hasbefore: false, continues: false};\n    const [pagination, setPagination] = useState(initialPaginationState);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //bool to control the visualization of input form\n    const [toggleform, setToggleForm] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const params = queryString.parse( props.location.search && props.location.search);\n    const pagesize = params.pagesize || 10;\n    const before = params.before || -1;\n    const after = params.after || 0;\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    const queryData = (before >= 0 ? {pagesize, before} : {pagesize, after});\n\n    //set title when component mounts\n    useEffect(() => {\n        appConsumer.setTitle(\"PROJECTS\");\n    },[])//run on component mount\n\n    useEffect(() => {\n\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            const res = await projectsDao.getProjectsList(queryData);\n\n            //error checking\n            //if is 404 error\n            if (res.message === \"Not Found\") {\n                setProjectsList([]);\n                setPagination(initialPaginationState);\n                //show the page\n                setDisplay(true);\n            }\n            //if is other error\n            else if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                //update state\n                setProjectsList(res.results);\n                setPagination({hasbefore: res.hasbefore, continues: res.continues});\n                //show the page\n                setDisplay(true);\n            }\n        }\n\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectsDao.abortRequest();\n        };\n    }, [pagesize, before, after]); //re-execute when these variables change\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n\n    else {\n\n        //get first and last project id of list\n        let firstId = 0;\n        let lastId = 0;\n        //if the list is not empty\n        if (projectsList.length > 0) {\n            firstId = projectsList[0].id;\n            lastId = projectsList[projectsList.length - 1].id;\n        }\n        output = (\n            <div>\n                <Cover cls={toggleform ? \"full-screen\" : \"\"} handler={setToggleForm}/>\n                {/*print list of projects*/}\n                <PrintList projectsList={projectsList} path={props.match.url}/>\n                {/*set listId and continues value*/}\n                <Pagination before={firstId} after={lastId} pagination={pagination} path={props.match.url+\"?\"}/>\n\n                {/*print the input form to create/update the projects*/}\n                <ProjectForm visibility={toggleform} setVisibility={setToggleForm} history={props.history}/>\n                {/*button to show input form*/}\n                <button className=\"bottom-left-btn\" type=\"button\" value=\"toggle-insert-form\" onClick={(e) => {\n                    setToggleForm(!toggleform);\n                }}>+\n                </button>\n            </div>\n        );\n\n    }\n\n    return output;\n\n\n};\n\n\n/**\n *  local component to print list\n * @param projectsList projects list data\n * @param path current page url\n */\nconst PrintList = function ({projectsList, path}) {\n\n    let maps;\n    //if list is empty, print a notice message\n    if (projectsList.length === 0) {\n        maps = (\n            <div>there aren't projects</div>\n        );\n    }\n    //if list isn't empty, print list of projects\n    else {\n        maps = (projectsList.map((element, index) =>\n                <div key={element.id} className=\"light-modal project-card\">\n                    <Link to={join(path, \"/\" + element.id)}>\n                        <h3>{element.id} {element.data.name}</h3>\n                        <p>{element.data.description}</p>\n                    </Link>\n                </div>\n        ));\n    }\n\n    let output =  (\n        <div className=\"project-cards-holder\">\n            {maps}\n        </div>\n    );\n\n    return output;\n\n};\n\n\nexport default ProjectsList;","import React from \"react\";\n\nconst CheckBox = ({ value, label, isChecked, handler }) => (\n    <label className=\"checkbox-container\">\n      <input type=\"checkbox\" value={value} name={label} defaultChecked={isChecked} onChange={handler} />\n      <span className=\"checkmark\"></span>\n      <span>{label}</span>\n    </label>\n);\n\nexport default CheckBox;","import http from './../utils/conn'\nimport config from './../config/index'\n\n/**\n * dao to search local papers\n * @param queryData\n * @return {array[objects]}\n */\nasync function search(queryData){\n    let url = config.home+config.search;\n\n        const res = await http.get(url, queryData);\n        return res;\n\n}\n\n/**\n * dao to search scopus papers\n * @param queryData\n * @return {array[objects]}\n */\nasync function scopusSearch(queryData){\n    let url = config.home+config.scopus_search;\n\n    const res = await http.get(url, queryData);\n    return res;\n\n}\n\n\n\nconst paperDao = {\n    search,\n    scopusSearch,\n    \"abortRequest\" : http.abortRequest\n}\n\n\n\nexport {paperDao};","import http from './../utils/conn'\nimport config from './../config/index'\n\n/**\n * dao to get a list of paper associated with a project\n * @param queryData\n * @return {array[objects]}\n */\nasync function getPapersList(queryData) {\n    let url = config.home + config.papers\n\n    const res = await http.get(url, queryData);\n    return res;\n\n}\n\n/**\n * dao to get a paper\n * @param paper_id\n * @return {Object} paper requested\n */\nasync function getPaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.get(url);\n}\n\n/**\n * dao to post a new paper\n * @param bodyData\n * @return {Object} project created\n */\nasync function postPaperIntoProject(bodyData) {\n    let url = config.home + config.papers;\n    console.log(bodyData);\n    return await http.post(url, bodyData);\n}\n\n/**\n * dao to put a old paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function putPaper(paper_id, bodyData) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.put(url, bodyData);\n}\n\n/**\n * dao to delete a paper\n * @param paper_id\n * @param bodyData\n * @return {String} empty string\n */\nasync function deletePaper(paper_id) {\n    let url = config.home + config.papers + \"/\" + paper_id;\n    return await http.delete(url);\n}\n\n\nconst projectPapersDao = {\n    \"getPapersList\": getPapersList,\n    \"getPaper\": getPaper,\n    \"postPaperIntoProject\": postPaperIntoProject,\n    \"putPaper\": putPaper,\n    \"deletePaper\": deletePaper,\n    \"abortRequest\": http.abortRequest\n}\n\n\nexport {projectPapersDao};","import React from \"react\";\n\n/**\n * component svg menu button\n */\nconst SearchButton = function (props) {\n\n    return (\n        <svg id=\"search-icon\" xmlns=\"http://www.w3.org/2000/svg\"\n             xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n             viewBox=\"0 0 1000 1000\">\n            <path className=\"st0\" d=\"M626.9,644.3c-73.5,0-142.6-28.6-194.6-80.6s-80.6-121.1-80.6-194.6s28.6-142.6,80.6-194.6\n                c52-52,121.1-80.6,194.6-80.6c73.5,0,142.6,28.6,194.6,80.6c52,52,80.6,121.1,80.6,194.6s-28.6,142.6-80.6,194.6\n                S700.4,644.3,626.9,644.3z\"/>\n            <line className=\"st1\" x1=\"145.2\" y1=\"850.8\" x2=\"431.7\" y2=\"564.3\"/>\n        </svg>\n    );\n};\n\nexport default SearchButton;\n","import React from \"react\";\nimport ClampLines from 'react-clamp-lines';\nimport {Link} from 'react-router-dom';\nimport CheckBox from \"../forms/checkbox\";\n/**\n * prints the papers list of a local search on the fake database\n */\n\nconst PrintLocalSearchList = function ({papersList, handlePaperSelection}) {\n\n    let output = papersList.map((element, index) =>\n        <div key={element.id} className=\"paper-card\">\n            <CheckBox val={element.id} label={\"\"} handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.id} {element.data && element.data.title}</h3></Link>\n            <ClampLines\n                text={element.data && element.data.abstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n}\n\n/**\n * prints the results of a search on scopus\n */\nconst PrintScoupusSearchList = function ({papersList, handlePaperSelection}) {\n\n    let exampleAbstract =\"I am a description I am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a descriptionI am a description\";\n\n    let output = papersList.map((element, index) =>\n        <div key={element.id} className=\"paper-card\">\n            <CheckBox val={element.id} label={\"\"} handler={handlePaperSelection}/>\n            <Link to={\"#\"}><h3>{element.id} {element.Title}</h3></Link>\n            <ClampLines\n                text={exampleAbstract}\n                lines={4}\n                ellipsis=\"...\"\n                moreText=\"Expand\"\n                lessText=\"Collapse\"\n                className=\"paragraph\"\n                moreText=\"more\"\n                lessText=\"less\"\n            />\n        </div>\n    );\n    return output;\n\n}\n\n/**\n * prints a list of papers\n */\n\nconst PrintList = function ({papersList}) {\n\n    let output;\n    //if list is empty, print a notice message\n    if (papersList.length === 0) {\n        output = (\n            <div>there are no papers here, you can add new ones by searching</div>\n        );\n    }\n    //if list isn't empty, print list of papers\n    else {\n        output = (\n            papersList.map((element, index) =>\n                <div key={element.id} className=\"paper-card\">\n                    <Link to={\"#\"}>\n                        <h3>{element.id} {element.data.title}</h3>\n                    </Link>\n                    <ClampLines\n                        text={element.data.abstract}\n                        lines={4}\n                        ellipsis=\"...\"\n                        moreText=\"Expand\"\n                        lessText=\"Collapse\"\n                        className=\"paragraph\"\n                        moreText=\"more\"\n                        lessText=\"less\"\n                    />\n                </div>\n            )\n        );\n    }\n    return output;\n\n\n}\n\nexport {PrintLocalSearchList, PrintScoupusSearchList, PrintList};","import React, {useState, useEffect, useContext} from \"react\";\nimport {Link} from 'react-router-dom'\nimport ClampLines from 'react-clamp-lines';\nimport queryString from \"query-string\";\n\n\nimport CheckBox from \"./checkbox\";\nimport {paperDao} from './../../dao/paper.dao';\nimport {projectPapersDao} from './../../dao/projectPapers.dao'\nimport LoadIcon from './../svg/loadIcon';\nimport SearchButton from './../svg/searchButton';\nimport {searchCheckboxesToParams, join} from './../../utils/index';\nimport {PrintLocalSearchList, PrintScoupusSearchList} from './../papers/printPapersList';\n\nimport {AppContext} from './../providers/appProvider'\nimport Pagination from \"./../modules/pagination\";\n\n// Load the lodash build\nvar _ = require('lodash');\n\n/*this is component form to search for the paper in project page*/\n\nconst SearchForm = function ({project_id, location, match, history}) {\n    \n    //default searchby options(used for avoiding user errors)\n    const sbyOptions = [\"all\", \"author\", \"paperTitle\"];\n    //default year options\n    const yearOptions = _.range(2017,2020).map(String);//it will be more useful once there will be multiple years\n    //set query params from url\n    const params = queryString.parse(location.search);\n    const pagesize = params.pagesize || 10;\n    const before = params.before || -1;\n    const after = params.after || 0;\n    const query = params.query || \"\";\n    //query params flags(I don't send errors if the user adds a value different from the default ones)\n    const scopus = (params.scopus === 'false') ? false : Boolean(params.scopus || false);\n    const googleScholar = (params.scopus === 'false') ? false : Boolean(params.googleScholar || false);\n    const arXiv = (params.scopus === 'false') ? false : Boolean(params.arXiv || false);\n    let searchby = params.searchby;\n    if(!sbyOptions.includes(searchby)){//if the value in input doesn't exists as default one I select 'all'\n        searchby = \"all\";\n    }\n    let years = (params.years || \"\").split(\",\");\n    if(years[0] === \"\"){\n        years = [];\n    }\n\n    //options on search\n    const initialCheckboxesState = {\"scopus\": scopus, \"googleScholar\": googleScholar, \"arXiv\": arXiv, //source\n                                    \"all\": (searchby === \"all\"), \"author\": (searchby === \"author\"), \"paperTitle\": (searchby === \"paperTitle\"), //searchby\n                                    \"years\": years};//year\n    const [checkboxes, setCheckboxes] = useState(initialCheckboxesState);\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //selected list of papers\n    const [selectedPapers, setSelectedPapers] = useState([]);\n\n    //input search string\n    const [inputToSearch, setInputToSearch] = useState(query);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(true);\n\n    //bool to show the pagination buttons\n    const initialPaginationState = {hasbefore: false, continues: false};\n    const [pagination, setPagination] = useState(initialPaginationState);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n\n    const queryData = {pagesize, query};\n    if (before >= 0) {\n        queryData.before = before;\n    }\n    else {\n        queryData.after = after;\n    }\n\n\n    useEffect(() => {\n\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //empty the list\n            setSelectedPapers([]);\n\n\n            //if there is queryString from URL\n            if (query !== \"\") {\n\n                //hide the page\n                setDisplay(false);\n\n                let res;\n                //call the dao to get local papers\n                console.log(scopus);\n                if(scopus === false){\n                    res = await paperDao.search(queryData);\n                }\n                //call to dao to get scopus papers\n                else{\n                    res = await paperDao.scopusSearch(queryData);\n                }\n\n\n                //error checking\n                //if is 404 error\n                if (res.message === \"Not Found\") {\n                    setPapersList([]);\n                    setPagination(initialPaginationState);\n                    //show the page\n                    setDisplay(true);\n                }\n                //if is other error\n                else if (res.message) {\n                    //pass error object to global context\n                    appConsumer.setError(res);\n                }\n                //if res isn't null\n                else if (res !== null) {\n                    //update state\n                    setPapersList(res.results);\n                    setPagination({hasbefore: res.hasbefore, continues: res.continues});\n                    //show the page\n                    setDisplay(true);\n                }\n            }\n\n        }\n\n        fetchData();\n\n    }, [query, before, after, scopus, googleScholar, arXiv, project_id]);  //re-execute when these variables change\n\n    /**\n     * update the checkbox state\n     */\n    function handleCheckboxChange(e) {\n        //copy the object\n        let newState = {...checkboxes};\n        let optionName = e.target.value;\n        if(yearOptions.includes(optionName)){//if it's an year option\n            if (!checkboxes.years.includes(optionName)) {//I check whether the year wasn't selected\n                newState.years.push(optionName);\n            }else{\n                var array = checkboxes.years.filter(function (value) {\n                    return value !== optionName;\n                });\n                newState.years = array;\n            }\n        }else{\n            newState[optionName] = !checkboxes[optionName];\n        }\n        setCheckboxes(newState);\n    }\n\n    /*function to insert and remove the paper id from selected list*/\n    function handlePaperSelection(event) {\n        let id = event.target.value;\n        //if id is not included in the list yet\n        if (!selectedPapers.includes(id)) {\n            //copy array\n            let array = [...selectedPapers];\n            array.push(id);\n\n            //update the state\n            setSelectedPapers(array);\n        }\n        //if id already exists in the list\n        else {\n            //create a new array without the target paper id\n            var array = selectedPapers.filter(function (value) {\n                return value !== id;\n            });\n            setSelectedPapers(array);\n        }\n    }\n\n    /*function to add the post in the project*/\n    async function handleAddPapers(event) {\n\n        event.preventDefault();\n        //hide the page\n        setDisplay(false);\n\n        //for to insert papers into DB\n        for (let i = 0; i < selectedPapers.length; i++) {\n\n            //call dao\n            let res = await projectPapersDao.postPaperIntoProject({\n                paper_id: selectedPapers[i], project_id: project_id\n            });\n            //if there is the error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n                return null;\n            }\n        }\n        //show the page\n        setDisplay(true);\n\n        alert(\"insert completed\");\n    }\n\n\n    /*function to send the query*/\n    async function handleSendSearch(event) {\n\n        event.preventDefault();\n        //if query input is empty\n        if (inputToSearch === \"\") {\n            alert(\"search string is empty\")\n        }\n        else {\n            //concatenate the query string\n            let queryParams = \"?query=\" + inputToSearch;\n            queryParams += searchCheckboxesToParams(checkboxes);\n\n            //update url to start the search\n            history.push(queryParams);\n        }\n\n    }\n\n    /*\n     #######################################\n     need to  create a new child component for the part of <form>, when we have more information on search options\n     ######################################\n     */\n    let formPart = (//creare un componente a part\n        <>{}\n            <form className={(query === \"\") ? 'search-form' : 'search-form small'}\n                  onSubmit={handleSendSearch}>\n                {/*search form*/}\n                <div style={{position: 'relative'}}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"search\"\n                        defaultValue={inputToSearch}\n                        onChange={e => setInputToSearch(e.target.value)}\n                    />\n                    <button type=\"submit\" value=\"Submit\">\n                        <SearchButton/>\n                    </button>\n                </div>\n\n                <div className=\"option-holder\">\n                    <label>Source:</label><br/>\n                    <div className=\"checkboxes-holder\">\n\n                        <CheckBox label=\"Scopus\" value=\"scopus\" isChecked={checkboxes.scopus} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"Google Scholar\" value=\"googleScholar\" isChecked={checkboxes.googleScholar} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"arXiv\" value=\"arXiv\" isChecked={checkboxes.arXiv} handler={handleCheckboxChange}/>\n                    </div>\n\n                    <label>Search by:</label><br/>\n                    <div className=\"checkboxes-holder\">\n\n                        <CheckBox label=\"All\" value=\"all\" isChecked={checkboxes.all} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"Author\" value=\"author\" isChecked={checkboxes.author} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"Paper title\" value=\"paperTitle\" isChecked={checkboxes.paperTitle} handler={handleCheckboxChange}/>\n\n                    </div>\n\n                    <label>Year:</label><br/>\n                    <div className=\"checkboxes-holder\">\n\n                        <CheckBox label=\"2019\" value=\"2019\" isChecked={checkboxes.years.includes(\"2019\")} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"2018\" value=\"2018\" isChecked={checkboxes.years.includes(\"2018\")} handler={handleCheckboxChange}/>\n                        <CheckBox label=\"2017\" value=\"2017\" isChecked={checkboxes.years.includes(\"2017\")} handler={handleCheckboxChange}/>\n\n                    </div>\n                </div>\n\n            </form>\n        </>);\n\n\n    let resultPart=\"\";\n\n    //if the search results list is empty\n    if (display === true && papersList.length === 0 && query !== \"\") {\n        //the class is used only to workaround a small bug that display not found just as the search start before the loading icon\n        resultPart = (\n            <div className=\"not-found\"> not found :( </div> \n        );\n    }\n    else if(papersList.length > 0 && query !== \"\"){\n\n        //get first and last paper id of list\n        let firstId = papersList[0].id;\n        let lastId = papersList[papersList.length - 1].id;\n\n        //set correct url for pagination\n        let paginationUrl = window.location.href;\n        let index = paginationUrl.indexOf(\"?\");\n        let existBefore = paginationUrl.lastIndexOf(\"before\");\n        let existOfAfter = paginationUrl.lastIndexOf(\"after\");\n        if(existBefore > -1){\n            paginationUrl = paginationUrl.slice(index, existBefore)\n        }\n        else if(existOfAfter > -1){\n            paginationUrl = paginationUrl.slice(index, existOfAfter)\n        }\n        else{\n            paginationUrl = paginationUrl.slice(index) +\"&\";\n        }\n\n        let printList = (scopus === false?\n                (<PrintLocalSearchList papersList={papersList} handlePaperSelection={handlePaperSelection}/>)\n                :\n                ( <PrintScoupusSearchList papersList={papersList} handlePaperSelection={handlePaperSelection}/>)\n        );\n\n\n        resultPart = (\n            <div className=\"paper-card-holder\">\n                {printList}\n                <Pagination before={firstId} after={lastId} pagination={pagination} path={paginationUrl}/>\n                <button className=\"bottom-left-btn\" type=\"submit\" value=\"Submit\">\n                    +\n                </button>\n            </div>\n        );\n    }\n\n    //if is loading\n    if (display === false) {\n\n        resultPart = (\n            <div className=\"search-loading-holder\">\n                <LoadIcon class={\"small\"}/>\n            </div>);\n    }\n\n    let output = (\n        <>\n            {formPart}\n            <form className=\"search-results\" onSubmit={handleAddPapers}>\n                {resultPart}\n            </form>\n        </>\n    );\n\n    return output;\n};\n\n\n\n\nexport default SearchForm;","import React, {useState, useEffect, useContext} from \"react\";\nimport queryString from \"query-string\";\n\nimport {projectPapersDao} from '../../dao/projectPapers.dao';\nimport LoadIcon from '../svg/loadIcon';\nimport {PrintList} from './printPapersList';\n\nimport {AppContext} from '../providers/appProvider'\nimport {join} from \"../../utils\";\nimport Pagination from \"../modules/pagination\";\n\n\n/**\n * the local component that shows the papers list of a project\n */\nconst PapersList = ({project_id, location, match}) => {\n\n\n    //fetch data\n    const [papersList, setPapersList] = useState([]);\n\n    //bool to show the pagination buttons\n    const initialPaginationState = {hasbefore: false, continues: false};\n    const [pagination, setPagination] = useState(initialPaginationState);\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    //set query params from url\n    const params = queryString.parse(location.search);\n    const pagesize = params.pagesize || 10;\n    const before = params.before || -1;\n    const after = params.after || 0;\n\n    //if \"before\" is defined by query then insert it in object, else insert \"after\" in object\n    const queryData = (before >= 0 ? {pagesize, before} : {pagesize, after});\n    //insert project_id in queryData\n    queryData.project_id = project_id;\n\n    useEffect(() => {\n\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n            //hide the page\n            setDisplay(false);\n\n            //call the dao\n            let res = await projectPapersDao.getPapersList(queryData);\n\n            //error checking\n            //if is 404 error\n            if (res.message === \"Not Found\") {\n                setPapersList([]);\n                setPagination(initialPaginationState);\n                //show the page\n                setDisplay(true);\n            }\n            //if is other error\n            else if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n\n                //update state\n                setPapersList(res.results);\n                setPagination({hasbefore: res.hasbefore, continues: res.continues});\n                //show the page\n                setDisplay(true);\n            }\n\n        }\n        fetchData();\n\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectPapersDao.abortRequest();\n        };\n    }, [pagesize, before, after]); //re-excute when these variables change\n\n    let output;\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon class={\"small\"}/>;\n    }\n    else {\n\n        //get first and last paper id of list\n        let firstId = 0;\n        let lastId = 0;\n        //if the list is not empty\n        if (papersList.length > 0) {\n            firstId = papersList[0].id;\n            lastId = papersList[papersList.length - 1].id;\n        }\n\n        output = (\n            <div className=\"paper-card-holder\">\n                <PrintList papersList={papersList}/>\n                <Pagination before={firstId} after={lastId} pagination={pagination} path={match.url+\"?\"}/>\n            </div>\n        );\n    }\n\n    output = (\n        <div className=\"papers-list\">\n            {output}\n        </div>\n    );\n\n    return output;\n\n}\n\n\n\nexport default PapersList;","import React, {useState, useEffect, useContext} from \"react\";\nimport {Route, Link} from 'react-router-dom';\nimport {Flipper, Flipped} from 'react-flip-toolkit';\n\nimport SearchForm from './../forms/searchform';\nimport PapersList from './../papers/papersList';\nimport {projectsDao} from './../../dao/projects.dao';\nimport LoadIcon from './../svg/loadIcon';\nimport {join} from './../../utils/index';\n\nimport {AppContext} from './../providers/appProvider'\n\n\n/**\n *this component will show a projects page\n */\nconst ProjectPage = (props) => {\n\n    //project object of page\n    const [project, setProject] = useState({});\n\n    //bool to control the visualization of page\n    const [display, setDisplay] = useState(false);\n    //bool for annimation\n    const [slider, setSlider] = useState(true);\n\n    //get data from global context\n    const appConsumer = useContext(AppContext);\n\n    const project_id = props.match.params.id;\n\n    const substrUrl = window.location.pathname.substring(window.location.pathname.length - 7, window.location.pathname.length);\n\n    //set animation effects on menu by parsing the url\n    useEffect(() => {\n\n        if (substrUrl === '/search' || substrUrl === 'search/') {\n            setSlider(false);\n        }\n        else {\n            setSlider(true);\n        }\n    }, [substrUrl]);\n\n\n    useEffect(() => {\n\n        setDisplay(false);\n        //a wrapper function ask by react hook\n        const fetchData = async () => {\n\n            //call the dao\n            let res = await projectsDao.getProject(project_id);\n\n            //error checking\n            //if is other error\n            if (res.message) {\n                //pass error object to global context\n                appConsumer.setError(res);\n            }\n            //if res isn't null\n            else if (res !== null) {\n                //update state\n                setProject(res);\n                //show the page\n                setDisplay(true);\n            }\n        }\n        fetchData();\n        //when the component will unmount\n        return () => {\n            //stop all ongoing request\n            projectsDao.abortRequest();\n        };\n    }, [project_id]); //re-execute when these variables change\n\n\n    let output;\n\n    //if the page is loading\n    if (display === false) {\n        //print svg image\n        output = <LoadIcon/>;\n    }\n    else {\n        appConsumer.setTitle(project.data.name.toUpperCase());//I set the page title\n        output = (\n\n            <div className=\"project-wrapper\">\n                <ProjectPageHead project={project} match={props.match} slider={slider}/>\n\n                {/*route the papers list*/}\n                <Route exact  path={props.match.url} render={() =>\n                    <>\n                        <div className=\"project-description\">\n                            <h2>description:</h2>\n                            {project.data.description}\n                        </div>\n                        <PapersList project_id={project_id} location={props.location} match={props.match} />\n                    </>\n                }/>\n\n                {/*route the form of search*/}\n                <Route exact path={props.match.url + \"/search\"} render={(props) =>\n                    <SearchForm project_id={project_id} {...props} />\n                }/>\n\n            </div>\n        );\n    }\n\n    return output;\n}\n\n/**\n * this is the local component to print head of project page\n */\nconst ProjectPageHead = function ({project, match, slider}) {\n    let output = (\n        <>\n            <div className=\"project-nav-link-wrapper\">\n                <div className=\"nav-link\">\n                    <Link to={match.url}>papers</Link>\n                </div>\n                <div className=\"nav-link\">\n                    <Link to={join(match.url, \"/search\")}>search</Link>\n                </div>\n                <Flipper flipKey={slider}>\n                    <Flipped flipId=\"underline\">\n                        <div className={slider ? \"underline underline-to-left\" : \"underline underline-to-right\"}/>\n                    </Flipped>\n                </Flipper>\n            </div>\n        </>\n    );\n    return output;\n\n}\n\n\nexport default ProjectPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, } from \"react-router-dom\";\n\n\n\nimport Main from './components/main';\nimport Home from './components/home';\n\nimport NavBar from './components/navigation/navBar';\nimport SideMenu from './components/navigation/sideMenu';\n\nimport ProjectsList from './components/projects/projectsList';\nimport ProjectPage from './components/projects/projectPage';\n\n\nimport  {AppProvider} from './components/providers/appProvider';\n\n\n/**\n *this is the start point of application\n */\n\nconst App = function(props) {\n\n\n        return (\n            <Router basename={\"slr-web/\"}>\n                <div className=\"app\">\n\n                    {/*mount a root context object*/}\n                    <AppProvider>\n\n                        <NavBar>\n                            {/*component menu*/}\n                            <SideMenu/>\n                        </NavBar>\n                        <Main>\n                            <Route exact path=\"/\" render={() => <Home/> }/>\n                            <Route exact path=\"/projects\" render={(props) => <ProjectsList {...props} />}/>\n                            <Route path=\"/projects/:id\" render={(props) => <ProjectPage {...props} />}/>\n\n                        </Main>\n\n                    </AppProvider>\n                </div>\n            </Router>\n        );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}